<<code language="ocaml" | sig
  exception Ocsigen_Internal_Error of string
  exception Input_is_too_large
  exception Ocsigen_Bad_Request
  exception Ocsigen_Request_too_long
  val ( >>= ) : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
  val ( >|= ) : 'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t
  val ( !! ) : 'a Lazy.t -> 'a
  external id : 'a -> 'a = "%identity"
  val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
  val curry : ('a * 'b -> 'c) -> 'a -> 'b -> 'c
  val uncurry : ('a -> 'b -> 'c) -> 'a * 'b -> 'c
  module Tuple3 :
    sig
      val fst : 'a * 'b * 'c -> 'a
      val snd : 'a * 'b * 'c -> 'b
      val thd : 'a * 'b * 'c -> 'c
    end
  type poly = Ocsigen_lib.poly
  val to_poly : 'a -> poly
  val from_poly : poly -> 'a
  type yesnomaybe = Ocsigen_lib_base.yesnomaybe = Yes | No | Maybe
  type ('a, 'b) leftright =
    ('a, 'b) Ocsigen_lib_base.leftright =
      Left of 'a
    | Right of 'b
  val advert : string
  module Option :
    sig
      type 'a t = 'a option
      val map : ('a -> 'b) -> 'a t -> 'b t
      val get : (unit -> 'a) -> 'a t -> 'a
      val iter : ('a -> unit) -> 'a t -> unit
      val return : 'a -> 'a t
      val bind : 'a t -> ('a -> 'b t) -> 'b t
      val to_list : 'a t -> 'a list
    end
  module List :
    sig
      val length : 'a list -> int
      val hd : 'a list -> 'a
      val tl : 'a list -> 'a list
      val nth : 'a list -> int -> 'a
      val rev : 'a list -> 'a list
      val append : 'a list -> 'a list -> 'a list
      val rev_append : 'a list -> 'a list -> 'a list
      val concat : 'a list list -> 'a list
      val flatten : 'a list list -> 'a list
      val iter : ('a -> unit) -> 'a list -> unit
      val map : ('a -> 'b) -> 'a list -> 'b list
      val rev_map : ('a -> 'b) -> 'a list -> 'b list
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
      val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
      val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
      val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val fold_left2 :
        ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a
      val fold_right2 :
        ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
      val for_all : ('a -> bool) -> 'a list -> bool
      val exists : ('a -> bool) -> 'a list -> bool
      val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val mem : 'a -> 'a list -> bool
      val memq : 'a -> 'a list -> bool
      val find : ('a -> bool) -> 'a list -> 'a
      val filter : ('a -> bool) -> 'a list -> 'a list
      val find_all : ('a -> bool) -> 'a list -> 'a list
      val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
      val assoc : 'a -> ('a * 'b) list -> 'b
      val assq : 'a -> ('a * 'b) list -> 'b
      val mem_assoc : 'a -> ('a * 'b) list -> bool
      val mem_assq : 'a -> ('a * 'b) list -> bool
      val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
      val split : ('a * 'b) list -> 'a list * 'b list
      val combine : 'a list -> 'b list -> ('a * 'b) list
      val sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
      val map_filter : ('a -> 'b option) -> 'a list -> 'b list
      val last : 'a list -> 'a
      val assoc_remove : 'a -> ('a * 'b) list -> 'b * ('a * 'b) list
      val remove_first_if_any : 'a -> 'a list -> 'a list
      val remove_first_if_any_q : 'a -> 'a list -> 'a list
      val remove_all_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val chop : int -> 'a list -> 'a list
    end
  module Clist :
    sig
      type 'a t = 'a Ocsigen_lib_base.Clist.t
      type 'a node = 'a Ocsigen_lib_base.Clist.node
      val make : 'a -> 'a node
      val create : unit -> 'a t
      val insert : 'a t -> 'a node -> unit
      val remove : 'a node -> unit
      val value : 'a node -> 'a
      val in_list : 'a node -> bool
      val is_empty : 'a t -> bool
      val iter : ('a -> unit) -> 'a t -> unit
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a
    end
  module Int :
    sig
      module Table :
        sig
          type key = int
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
    end
  module String_base :
    sig
      external length : string -> int = "%string_length"
      external get : string -> int -> char = "%string_safe_get"
      external set : string -> int -> char -> unit = "%string_safe_set"
      external create : int -> string = "caml_create_string"
      val make : int -> char -> string
      val copy : string -> string
      val sub : string -> int -> int -> string
      val fill : string -> int -> int -> char -> unit
      val blit : string -> int -> string -> int -> int -> unit
      val concat : string -> string list -> string
      val iter : (char -> unit) -> string -> unit
      val escaped : string -> string
      val index : string -> char -> int
      val rindex : string -> char -> int
      val index_from : string -> int -> char -> int
      val rindex_from : string -> int -> char -> int
      val contains : string -> char -> bool
      val contains_from : string -> int -> char -> bool
      val rcontains_from : string -> int -> char -> bool
      val uppercase : string -> string
      val lowercase : string -> string
      val capitalize : string -> string
      val uncapitalize : string -> string
      type t = string
      val compare : t -> t -> int
      external unsafe_get : string -> int -> char = "%string_unsafe_get"
      external unsafe_set : string -> int -> char -> unit
        = "%string_unsafe_set"
      external unsafe_blit : string -> int -> string -> int -> int -> unit
        = "caml_blit_string" "noalloc"
      external unsafe_fill : string -> int -> int -> char -> unit
        = "caml_fill_string" "noalloc"
      val remove_spaces : string -> int -> int -> string
      val basic_sep : char -> string -> string * string
      val sep : char -> string -> string * string
      val split : ?multisep:bool -> char -> string -> string list
      val may_append : string -> sep:string -> string -> string
      val may_concat : string -> sep:string -> string -> string
      val first_diff : string -> string -> int -> int -> int
      module Table :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
      module Set :
        sig
          type elt = string
          type t
          val empty : t
          val is_empty : t -> bool
          val mem : elt -> t -> bool
          val add : elt -> t -> t
          val singleton : elt -> t
          val remove : elt -> t -> t
          val union : t -> t -> t
          val inter : t -> t -> t
          val diff : t -> t -> t
          val compare : t -> t -> int
          val equal : t -> t -> bool
          val subset : t -> t -> bool
          val iter : (elt -> unit) -> t -> unit
          val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
          val for_all : (elt -> bool) -> t -> bool
          val exists : (elt -> bool) -> t -> bool
          val filter : (elt -> bool) -> t -> t
          val partition : (elt -> bool) -> t -> t * t
          val cardinal : t -> int
          val elements : t -> elt list
          val min_elt : t -> elt
          val max_elt : t -> elt
          val choose : t -> elt
          val split : elt -> t -> t * bool * t
        end
      module Map :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
    end
  module Url_base :
    sig
      type t = string
      type uri = string
      val make_absolute_url :
        https:bool -> host:string -> port:int -> uri -> t
      type path = string list
      val remove_dotdot : path -> path
      val remove_end_slash : string -> string
      val remove_internal_slash : path -> path
      val change_empty_list : path -> path
      val add_end_slash_if_missing : path -> path
      val remove_slash_at_end : path -> path
      val remove_slash_at_beginning : path -> path
      val is_prefix_skip_end_slash : string list -> string list -> bool
      val split_fragment : string -> string * string option
    end
  module Printexc :
    sig
      val to_string : exn -> string
      val print : ('a -> 'b) -> 'a -> 'b
      val catch : ('a -> 'b) -> 'a -> 'b
      val print_backtrace : out_channel -> unit
      val get_backtrace : unit -> string
      val record_backtrace : bool -> unit
      val backtrace_status : unit -> bool
      val register_printer : (exn -> string option) -> unit
      val register_exn_printer : ((exn -> string) -> exn -> string) -> unit
    end
  exception Eliom_Internal_Error of string
  module Lwt_ops :
    sig
      val ( >>= ) : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t
      val ( =<< ) : ('a -> 'b Lwt.t) -> 'a Lwt.t -> 'b Lwt.t
      val ( >|= ) : 'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t
      val ( =|< ) : ('a -> 'b) -> 'a Lwt.t -> 'b Lwt.t
    end
  type 'a client_expr = 'a Eliom_lib_base.client_expr
  module RawXML :
    sig
      type separator = Space | Comma
      val separator_to_string : separator -> string
      type cookie_info = bool * string list
      module Json_cookie_info :
        sig
          type a = bool * string list
          val t : a Deriving_Json.t
          val write : Buffer.t -> a -> unit
          val read : Deriving_Json_lexer.lexbuf -> a
          val to_string : a -> string
          val from_string : string -> a
          val match_variant : [ `Cst of int | `NCst of int ] -> bool
          val read_variant :
            Deriving_Json_lexer.lexbuf -> [ `Cst of int | `NCst of int ] -> a
        end
      type -'a caml_event_handler =
          CE_registered_closure of string * ('a Js.t -> unit) client_expr
        | CE_client_closure of ('a Js.t -> unit)
        | CE_call_service of
            ([ `A | `Form_get | `Form_post ] * cookie_info option *
             string option)
            option Eliom_lazy.request
        constraint 'a = #Dom_html.event
      type event_handler =
          Raw of string
        | Caml of Dom_html.event caml_event_handler
      type uri = string Eliom_lazy.request
      val string_of_uri : uri -> string
      val uri_of_string : string -> uri
      val uri_of_fun : (unit -> string) -> uri
      val event_handler_of_string : string -> event_handler
      val string_of_event_handler : event_handler -> string
      val event_handler_of_service :
        ([ `A | `Form_get | `Form_post ] * cookie_info option * string option)
        option Eliom_lazy.request -> event_handler
      val event_of_service :
        ([ `A | `Form_get | `Form_post ] * cookie_info option * string option)
        option Eliom_lazy.request -> event_handler
      val event_of_string : string -> event_handler
      val string_of_handler : event_handler -> string
      val ce_registered_closure_class : string
      val ce_call_service_class : string
      val process_node_class : string
      val request_node_class : string
      val ce_call_service_attrib : string
      val ce_template_attrib : string
      val node_id_attrib : string
      val closure_attr_prefix : string
      val closure_attr_prefix_len : int
      type aname = string
      type acontent =
          AFloat of float
        | AInt of int
        | AStr of string
        | AStrL of separator * string list
      type racontent =
          RA of acontent
        | RACamlEventHandler of Dom_html.event caml_event_handler
        | RALazyStr of string Eliom_lazy.request
        | RALazyStrL of separator * string Eliom_lazy.request list
      type attrib = aname * racontent
      val aname : attrib -> aname
      val acontent : attrib -> acontent
      val racontent : attrib -> racontent
      val float_attrib : aname -> float -> attrib
      val int_attrib : aname -> int -> attrib
      val string_attrib : aname -> string -> attrib
      val space_sep_attrib : aname -> string list -> attrib
      val comma_sep_attrib : aname -> string list -> attrib
      val event_handler_attrib : aname -> event_handler -> attrib
      val uri_attrib : aname -> string Eliom_lazy.request -> attrib
      val uris_attrib : aname -> string Eliom_lazy.request list -> attrib
      val event_attrib : aname -> event_handler -> attrib
      type ename = string
      type node_id = NoId | ProcessId of string | RequestId of string
      module ClosureMap :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
      type event_handler_table = (unit -> unit) client_expr ClosureMap.t
    end
  val tyxml_unwrap_id_int : int
  exception Eliom_Internal_Error of string
  type file_info
  val to_json : ?typ:'a -> 'b -> string
  val of_json : ?typ:'a -> string -> 'b
  exception False
  module Url :
    sig
      type t = string
      type uri = string
      val make_absolute_url :
        https:bool -> host:string -> port:int -> uri -> t
      type path = string list
      val remove_dotdot : path -> path
      val remove_end_slash : string -> string
      val remove_internal_slash : path -> path
      val change_empty_list : path -> path
      val add_end_slash_if_missing : path -> path
      val remove_slash_at_end : path -> path
      val remove_slash_at_beginning : path -> path
      val is_prefix_skip_end_slash : string list -> string list -> bool
      val split_fragment : string -> string * string option
      val urldecode : string -> string
      val urlencode : ?with_plus:bool -> string -> string
      type http_url = {
        hu_host : string;
        hu_port : int;
        hu_path : string list;
        hu_path_string : string;
        hu_arguments : (string * string) list;
        hu_fragment : string;
      }
      type file_url = {
        fu_path : string list;
        fu_path_string : string;
        fu_arguments : (string * string) list;
        fu_fragment : string;
      }
      type url = Http of http_url | Https of http_url | File of file_url
      val default_http_port : int
      val default_https_port : int
      val path_of_path_string : string -> string list
      val encode_arguments : (string * string) list -> string
      val decode_arguments : string -> (string * string) list
      val url_of_string : string -> url option
      val string_of_url : url -> string
      module Current :
        sig
          val host : string
          val port : int option
          val path_string : string
          val path : string list
          val arguments : (string * string) list
          val get_fragment : unit -> string
          val set_fragment : string -> unit
          val get : unit -> url option
          val set : url -> unit
          val as_string : string
        end
      val decode : string -> string
      val encode : ?plus:bool -> string -> string
      val make_encoded_parameters : (string * string) list -> string
      val split_path : string -> string list
      val get_ssl : string -> bool option
    end
  module String :
    sig
      external length : string -> int = "%string_length"
      external get : string -> int -> char = "%string_safe_get"
      external set : string -> int -> char -> unit = "%string_safe_set"
      external create : int -> string = "caml_create_string"
      val make : int -> char -> string
      val copy : string -> string
      val sub : string -> int -> int -> string
      val fill : string -> int -> int -> char -> unit
      val blit : string -> int -> string -> int -> int -> unit
      val concat : string -> string list -> string
      val iter : (char -> unit) -> string -> unit
      val escaped : string -> string
      val index : string -> char -> int
      val rindex : string -> char -> int
      val index_from : string -> int -> char -> int
      val rindex_from : string -> int -> char -> int
      val contains : string -> char -> bool
      val contains_from : string -> int -> char -> bool
      val rcontains_from : string -> int -> char -> bool
      val uppercase : string -> string
      val lowercase : string -> string
      val capitalize : string -> string
      val uncapitalize : string -> string
      type t = string
      val compare : t -> t -> int
      external unsafe_get : string -> int -> char = "%string_unsafe_get"
      external unsafe_set : string -> int -> char -> unit
        = "%string_unsafe_set"
      external unsafe_blit : string -> int -> string -> int -> int -> unit
        = "caml_blit_string" "noalloc"
      external unsafe_fill : string -> int -> int -> char -> unit
        = "caml_fill_string" "noalloc"
      val remove_spaces : string -> int -> int -> string
      val basic_sep : char -> string -> string * string
      val sep : char -> string -> string * string
      val split : ?multisep:bool -> char -> string -> string list
      val may_append : string -> sep:string -> string -> string
      val may_concat : string -> sep:string -> string -> string
      val first_diff : string -> string -> int -> int -> int
      module Table :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
      module Set :
        sig
          type elt = string
          type t
          val empty : t
          val is_empty : t -> bool
          val mem : elt -> t -> bool
          val add : elt -> t -> t
          val singleton : elt -> t
          val remove : elt -> t -> t
          val union : t -> t -> t
          val inter : t -> t -> t
          val diff : t -> t -> t
          val compare : t -> t -> int
          val equal : t -> t -> bool
          val subset : t -> t -> bool
          val iter : (elt -> unit) -> t -> unit
          val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
          val for_all : (elt -> bool) -> t -> bool
          val exists : (elt -> bool) -> t -> bool
          val filter : (elt -> bool) -> t -> t
          val partition : (elt -> bool) -> t -> t * t
          val cardinal : t -> int
          val elements : t -> elt list
          val min_elt : t -> elt
          val max_elt : t -> elt
          val choose : t -> elt
          val split : elt -> t -> t * bool * t
        end
      module Map :
        sig
          type key = string
          type +'a t
          val empty : 'a t
          val is_empty : 'a t -> bool
          val mem : key -> 'a t -> bool
          val add : key -> 'a -> 'a t -> 'a t
          val singleton : key -> 'a -> 'a t
          val remove : key -> 'a t -> 'a t
          val merge :
            (key -> 'a option -> 'b option -> 'c option) ->
            'a t -> 'b t -> 'c t
          val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
          val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
          val iter : (key -> 'a -> unit) -> 'a t -> unit
          val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
          val for_all : (key -> 'a -> bool) -> 'a t -> bool
          val exists : (key -> 'a -> bool) -> 'a t -> bool
          val filter : (key -> 'a -> bool) -> 'a t -> 'a t
          val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
          val cardinal : 'a t -> int
          val bindings : 'a t -> (key * 'a) list
          val min_binding : 'a t -> key * 'a
          val max_binding : 'a t -> key * 'a
          val choose : 'a t -> key * 'a
          val split : key -> 'a t -> 'a t * 'a option * 'a t
          val find : key -> 'a t -> 'a
          val map : ('a -> 'b) -> 'a t -> 'b t
          val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
        end
      val remove_eols : string -> string
    end
  val debug : ('a, unit, string, unit) Pervasives.format4 -> 'a
  val error : ('a, unit, string, 'b) Pervasives.format4 -> 'a
  val debug_exn : ('a, unit, string, unit) Pervasives.format4 -> exn -> 'a
  val jsdebug : 'a -> unit
  val alert : ('a, unit, string, unit) Pervasives.format4 -> 'a
  val jsalert : Js.js_string Js.t -> unit
  val debug_var : string -> 'a -> unit
  val lwt_ignore : ?message:string -> unit Lwt.t -> unit
  val encode_form_value : 'a -> string
  val unmarshal_js_var : string -> 'a
  val encode_header_value : 'a -> string
end >>