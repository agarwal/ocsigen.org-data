=Module <<a_api_type | module Lwt >> =
<<div class="code"|<<span class="keyword"|module>> Lwt: <<span class='code'|sig>><<a_api text=".." | module Lwt >><<span class='code'|end>>>>~Module <<span class='code'|~Lwt>>~: cooperative light~-weight threads~.\\

----
\\
~This module defines //cooperative light~-weight threads// with
    their primitives~. ~A //light~-weight thread// represent a
    computation that may be not terminated~, for example because it is
    waiting for some event to happen~.\\


    ~Lwt threads are cooperative in the sense that switching to another
    thread is awlays explicit ~(with <<a_api | val Lwt.wakeup >> or <<span class='code'|wekup~_exn>>~)~. ~When a
    thread is running~, it executes as much as possible~, and then
    returns ~(a value or an eror~) or sleeps~.\\


    ~Note that inside a ~Lwt thread~, exceptions must be raised with
    <<a_api | val Lwt.fail >> instead of <<span class='code'|raise>>~. ~Also the <<span class='code'|try ~.~.~. with ~.~.~.>>
    construction will not catch ~Lwt errors~. ~You must use <<a_api | val Lwt.catch >>
    instead~.\\


    ~Lwt also provides the syntax extension <<a_api | module Pa_lwt >> to make code
    using ~Lwt more readable~.\\
\\

======@@id="6_Definitionsandbasics"@@~Definitions and basics======
\\
<<div class="code" id="TYPEt"|<<span class="keyword"|type>> <<span class="code type"|+'a>> t>>
<<div class="info"|~The type of threads returning a result of type <<span class='code'|~'a>>~.\\
>>

<<div id="VALreturn" class="code"|<<span class="keyword"|val>> return : <<span class="code type"|'a -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|return e>> is a thread whose return value is the value of the
      expression <<span class='code'|e>>~.\\
>>
<<div id="VALfail" class="code"|<<span class="keyword"|val>> fail : <<span class="code type"|exn -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|fail e>> is a thread that fails with the exception <<span class='code'|e>>~.\\
>>
<<div id="VALbind" class="code"|<<span class="keyword"|val>> bind : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> ('a -> 'b <<a_api text="t" | type Lwt.t >>) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|bind t f>> is a thread which first waits for the thread <<span class='code'|t>> to
      terminate and then~, if the thread succeeds~, behaves as the
      application of function <<span class='code'|f>> to the return value of <<span class='code'|t>>~.  ~If the
      thread <<span class='code'|t>> fails~, <<span class='code'|bind t f>> also fails~, with the same
      exception~.\\


      ~The expression <<span class='code'|bind t ~(fun x ~-~> t~'~)>> can intuitively be read as
      <<span class='code'|let x ~= t in t~'>>~, and if you use the //lwt~.syntax// syntax
      extension~, you can write a bind operation like that~: <<span class='code'|lwt x ~= t in t~'>>~.\\


      ~Note that <<span class='code'|bind>> is also often used just for synchronization
      purpose~: <<span class='code'|t~'>> will not execute before <<span class='code'|t>> is terminated~.\\


      ~The result of a thread can be bound several time~.\\
>>
<<div id="VAL(>>=)" class="code"|<<span class="keyword"|val>> ~(~>~>~=~) : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> ('a -> 'b <<a_api text="t" | type Lwt.t >>) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|t ~>~>~= f>> is an alternative notation for <<span class='code'|bind t f>>~.\\
>>
<<div id="VAL(=<<)" class="code"|<<span class="keyword"|val>> ~(~=~<~<~) : <<span class="code type"|('a -> 'b <<a_api text="t" | type Lwt.t >>) -> 'a <<a_api text="t" | type Lwt.t >> -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|f ~=~<~< t>> is <<span class='code'|t ~>~>~= f>>\\
>>
<<div id="VALmap" class="code"|<<span class="keyword"|val>> map : <<span class="code type"|('a -> 'b) -> 'a <<a_api text="t" | type Lwt.t >> -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|map f m>> map the result of a thread~. ~This is the same as <<span class='code'|bind
      m ~(fun x ~-~> return ~(f x~)~)>>\\
>>
<<div id="VAL(>|=)" class="code"|<<span class="keyword"|val>> ~(~>~|~=~) : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> ('a -> 'b) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|m ~>~|~= f>> is <<span class='code'|map f m>>\\
>>
<<div id="VAL(=|<)" class="code"|<<span class="keyword"|val>> ~(~=~|~<~) : <<span class="code type"|('a -> 'b) -> 'a <<a_api text="t" | type Lwt.t >> -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|f ~=~|~< m>> is <<span class='code'|map f m>>\\
>>
\\

======@@id="6_Threadstorage"@@~Thread storage======
\\
<<div class="code" id="TYPEkey"|<<span class="keyword"|type>> <<span class="code type"|'a>> key>>
<<div class="info"|~Type of a key~. ~Keys are used to store local values into
      threads\\
>>

<<div id="VALnew_key" class="code"|<<span class="keyword"|val>> new~_key : <<span class="code type"|unit -> 'a <<a_api text="key" | type Lwt.key >>>>>><<div class="info"|<<span class='code'|new~_key ~(~)>> creates a new key~.\\
>>
<<div id="VALget" class="code"|<<span class="keyword"|val>> get : <<span class="code type"|'a <<a_api text="key" | type Lwt.key >> -> 'a option>>>><<div class="info"|<<span class='code'|get key>> returns the value associated with <<span class='code'|key>> in the current
      thread~.\\
>>
<<div id="VALwith_value" class="code"|<<span class="keyword"|val>> with~_value : <<span class="code type"|'a <<a_api text="key" | type Lwt.key >> -> 'a option -> (unit -> 'b) -> 'b>>>><<div class="info"|<<span class='code'|with~_value key value f>> executes <<span class='code'|f>> with <<span class='code'|value>> associated to
      <<span class='code'|key>>~. ~The previous value associated to <<span class='code'|key>> is restored after
      <<span class='code'|f>> terminates~.\\
>>
\\

======@@id="6_Exceptionshandling"@@~Exceptions handling======
\\
<<div id="VALcatch" class="code"|<<span class="keyword"|val>> catch : <<span class="code type"|(unit -> 'a <<a_api text="t" | type Lwt.t >>) -> (exn -> 'a <<a_api text="t" | type Lwt.t >>) -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|catch t f>> is a thread that behaves as the thread <<span class='code'|t ~(~)>> if
      this thread succeeds~.  ~If the thread <<span class='code'|t ~(~)>> fails with some
      exception~, <<span class='code'|catch t f>> behaves as the application of <<span class='code'|f>> to this
      exception~.\\
>>
<<div id="VALtry_bind" class="code"|<<span class="keyword"|val>> try~_bind : <<span class="code type"|(unit -> 'a <<a_api text="t" | type Lwt.t >>) -> ('a -> 'b <<a_api text="t" | type Lwt.t >>) -> (exn -> 'b <<a_api text="t" | type Lwt.t >>) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|try~_bind t f g>> behaves as <<span class='code'|bind ~(t ~(~)~) f>> if <<span class='code'|t>> does not
      fail~.  ~Otherwise~, it behaves as the application of <<span class='code'|g>> to the
      exception associated to <<span class='code'|t ~(~)>>~.\\
>>
<<div id="VALfinalize" class="code"|<<span class="keyword"|val>> finalize : <<span class="code type"|(unit -> 'a <<a_api text="t" | type Lwt.t >>) -> (unit -> unit <<a_api text="t" | type Lwt.t >>) -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|finalize f g>> returns the same result as <<span class='code'|f ~(~)>> whether it
      fails or not~. ~In both cases~, <<span class='code'|g ~(~)>> is executed after <<span class='code'|f>>~.\\
>>
\\

======@@id="6_Multithreadscomposition"@@~Multi~-threads composition======
\\
<<div id="VALchoose" class="code"|<<span class="keyword"|val>> choose : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> list -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|choose l>> behaves as the first thread in <<span class='code'|l>> to terminate~.  ~If
      several threads are already terminated~, one is choosen at
      random~.\\


      ~Note~: <<a_api | val Lwt.choose >> leaves the local values of the current thread
      unchanged~.\\
>>
<<div id="VALnchoose" class="code"|<<span class="keyword"|val>> nchoose : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> list -> 'a list <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|nchoose l>> returns the value of all that have succcessfully
      terminated~. ~If all threads are sleeping~, it waits for at least
      one to terminates~. ~If one the threads of <<span class='code'|l>> fails~, <<span class='code'|nchoose>>
      fails with the same exception~.\\


      ~Note~: <<a_api | val Lwt.nchoose >> leaves the local values of the current thread
      unchanged~.\\
>>
<<div id="VALjoin" class="code"|<<span class="keyword"|val>> join : <<span class="code type"|unit <<a_api text="t" | type Lwt.t >> list -> unit <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|join l>> waits for all threads in <<span class='code'|l>> to terminate~. ~If one of
      the threads fails~, then <<span class='code'|join l>> will fails with the same
      exception as the first one to terminate~.\\


      ~Note~: <<a_api | val Lwt.join >> leaves the local values of the current thread
      unchanged~.\\
>>
<<div id="VAL(<?>)" class="code"|<<span class="keyword"|val>> ~(~<~?~>~) : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> 'a <<a_api text="t" | type Lwt.t >> -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|t ~<~?~> t~'>> is the same as <<span class='code'|choose ~[t~; t~'~]>>\\
>>
<<div id="VAL(<&>)" class="code"|<<span class="keyword"|val>> ~(~<~&~>~) : <<span class="code type"|unit <<a_api text="t" | type Lwt.t >> -> unit <<a_api text="t" | type Lwt.t >> -> unit <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|t ~<~&~> t~'>> is the same as <<span class='code'|join ~[t~; t~'~]>>\\
>>
<<div id="VALignore_result" class="code"|<<span class="keyword"|val>> ignore~_result : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> unit>>>><<div class="info"|<<span class='code'|ignore~_result t>> start the thread <<span class='code'|t>> and ignores its result
      value if the thread terminates sucessfully~.  ~However~, if the
      thread <<span class='code'|t>> fails~, the exception is raised instead of being
      ignored~.\\


      ~You should use this function if you want to start a thread and
      don~'t care what its return value is~, nor when it terminates ~(for
      instance~, because it is looping~)~.  ~Note that if the thread <<span class='code'|t>>
      yields and later fails~, the exception will not be raised at this
      point in the program~.\\
>>
\\

======@@id="6_Sleepingandresuming"@@~Sleeping and resuming======
\\
<<div class="code" id="TYPEu"|<<span class="keyword"|type>> <<span class="code type"|'a>> u>>
<<div class="info"|~The type of thread wakeners~.\\
>>

<<div id="VALwait" class="code"|<<span class="keyword"|val>> wait : <<span class="code type"|unit -> 'a <<a_api text="t" | type Lwt.t >> * 'a <<a_api text="u" | type Lwt.u >>>>>><<div class="info"|<<span class='code'|wait ~(~)>> is a pair of a thread which sleeps forever ~(unless it
      is resumed by one of the functions <<span class='code'|wakeup>>~, <<span class='code'|wakeup~_exn>> below~)
      and the corresponding wakener~.  ~This thread does not block the
      execution of the remainder of the program ~(except of course~, if
      another thread tries to wait for its termination~)~.\\
>>
<<div id="VALwakeup" class="code"|<<span class="keyword"|val>> wakeup : <<span class="code type"|'a <<a_api text="u" | type Lwt.u >> -> 'a -> unit>>>><<div class="info"|<<span class='code'|wakeup t e>> makes the sleeping thread <<span class='code'|t>> terminate and return
      the value of the expression <<span class='code'|e>>~.\\
>>
<<div id="VALwakeup_exn" class="code"|<<span class="keyword"|val>> wakeup~_exn : <<span class="code type"|'a <<a_api text="u" | type Lwt.u >> -> exn -> unit>>>><<div class="info"|<<span class='code'|wakeup~_exn t e>> makes the sleeping thread <<span class='code'|t>> fail with the
      exception <<span class='code'|e>>~.\\
>>
<<div id="VALwaiter_of_wakener" class="code"|<<span class="keyword"|val>> waiter~_of~_wakener : <<span class="code type"|'a <<a_api text="u" | type Lwt.u >> -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|~Returns the thread associated to a wakener~.\\
>>
\\

======@@id="6_Threadsstate"@@~Threads state======
\\
<<div class="code" id="TYPEstate"|<<span class="keyword"|type>> <<span class="code type"|'a>> state = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Return>> <<span class="keyword"|of>> <<span class="code type"|'a>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The thread which has successfully terminated|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Fail>> <<span class="keyword"|of>> <<span class="code type"|exn>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The thread raised an exception|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Sleep>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The thread is sleeping|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|>>
<<div class="info"|~State of a thread\\
>>

<<div id="VALstate" class="code"|<<span class="keyword"|val>> state : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> 'a <<a_api text="state" | type Lwt.state >>>>>><<div class="info"|<<span class='code'|state t>> returns the state of a thread\\
>>
\\

======@@id="6_Cancelablethreads"@@~Cancelable threads======
\\
\\
~Cancelable threads are the same as regular threads except that
    they can be canceled~.\\
<<div  id="EXCEPTIONCanceled" class="code"|<<span class="keyword"|exception>> Canceled>>
<<div class="info"|~Canceled threads fails with this exception\\
>>
<<div id="VALtask" class="code"|<<span class="keyword"|val>> task : <<span class="code type"|unit -> 'a <<a_api text="t" | type Lwt.t >> * 'a <<a_api text="u" | type Lwt.u >>>>>><<div class="info"|<<span class='code'|task ~(~)>> is the same as <<span class='code'|wait ~(~)>> except that threads created
      with <<span class='code'|task>> can be canceled~.\\
>>
<<div id="VALon_cancel" class="code"|<<span class="keyword"|val>> on~_cancel : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> (unit -> unit) -> unit>>>><<div class="info"|<<span class='code'|on~_cancel t f>> executes <<span class='code'|f>> when <<span class='code'|t>> is canceled~. ~This is the
      same as catching <<span class='code'|~Canceled>>~.\\
>>
<<div id="VALcancel" class="code"|<<span class="keyword"|val>> cancel : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> unit>>>><<div class="info"|<<span class='code'|cancel t>> cancels the threads <<span class='code'|t>>~. ~This means that the deepest
      sleeping thread created with <<span class='code'|task>> and connected to <<span class='code'|t>> is
      wakeup with the exception <<a_api | exception Lwt.Canceled >>~.\\


      ~For example~, in the following code~:\\


      
{{{
        let waiter, wakener = task () in
        cancel (waiter >> printl "plop")
      
}}}
\\


      <<span class='code'|waiter>> will be waked up with <<a_api | exception Lwt.Canceled >>~.\\
>>
<<div id="VALpick" class="code"|<<span class="keyword"|val>> pick : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> list -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|pick l>> is the same as <<a_api | val Lwt.choose >>~, except that it cancels all
      sleeping threads when one terminates~.\\


      ~Note~: <<a_api | val Lwt.pick >> leaves the local values of the current thread
      unchanged~.\\
>>
<<div id="VALnpick" class="code"|<<span class="keyword"|val>> npick : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> list -> 'a list <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|npick l>> is the same as <<a_api | val Lwt.nchoose >>~, except that it cancels all
      sleeping threads when one terminates~.\\


      ~Note~: <<a_api | val Lwt.npick >> leaves the local values of the current thread
      unchanged~.\\
>>
<<div id="VALprotected" class="code"|<<span class="keyword"|val>> protected : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|protected thread>> creates a new cancelable thread which behave
      as <<span class='code'|thread>> except that cancelling it does not cancel
      <<span class='code'|thread>>~.\\
>>
\\

======@@id="6_Pause"@@~Pause======
\\
<<div id="VALpause" class="code"|<<span class="keyword"|val>> pause : <<span class="code type"|unit -> unit <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|pause ~(~)>> is a sleeping thread which is wake up on the next
      call to <<a_api | val Lwt.wakeup_paused >>~. ~A thread created with <<span class='code'|pause>> can be
      canceled~.\\
>>
<<div id="VALwakeup_paused" class="code"|<<span class="keyword"|val>> wakeup~_paused : <<span class="code type"|unit -> unit>>>><<div class="info"|<<span class='code'|wakeup~_paused ~(~)>> wakes up all threads which suspended
      themselves with <<a_api | val Lwt.pause >>~.\\


      ~This function is called by the scheduler~, before entering the
      main loop~. ~You usually do not have to call it directly~, except
      if you are writing a custom scheduler~.\\


      ~Note that if a paused thread resume and pause again~, it will not
      be wakeup at this point~.\\
>>
<<div id="VALpaused_count" class="code"|<<span class="keyword"|val>> paused~_count : <<span class="code type"|unit -> int>>>><<div class="info"|<<span class='code'|paused~_count ~(~)>> returns the number of thread currently
      paused~.\\
>>
<<div id="VALregister_pause_notifier" class="code"|<<span class="keyword"|val>> register~_pause~_notifier : <<span class="code type"|(int -> unit) -> unit>>>><<div class="info"|<<span class='code'|register~_pause~_notifier f>> register a function <<span class='code'|f>> that will be
      called each time pause is called~. ~The parameter passed to <<span class='code'|f>> is
      the new number of threads paused~. ~It is usefull to be able to
      call <<a_api | val Lwt.wakeup_paused >> when there is no scheduler\\
>>
