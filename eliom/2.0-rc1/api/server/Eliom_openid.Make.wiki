=Functor <<a_api_type subproject="server" | module Eliom_openid.Make >> =
<<div class="code"|<<span class="keyword"|module>> Make: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~S>><<span class='code'| ~: >><<span class="code type"|<<a_api subproject="server" text="HiddenServiceInfo" | module Eliom_openid.HiddenServiceInfo >>>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_openid.Make >><<span class='code'|end>>>>>>~This functor build a hidden service that will be used
    to receive the remote server~'s data~. ~In return
    you get a check function\\
<<div class="module_param_list" | <<span class="param_title" |Parameters :>><<div|
|@@class="paramstable"@ @class="centertop fifteen code"@@{{{S}}}|@@class="centertop"@@:|<<span class="code type"|<<a_api subproject="server" text="HiddenServiceInfo" | module Eliom_openid.HiddenServiceInfo >>>>|
>>>>

----
<<div id="VALauthenticate" class="code"|<<span class="keyword"|val>> authenticate : <<span class="code type"|\\{{{   }}}mode:string ->\\{{{   }}}  ext:'a <<a_api subproject="server" text="Eliom_openid.extension" | type Eliom_openid.extension >> ->\\{{{   }}}  handler:('a <<a_api subproject="server" text="Eliom_openid.authentication_result" | type Eliom_openid.authentication_result >> ->\\{{{   }}}           (<<a_api subproject="server" text="Eliom_output.browser_content" | type Eliom_output.browser_content >>, <<a_api subproject="server" text="Eliom_output.http_service" | type Eliom_output.http_service >>)\\{{{   }}}           <<a_api subproject="server" text="Eliom_output.kind" | type Eliom_output.kind >> Lwt.t) ->\\{{{   }}}  discovery:string * string option -> XHTML.M.uri Lwt.t>>>>