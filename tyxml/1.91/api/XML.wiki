=Module <<a_api_type | module XML >> =
<<div class="code"|<<span class="keyword"|module>> XML: <<span class='code'|sig>><<a_api text=".." | module XML >><<span class='code'|end>>>>~Basic functions for construction and manipulation of ~X~M~L tree~.\\

----
<<div class="code" id="TYPEaname"|<<span class="keyword"|type>> aname = <<span class="code type"|string>> >>

<<div class="code" id="TYPEseparator"|<<span class="keyword"|type>> separator = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Space>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Comma>>|>>

<<div class="code" id="TYPEevent"|<<span class="keyword"|type>> event = <<span class="code type"|string>> >>

<<div class="code" id="TYPEattrib"|<<span class="keyword"|type>> attrib>>

<<div id="VALaname" class="code"|<<span class="keyword"|val>> aname : <<span class="code type"|<<a_api text="attrib" | type XML.attrib >> -> <<a_api text="aname" | type XML.aname >>>>>><<div class="code" id="TYPEacontent"|<<span class="keyword"|type>> acontent = private 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AFloat>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="aname" | type XML.aname >> * float>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AInt>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="aname" | type XML.aname >> * int>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AStr>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="aname" | type XML.aname >> * string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AStrL>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="separator" | type XML.separator >> * <<a_api text="aname" | type XML.aname >> * string list>>|>>

<<div id="VALacontent" class="code"|<<span class="keyword"|val>> acontent : <<span class="code type"|<<a_api text="attrib" | type XML.attrib >> -> <<a_api text="acontent" | type XML.acontent >>>>>><<div id="VALfloat_attrib" class="code"|<<span class="keyword"|val>> float~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> float -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALint_attrib" class="code"|<<span class="keyword"|val>> int~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> int -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALstring_attrib" class="code"|<<span class="keyword"|val>> string~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALspace_sep_attrib" class="code"|<<span class="keyword"|val>> space~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string list -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALcomma_sep_attrib" class="code"|<<span class="keyword"|val>> comma~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string list -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALevent_attrib" class="code"|<<span class="keyword"|val>> event~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> <<a_api text="event" | type XML.event >> -> <<a_api text="attrib" | type XML.attrib >>>>>><<div class="code" id="TYPEename"|<<span class="keyword"|type>> ename = <<span class="code type"|string>> >>

<<div class="code" id="TYPEelt"|<<span class="keyword"|type>> elt>>

<<div class="code" id="TYPEecontent"|<<span class="keyword"|type>> econtent = private 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Empty>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Comment>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|EncodedPCDATA>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|PCDATA>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Entity>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Leaf>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="ename" | type XML.ename >> * <<a_api text="attrib" | type XML.attrib >> list>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Node>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="ename" | type XML.ename >> * <<a_api text="attrib" | type XML.attrib >> list * <<a_api text="elt" | type XML.elt >> list>>|>>

<<div id="VALcontent" class="code"|<<span class="keyword"|val>> content : <<span class="code type"|<<a_api text="elt" | type XML.elt >> -> <<a_api text="econtent" | type XML.econtent >>>>>><<div id="VALempty" class="code"|<<span class="keyword"|val>> empty : <<span class="code type"|unit -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALcomment" class="code"|<<span class="keyword"|val>> comment : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALpcdata" class="code"|<<span class="keyword"|val>> pcdata : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALencodedpcdata" class="code"|<<span class="keyword"|val>> encodedpcdata : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALentity" class="code"|<<span class="keyword"|val>> entity : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~Neither <<span class='code'|comment>>~, <<span class='code'|pcdata>> nor <<span class='code'|entity>> check their argument for invalid
    characters~.  ~Unsafe characters will be escaped later by the output routines~.\\
>>
<<div id="VALleaf" class="code"|<<span class="keyword"|val>> leaf : <<span class="code type"|?a:<<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALnode" class="code"|<<span class="keyword"|val>> node : <<span class="code type"|?a:<<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="elt" | type XML.elt >> list -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~N~B~: <<span class='code'|~Leaf ~("foo"~, ~[~]~) ~-~> "~<foo ~/~>">>~, but <<span class='code'|~Node ~("foo"~, ~[~]~, ~[~]~) ~-~> "~<foo~>~<~/foo~>">>\\
>>
<<div id="VALcdata" class="code"|<<span class="keyword"|val>> cdata : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALcdata_script" class="code"|<<span class="keyword"|val>> cdata~_script : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALcdata_style" class="code"|<<span class="keyword"|val>> cdata~_style : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>>\\

==@@id="2_Iterators"@@~Iterators==
\\
<<div id="VALamap" class="code"|<<span class="keyword"|val>> amap : <<span class="code type"|(<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list) -> <<a_api text="elt" | type XML.elt >> -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~Recursively edit attributes for the element and all its children~.\\
>>
<<div id="VALamap1" class="code"|<<span class="keyword"|val>> amap~1 : <<span class="code type"|(<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list) -> <<a_api text="elt" | type XML.elt >> -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~Edit attributes only for one element~.\\
>>
\\
~The following can safely be exported by higher level libraries~,
    because removing an attribute from a element is always legal~.\\
<<div id="VALrm_attrib" class="code"|<<span class="keyword"|val>> rm~_attrib : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALrm_attrib_from_list" class="code"|<<span class="keyword"|val>> rm~_attrib~_from~_list : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> (string -> bool) -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALmap_int_attrib" class="code"|<<span class="keyword"|val>> map~_int~_attrib : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> (int -> int) -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALmap_string_attrib" class="code"|<<span class="keyword"|val>> map~_string~_attrib : <<span class="code type"|\\{{{   }}}(<<a_api text="aname" | type XML.aname >> -> bool) ->\\{{{   }}}  (string -> string) -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALmap_string_attrib_in_list" class="code"|<<span class="keyword"|val>> map~_string~_attrib~_in~_list : <<span class="code type"|\\{{{   }}}(<<a_api text="aname" | type XML.aname >> -> bool) ->\\{{{   }}}  (string -> string) -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>>\\
~Exporting the following by higher level libraries would drive
    a hole through a type system~, because they allow to add //any//
    attribute to //any// element~.\\
<<div id="VALadd_int_attrib" class="code"|<<span class="keyword"|val>> add~_int~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> int -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALadd_string_attrib" class="code"|<<span class="keyword"|val>> add~_string~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALadd_comma_sep_attrib" class="code"|<<span class="keyword"|val>> add~_comma~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALadd_space_sep_attrib" class="code"|<<span class="keyword"|val>> add~_space~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="attrib" | type XML.attrib >> list>>>><<div id="VALfold" class="code"|<<span class="keyword"|val>> fold : <<span class="code type"|\\{{{   }}}(unit -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> 'a) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> 'a list -> 'a) -> <<a_api text="elt" | type XML.elt >> -> 'a>>>><<div id="VALall_entities" class="code"|<<span class="keyword"|val>> all~_entities : <<span class="code type"|<<a_api text="elt" | type XML.elt >> -> string list>>>><<div id="VALtranslate" class="code"|<<span class="keyword"|val>> translate : <<span class="code type"|\\{{{   }}}(<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >>) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >> list -> <<a_api text="elt" | type XML.elt >>) ->\\{{{   }}}  ('a -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >> list) ->\\{{{   }}}  ('a -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >> list -> <<a_api text="elt" | type XML.elt >> list) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> 'a -> 'a) -> 'a -> <<a_api text="elt" | type XML.elt >> -> <<a_api text="elt" | type XML.elt >>>>>>\\

==@@id="2_Printer"@@~Printer==
\\
<<div id="VALprint_list" class="code"|<<span class="keyword"|val>> print~_list : <<span class="code type"|output:(string -> unit) -> ?encode:(string -> string) -> <<a_api text="elt" | type XML.elt >> list -> unit>>>>\\

==@@id="2_"@@~.~.~.==
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api text="M" | module XML.M >>: <<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>><<span class="code type"|{{{  }}}>>>>