=Module <<a_api_type subproject="server" | module Eliom_references >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_references: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_references >><<span class='code'|end>>>>
==@@id="2_ServersidestatedataEliomreferences"@@~Server side state data~: ~Eliom references==
\\

----
\\
//~Warning~: ~Eliom references of scope <<span class='code'|`~Global>> or <<span class='code'|`~Request>> may be created
    and accessed at any time~.
    ~For other scopes~, they must be created or accessed when the site
    information is available to ~Eliom~, that is~, either during the initialization
    phase of the server ~(while reading the configuration file~) or during
    a request~. ~Otherwise~, it will raise the exception
    <<a_api subproject="server" | exception Eliom_common.Eliom_site_information_not_available >>~.
    ~If you are using static linking~, you must delay the call to this function
    until the configuration file is read~, using
    <<a_api subproject="server" | val Eliom_services.register_eliom_module >>~. ~Otherwise you will also get 
    this exception~.//\\
<<div class="code" id="TYPEeref"|<<span class="keyword"|type>> <<span class="code type"|'a>> eref>>
<<div class="info"|~The type of ~Eliom references~.\\
>>

<<div id="VALeref" class="code"|<<span class="keyword"|val>> eref : <<span class="code type"|\\{{{   }}}?state_name:string ->\\{{{   }}}  ?scope:[ `Client_process | `Global | `Request | `Session | `Session_group ] ->\\{{{   }}}  ?secure:bool -> ?persistent:string -> 'a -> 'a <<a_api subproject="server" text="eref" | type Eliom_references.eref >>>>>><<div class="info"|~Create an ~Eliom reference for the given scope ~(default~: <<span class='code'|`~Global>>~)~.\\


    ~Use the optional parameter <<span class='code'|~?persistent>> if you want the data to survive
    after relaunching the server~. ~You must give an unique name to the
    table in which it will be stored on the hard disk ~(using ~Ocsipersist~)~.
    ~Be very careful to use unique names~, and to change the name if
    you change the type of the data~, otherwise the server may crash
    ~(unsafe unmarshaling~)~.
    ~This parameter has no effect for scope <<span class='code'|`~Request>>~.\\


    ~Use the optional parameter <<span class='code'|~?secure>> if you want the data to be available
    only using ~H~T~T~P~S ~(default~: false~)~. ~It has no effect for scopes <<span class='code'|`~Global>>
    and <<span class='code'|`~Request>>~.\\


    ~Use the optional parameter <<span class='code'|~?state~_name>> if you want to distinguish
    between several server side states for the same scope~.
    ~It has no effect for scopes <<span class='code'|`~Global>> and <<span class='code'|`~Request>>~.\\
>>
<<div id="VALget" class="code"|<<span class="keyword"|val>> get : <<span class="code type"|'a <<a_api subproject="server" text="eref" | type Eliom_references.eref >> -> 'a Lwt.t>>>><<div class="info"|~Get the value of an ~Eliom reference~.\\
>>
<<div id="VALset" class="code"|<<span class="keyword"|val>> set : <<span class="code type"|'a <<a_api subproject="server" text="eref" | type Eliom_references.eref >> -> 'a -> unit Lwt.t>>>><<div class="info"|~Change the value of an ~Eliom reference~.\\
>>
<<div id="VALunset" class="code"|<<span class="keyword"|val>> unset : <<span class="code type"|'a <<a_api subproject="server" text="eref" | type Eliom_references.eref >> -> unit Lwt.t>>>><<div class="info"|~Turn back to the default value 
    ~(by removing the entry in the server side table in the case where
    they are stored in a table~)~.\\
>>
