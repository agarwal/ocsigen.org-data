<<code language="ocaml" | sig
  type 'a p =
    'a ReactiveData.RList.p =
      I of int * 'a
    | R of int
    | U of int * 'a
    | X of int * int
  type 'a data = 'a list
  type 'a patch = 'a p list
  type 'a msg =
    'a ReactiveData.RList.msg =
      Patch of 'a patch
    | Set of 'a data
  type 'a handle = 'a ReactiveData.RList.handle
  type 'a t = 'a ReactiveData.RList.t
  val empty : 'a t
  val make : 'a data -> 'a t * 'a handle
  val make_from : 'a data -> 'a msg React.E.t -> 'a t
  val make_from_s : 'a data React.S.t -> 'a t
  val const : 'a data -> 'a t
  val patch : 'a handle -> 'a patch -> unit
  val set : 'a handle -> 'a data -> unit
  val map_msg : ('a -> 'b) -> 'a msg -> 'b msg
  val map : ('a -> 'b) -> 'a t -> 'b t
  val value : 'a t -> 'a data
  val fold : ('a -> 'b msg -> 'a) -> 'b t -> 'a -> 'a React.signal
  val value_s : 'a t -> 'a data React.S.t
  val event : 'a t -> 'a msg React.E.t
  val nil : 'a t
  val append : 'a -> 'a handle -> unit
  val cons : 'a -> 'a handle -> unit
  val insert : 'a -> int -> 'a handle -> unit
  val remove : int -> 'a handle -> unit
  val update : 'a -> int -> 'a handle -> unit
  val move : int -> int -> 'a handle -> unit
  val singleton : 'a -> 'a t
  val singleton_s : 'a React.S.t -> 'a t
  val concat : 'a t -> 'a t -> 'a t
  val rev : 'a t -> 'a t
  val sort : ('a -> 'a -> int) -> 'a t -> [ `Not_implemented ]
  val filter : ('a -> unit) -> 'a t -> [ `Not_implemented ]
  val from_signal :
    'a ReactiveData.RList.data React.signal -> 'a ReactiveData.RList.t
  module Lwt :
    sig
      val map_data_p_lwt : ('a -> 'b Lwt.t) -> 'a list -> 'b list Lwt.t
      val map_patch_p_lwt :
        ('a -> 'b Lwt.t) ->
        'a ReactiveData.RList.p list -> 'b ReactiveData.RList.p list Lwt.t
      val map_msg_p_lwt :
        ('a -> 'b Lwt.t) ->
        'a ReactiveData.RList.msg -> 'b ReactiveData.RList.msg Lwt.t
      val map_p_aux :
        ('a * 'b ReactiveData.RList.handle) Lwt.t ->
        ('c -> 'b Lwt.t) -> 'c ReactiveData.RList.t -> unit React.event
      val map_p_init :
        init:'b ReactiveData.RList.data -> ('a -> 'b Lwt.t) -> 'a t -> 'b t
      val map_p : ('a -> 'b Lwt.t) -> 'a t -> 'b t Lwt.t
    end
end >>