=Module <<a_api_type | module Lwt_sequence >> =
<<div class="code"|<<span class="keyword"|module>> Lwt_sequence: <<span class='code'|sig>><<a_api text=".." | module Lwt_sequence >><<span class='code'|end>>>>~Mutable sequence of elements\\

----
\\
~A sequence is an object holding a list of elements which support
    the following operations~:\\

* adding an element to the left or the right in time and space ~O~(~1~)
* taking an element from the left or the right in time and space ~O~(~1~)
* removing a previously added element from a sequence in time and space ~O~(~1~)
* removing an element while the sequence is being transversed~.

\\
<<div class="code" id="TYPEt"|<<span class="keyword"|type>> <<span class="code type"|'a>> t>>
<<div class="info"|~Type of a sequence holding values of type <<span class='code'|~'a>>\\
>>

<<div class="code" id="TYPEnode"|<<span class="keyword"|type>> <<span class="code type"|'a>> node>>
<<div class="info"|~Type of a node holding one value of type <<span class='code'|~'a>> in a sequence\\
>>

\\

======@@id="6_Operationonnodes"@@~Operation on nodes======
\\
<<div id="VALget" class="code"|<<span class="keyword"|val>> get : <<span class="code type"|'a <<a_api text="node" | type Lwt_sequence.node >> -> 'a>>>><<div class="info"|~Returns the contents of a node\\
>>
<<div id="VALset" class="code"|<<span class="keyword"|val>> set : <<span class="code type"|'a <<a_api text="node" | type Lwt_sequence.node >> -> 'a -> unit>>>><<div class="info"|~Change the contents of a node\\
>>
<<div id="VALremove" class="code"|<<span class="keyword"|val>> remove : <<span class="code type"|'a <<a_api text="node" | type Lwt_sequence.node >> -> unit>>>><<div class="info"|~Removes a node from the sequence it is part of~. ~It does nothing
      if the node has already been removed~.\\
>>
\\

======@@id="6_Operationsonsequence"@@~Operations on sequence======
\\
<<div id="VALcreate" class="code"|<<span class="keyword"|val>> create : <<span class="code type"|unit -> 'a <<a_api text="t" | type Lwt_sequence.t >>>>>><<div class="info"|<<span class='code'|create ~(~)>> creates a new empty sequence\\
>>
<<div id="VALis_empty" class="code"|<<span class="keyword"|val>> is~_empty : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> bool>>>><<div class="info"|~Returns <<span class='code'|true>> iff the given sequence is empty\\
>>
<<div id="VALadd_l" class="code"|<<span class="keyword"|val>> add~_l : <<span class="code type"|'a -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a <<a_api text="node" | type Lwt_sequence.node >>>>>><<div class="info"|<<span class='code'|add~_l x s>> adds <<span class='code'|x>> to the left of the sequence <<span class='code'|s>>\\
>>
<<div id="VALadd_r" class="code"|<<span class="keyword"|val>> add~_r : <<span class="code type"|'a -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a <<a_api text="node" | type Lwt_sequence.node >>>>>><<div class="info"|<<span class='code'|add~_l x s>> adds <<span class='code'|x>> to the right of the sequence <<span class='code'|s>>\\
>>
<<div  id="EXCEPTIONEmpty" class="code"|<<span class="keyword"|exception>> Empty>>
<<div class="info"|~Exception raised by <<span class='code'|take~_l>> and <<span class='code'|tale~_s>> and when the sequence
      is empty\\
>>
<<div id="VALtake_l" class="code"|<<span class="keyword"|val>> take~_l : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a>>>><<div class="info"|<<span class='code'|take~_l x s>> remove and returns the leftmost element of <<span class='code'|s>>\\
**Raises** {{{Empty}}} if the sequence is empty\\
>>
<<div id="VALtake_r" class="code"|<<span class="keyword"|val>> take~_r : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a>>>><<div class="info"|<<span class='code'|take~_l x s>> remove and returns the rightmost element of <<span class='code'|s>>\\
**Raises** {{{Empty}}} if the sequence is empty\\
>>
<<div id="VALtake_opt_l" class="code"|<<span class="keyword"|val>> take~_opt~_l : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a option>>>><<div class="info"|<<span class='code'|take~_opt~_l x s>> remove and returns <<span class='code'|~Some x>> where <<span class='code'|x>> is the
      leftmost element of <<span class='code'|s>> or <<span class='code'|~None>> if <<span class='code'|s>> is empty\\
>>
<<div id="VALtake_opt_r" class="code"|<<span class="keyword"|val>> take~_opt~_r : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a option>>>><<div class="info"|<<span class='code'|take~_opt~_l x s>> remove and returns <<span class='code'|~Some x>> where <<span class='code'|x>> is the
      rightmost element of <<span class='code'|s>> or <<span class='code'|~None>> if <<span class='code'|s>> is empty\\
>>
<<div id="VALtransfer_l" class="code"|<<span class="keyword"|val>> transfer~_l : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> unit>>>><<div class="info"|<<span class='code'|transfer~_l s~1 s~2>> removes all elements of <<span class='code'|s~1>> and add them at
      the left of <<span class='code'|s~2>>~. ~This operation runs in constant time and
      space~.\\
>>
<<div id="VALtransfer_r" class="code"|<<span class="keyword"|val>> transfer~_r : <<span class="code type"|'a <<a_api text="t" | type Lwt_sequence.t >> -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> unit>>>><<div class="info"|<<span class='code'|transfer~_r s~1 s~2>> removes all elements of <<span class='code'|s~1>> and add them at
      the right of <<span class='code'|s~2>>~. ~This operation runs in constant time and
      space~.\\
>>
\\

======@@id="6_Sequenceiterators"@@~Sequence iterators======
\\
\\
~Note~: it is ~O~K to remove a node while traversing a sequence\\
<<div id="VALiter_l" class="code"|<<span class="keyword"|val>> iter~_l : <<span class="code type"|('a -> unit) -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> unit>>>><<div class="info"|<<span class='code'|iter~_l f s>> applies <<span class='code'|f>> on all elements of <<span class='code'|s>> starting from
      the left\\
>>
<<div id="VALiter_r" class="code"|<<span class="keyword"|val>> iter~_r : <<span class="code type"|('a -> unit) -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> unit>>>><<div class="info"|<<span class='code'|iter~_l f s>> applies <<span class='code'|f>> on all elements of <<span class='code'|s>> starting from
      the right\\
>>
<<div id="VALiter_node_l" class="code"|<<span class="keyword"|val>> iter~_node~_l : <<span class="code type"|('a <<a_api text="node" | type Lwt_sequence.node >> -> unit) -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> unit>>>><<div class="info"|<<span class='code'|iter~_l f s>> applies <<span class='code'|f>> on all nodes of <<span class='code'|s>> starting from
      the left\\
>>
<<div id="VALiter_node_r" class="code"|<<span class="keyword"|val>> iter~_node~_r : <<span class="code type"|('a <<a_api text="node" | type Lwt_sequence.node >> -> unit) -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> unit>>>><<div class="info"|<<span class='code'|iter~_l f s>> applies <<span class='code'|f>> on all nodes of <<span class='code'|s>> starting from
      the right\\
>>
<<div id="VALfold_l" class="code"|<<span class="keyword"|val>> fold~_l : <<span class="code type"|('a -> 'b -> 'b) -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> 'b -> 'b>>>><<div class="info"|<<span class='code'|fold~_l f s>> is~:
      
{{{
        fold_l f s x = f en (... (f e2 (f e1 x)))
      
}}}

      where <<span class='code'|e~1>>~, <<span class='code'|e~2>>~, ~.~.~.~, <<span class='code'|en>> are the elements of <<span class='code'|s>>\\
>>
<<div id="VALfold_r" class="code"|<<span class="keyword"|val>> fold~_r : <<span class="code type"|('a -> 'b -> 'b) -> 'a <<a_api text="t" | type Lwt_sequence.t >> -> 'b -> 'b>>>><<div class="info"|<<span class='code'|fold~_r f s>> is~:
      
{{{
        fold_r f s x = f e1 (f e2 (... (f en x)))
      
}}}

      where <<span class='code'|e~1>>~, <<span class='code'|e~2>>~, ~.~.~.~, <<span class='code'|en>> are the elements of <<span class='code'|s>>\\
>>
