=Module <<a_api_type subproject="server" | module Eliom_pervasives.XML.M >> =
<<div class="code"|<<span class="keyword"|module>> M: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_pervasives.XML.M >><<span class='code'|end>>>>
----
<<div class="code" id="TYPEaname"|<<span class="keyword"|type>> aname = <<span class="code type"|string>> >>

<<div class="code" id="TYPEseparator"|<<span class="keyword"|type>> separator = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Space>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Comma>>|>>

<<div class="code" id="TYPEevent"|<<span class="keyword"|type>> event = <<span class="code type"|string>> >>

<<div class="code" id="TYPEattrib"|<<span class="keyword"|type>> attrib>>

<<div class="code" id="TYPEacontent"|<<span class="keyword"|type>> acontent = private 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AFloat>> <<span class="keyword"|of>> <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> * float>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AInt>> <<span class="keyword"|of>> <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> * int>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AStr>> <<span class="keyword"|of>> <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> * string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|AStrL>> <<span class="keyword"|of>> <<span class="code type"|<<a_api subproject="server" text="separator" | type Eliom_pervasives.XML.M.separator >> * <<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> * string list>>|>>

<<div id="VALacontent" class="code"|<<span class="keyword"|val>> acontent : <<span class="code type"|<<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> -> <<a_api subproject="server" text="acontent" | type Eliom_pervasives.XML.M.acontent >>>>>><<div id="VALaname" class="code"|<<span class="keyword"|val>> aname : <<span class="code type"|<<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> -> <<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >>>>>><<div id="VALfloat_attrib" class="code"|<<span class="keyword"|val>> float~_attrib : <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> -> float -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >>>>>><<div id="VALint_attrib" class="code"|<<span class="keyword"|val>> int~_attrib : <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> -> int -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >>>>>><<div id="VALstring_attrib" class="code"|<<span class="keyword"|val>> string~_attrib : <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> -> string -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >>>>>><<div id="VALspace_sep_attrib" class="code"|<<span class="keyword"|val>> space~_sep~_attrib : <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> -> string list -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >>>>>><<div id="VALcomma_sep_attrib" class="code"|<<span class="keyword"|val>> comma~_sep~_attrib : <<span class="code type"|<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> -> string list -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >>>>>><<div id="VALevent_attrib" class="code"|<<span class="keyword"|val>> event~_attrib : <<span class="code type"|\\{{{   }}}<<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >> ->\\{{{   }}}  <<a_api subproject="server" text="event" | type Eliom_pervasives.XML.M.event >> -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >>>>>><<div id="VALattrib_name" class="code"|<<span class="keyword"|val>> attrib~_name : <<span class="code type"|<<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> -> <<a_api subproject="server" text="aname" | type Eliom_pervasives.XML.M.aname >>>>>><<div id="VALattrib_value_to_string" class="code"|<<span class="keyword"|val>> attrib~_value~_to~_string : <<span class="code type"|(string -> string) -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> -> string>>>><<div id="VALattrib_to_string" class="code"|<<span class="keyword"|val>> attrib~_to~_string : <<span class="code type"|(string -> string) -> <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> -> string>>>><<div class="code" id="TYPEename"|<<span class="keyword"|type>> ename = <<span class="code type"|string>> >>

<<div class="code" id="TYPEecontent"|<<span class="keyword"|type>> econtent = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Empty>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Comment>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|EncodedPCDATA>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|PCDATA>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Entity>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Leaf>> <<span class="keyword"|of>> <<span class="code type"|<<a_api subproject="server" text="ename" | type Eliom_pervasives.XML.M.ename >> * <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> list>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Node>> <<span class="keyword"|of>> <<span class="code type"|\\{{{   }}}<<a_api subproject="server" text="ename" | type Eliom_pervasives.XML.M.ename >> * <<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> list\\{{{   }}}   * <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >> list>>|>>

<<div class="code" id="TYPEelt"|<<span class="keyword"|type>> elt = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@<<span class="keyword"|mutable >>ref : <<span class="code type"|int>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@elt : <<span class="code type"|<<a_api subproject="server" text="econtent" | type Eliom_pervasives.XML.M.econtent >>>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@elt_mark : <<span class="code type"|Obj.t>>;|

}
>>

<<div id="VALcontent" class="code"|<<span class="keyword"|val>> content : <<span class="code type"|<<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >> -> <<a_api subproject="server" text="econtent" | type Eliom_pervasives.XML.M.econtent >>>>>><<div id="VALmake_mark" class="code"|<<span class="keyword"|val>> make~_mark : <<span class="code type"|(unit -> Obj.t) Pervasives.ref>>>><<div id="VALmake_node" class="code"|<<span class="keyword"|val>> make~_node : <<span class="code type"|<<a_api subproject="server" text="econtent" | type Eliom_pervasives.XML.M.econtent >> -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALempty" class="code"|<<span class="keyword"|val>> empty : <<span class="code type"|unit -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALcomment" class="code"|<<span class="keyword"|val>> comment : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALpcdata" class="code"|<<span class="keyword"|val>> pcdata : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALencodedpcdata" class="code"|<<span class="keyword"|val>> encodedpcdata : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALentity" class="code"|<<span class="keyword"|val>> entity : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div class="info"|~Neither <<span class='code'|comment>>~, <<span class='code'|pcdata>> nor <<span class='code'|entity>> check their argument for invalid
    characters~.  ~Unsafe characters will be escaped later by the output routines~.\\
>>
<<div id="VALleaf" class="code"|<<span class="keyword"|val>> leaf : <<span class="code type"|\\{{{   }}}?a:<<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> list ->\\{{{   }}}  <<a_api subproject="server" text="ename" | type Eliom_pervasives.XML.M.ename >> -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALnode" class="code"|<<span class="keyword"|val>> node : <<span class="code type"|\\{{{   }}}?a:<<a_api subproject="server" text="attrib" | type Eliom_pervasives.XML.M.attrib >> list ->\\{{{   }}}  <<a_api subproject="server" text="ename" | type Eliom_pervasives.XML.M.ename >> ->\\{{{   }}}  <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >> list -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div class="info"|~N~B~: <<span class='code'|~Leaf ~("foo"~, ~[~]~) ~-~> "~<foo ~/~>">>~, but <<span class='code'|~Node ~("foo"~, ~[~]~, ~[~]~) ~-~> "~<foo~>~<~/foo~>">>\\
>>
<<div id="VALcdata" class="code"|<<span class="keyword"|val>> cdata : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALcdata_script" class="code"|<<span class="keyword"|val>> cdata~_script : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div id="VALcdata_style" class="code"|<<span class="keyword"|val>> cdata~_style : <<span class="code type"|string -> <<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >>>>>><<div class="code" id="TYPEref_tree"|<<span class="keyword"|type>> ref~_tree = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ref_tree>> <<span class="keyword"|of>> <<span class="code type"|int option * (int * <<a_api subproject="server" text="ref_tree" | type Eliom_pervasives.XML.M.ref_tree >>) list>>|>>

<<div id="VALref_node" class="code"|<<span class="keyword"|val>> ref~_node : <<span class="code type"|<<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >> -> int>>>><<div id="VALnext_ref" class="code"|<<span class="keyword"|val>> next~_ref : <<span class="code type"|unit -> int>>>><<div class="info"|use with care!\\
>>
<<div id="VALmake_ref_tree" class="code"|<<span class="keyword"|val>> make~_ref~_tree : <<span class="code type"|<<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >> -> <<a_api subproject="server" text="ref_tree" | type Eliom_pervasives.XML.M.ref_tree >>>>>><<div id="VALmake_ref_tree_list" class="code"|<<span class="keyword"|val>> make~_ref~_tree~_list : <<span class="code type"|\\{{{   }}}<<a_api subproject="server" text="elt" | type Eliom_pervasives.XML.M.elt >> list ->\\{{{   }}}  (int * <<a_api subproject="server" text="ref_tree" | type Eliom_pervasives.XML.M.ref_tree >>) list>>>><<div id="VALclass_name" class="code"|<<span class="keyword"|val>> class~_name : <<span class="code type"|string>>>>