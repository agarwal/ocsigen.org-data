= TyXML =

Tyxml is a library to build statically correct Html5 and Svg documents.

<<code language="ocaml"|
let to_ocaml = Html5.(a ~a:[a_href "ocaml.org"] [pcdata "OCaml!"])
>>

==@@id="usage"@@ Using TyXML ==

=== Standalone Use ===

To use TyXML in standalone manner, simply link the ##tyxml## ocamlfind package
and use the <<a_api|module Html5>> and <<a_api|module Svg>> modules.

=== Use with another library ===

TyXML combinators can be used in conjunction to another library, please consult the relevent document. For example, for
<<a_manual project="eliom" chapter="clientserver-html"|Eliom>>
and
<<a_api project="js_of_ocaml" text="Js_of_ocaml"|module Tyxml_js>>.

==@@id="creation"@@ Creating documents with TyXML ==

This section assumes you have at your disposal an {{{Html5}}} or {{{Svg}}} module, as instructed in <<a_manual fragment="usage"|the previous section>>.
For standalone use, examples are available in the [[https://github.com/ocsigen/tyxml/tree/master/examples|examples]] directory.

The documentation for TyXML combinators is provided in <<a_api|modtype Html5_sigs.T>> and <<a_api|module Svg_sigs.T>> and is common to all instances of {{{Html5}}} and {{{Svg}}}.

A first thing to understand about TyXML is that for most intent and purposes, it is exactly like Html. As such, the [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element|Html reference]] is still very useful. For each Html elements or attributes, there is a combinator implemeting it. The main differences are that you can use OCaml to manipulate the elements and that invalid Html produces a type error.

In this tutorial, we will build the [[https://github.com/ocsigen/tyxml/tree/master/examples/mini_website|Mini website]].

Let us start by building the content of our website. For text, we use the {{{pcdata}}} constructor. In traditional Web fashion, we put everything in a ##div##.
<<code language="ocaml"|
let mycontent =
  div [
    pcdata "This is a fabulous content." ;
  ]
>>

##mycontent## is of type {{{[> `Div] Html5.elt}}}.
As we can see, the fact that this is a ##div## is reflected in the type. Html elements are of type <<a_api text="elt"|type Html5_sigs.T.elt>> and have a combinator of the same name, except when it's a reserved keyword (such as {{{object_}}}).

Our content is fabulous, but for the sake of CSS styling (and still in true Web fashion) we want to add a ##class## to it.
<<code language="ocaml"|
let mycontent =
  div ~a:[a_class ["content"]] [
    pcdata "This is a fabulous content." ;
  ]
>>

The <<a_api text="a_class"|val Html5_sigs.T.a_class>> creates a new ##class## attribute of type {{{[> `Class] attrib}}}. Similarly to elements, the kind of attribute is reflect in the <<a_api text="attrib"|type Html5_sigs.T.attrib>> type.
We use the optional argument {{{~a}}} to pass the list of attributes. This optional argument is available on all element combinators.

In order to add a title to our fabulous content, we use the <<a_api text="h1"|val Html5_sigs.T.a>> combinator.
<<code language="ocaml"|
let mycontent =
  div ~a:[a_class ["content"]] [
    h1 [pcdata "A fabulous title"] ;
    pcdata "This is a fabulous content." ;
  ]
>>

Naturally, {{{div}}} accepts several children. In TyXML vocabulary, this is a <<a_api text="star"|val Html5_sigs.T.star>> constructor.
There are also
<<a_api text="unary"|val Html5_sigs.T.unary>> and
<<a_api text="nullary"|val Html5_sigs.T.nullary>> constructors,
which accepts respectively one and zero child.

An element of {{{unary}}} constructor is the
<<a_api text="title"|val Html5_sigs.T.title>> combinator.
<<code language="ocaml"|
let mytitle = title (pcdata "A Fabulous Web Page")
>>

====@@id="type-errors"@@ Interlude about type errors ====

However, what would happen if we were to try to put **bold** text in our title? This is not compliant! Let's try it.
<<code language="ocaml"|
let mytitle = title (b [pcdata "A Bold Web Page"])
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This expression has type ([> Html5_types.b ] as 'a) elt
       but an expression was expected of type
         ([< Html5_types.title_content_fun ] as 'b) elt = 'b elt
       Type 'a = [> `B ] is not compatible with type 'b = [< `PCDATA ]
       The second variant type does not allow tag(s) `B
>>

As expected, this code does not typecheck!
The typechecker is unfortunately a bit unclear about the source of the error.

It tells us that the given expression has type {{{[> b] elt}}}
(indeed, it is produced by a {{{b}}} constructor)
but an expression is expected of type {{{[< title_content_fun] elt}}}
(which means that is is used as content for a {{{title}}} element).
It then tells us that, since {{{[> b] = [> `B]}}} and
{{{[< title_content_fun] = [< `PCDATA ]}}},
{{{`B}}} is not allowed inside a {{{title}}}.

In order to get reasonable type errors with TyXML, The ##-short-paths## options should always be used.

====@@id="finishing"@@ Finishing up the webpage ====

To finish our webpage, we use the <<a_api text="body"|val Html5_sigs.T.body>>, <<a_api text="head"|val Html5_sigs.T.head>> and <<a_api text="html"|val Html5_sigs.T.html>>.
The last two combinators have special types due to their specific constraints: <<a_api text="head"|val Html5_sigs.T.head>> only accepts one ##title## children and <<a_api text="html"|val Html5_sigs.T.html>> only accepts two children, ##head## and ##body##.

<<code language="ocaml"|
let mypage =
  html
    (head mytitle [])
    (body [mycontent])
>>

If you are using <<a_manual project="eliom" chapter="clientserver-html"|Eliom>>
or <<a_api project="js_of_ocaml" text="Js_of_ocaml"|module Tyxml_js>>,
this is the end of TyXML's territory. However, for standalone use, we now need to print our document into an Html file. The standalone implementation comes with a printer, <<a_api|val Html5.pp>>, that we can use to print files:

<<code language="ocaml"|
let () =
  let file = open_out "index.html" in
  let fmt = Format.formatter_of_out_channel file in
  pp () fmt mypage;
  close_out file
>>

Well done, you know have a very minimal (but fabulous) website! The implementation can be found [[https://github.com/ocsigen/tyxml/tree/master/examples/mini_website|here]].

Other examples are available in the [[https://github.com/ocsigen/tyxml/tree/master/examples/|examples]] directory.

==@@id="custom"@@ Using your own underlying implementation ==

You can use TyXML with any underlying implementation. In order to do so, we provide a set of functors.
Please consult <<a_manual chapter="functors"|the relevant manual>>.
