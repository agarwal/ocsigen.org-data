=Module <<a_api_type | module Lwt_text >> =
<<div class="code"|<<span class="keyword"|module>> Lwt_text: <<span class='code'|sig>><<a_api text=".." | module Lwt_text >><<span class='code'|end>>>>~Text channels\\

----
\\
~This modules implements **text channel**s~. ~A **text channel** is
    basically a **byte channel** ~(as in <<a_api | module Lwt_io >>~) plus a **character
    encoding**~.\\


    ~It has almost the same interface as <<a_api | module Lwt_io >> except that it
    uses <<span class='code'|~Text~.t>> in place of <<span class='code'|string>> and <<span class='code'|char>>\\
\\

======@@id="6_Types"@@~Types======
\\
<<div class="code" id="TYPEchannel"|<<span class="keyword"|type>> <<span class="code type"|'a>> channel>>
<<div class="info"|~Type of a text channel\\
>>

<<div class="code" id="TYPEinput_channel"|<<span class="keyword"|type>> input~_channel = <<span class="code type"|<<a_api text="Lwt_io.input" | type Lwt_io.input >> <<a_api text="channel" | type Lwt_text.channel >>>> >>
<<div class="info"|~Type of a text input channel\\
>>

<<div class="code" id="TYPEoutput_channel"|<<span class="keyword"|type>> output~_channel = <<span class="code type"|<<a_api text="Lwt_io.output" | type Lwt_io.output >> <<a_api text="channel" | type Lwt_text.channel >>>> >>
<<div class="info"|~Type of a text output channel\\
>>

\\

======@@id="6_Creationmanipulation"@@~Creation~/manipulation======
\\
<<div id="VALmake" class="code"|<<span class="keyword"|val>> make : <<span class="code type"|\\{{{   }}}?strict:bool ->\\{{{   }}}  ?encoding:Encoding.t -> 'a <<a_api text="Lwt_io.channel" | type Lwt_io.channel >> -> 'a <<a_api text="channel" | type Lwt_text.channel >>>>>><<div class="info"|<<span class='code'|make ~?strict ~?encoding ch>> creates a text channel from a byte
      channel~.\\
>>
<<div class="param_info"|<<span class="code code"|strict>> : tell whether encoding~/decoding must be ``strict~'~'~,
      which whether the encoder~/decoder should fail on invalid
      sequence~. ~In non~-strict mode~, it transparently fallback to
      ~I~S~O~-~8~8~5~9~-~1~5~. ~By the way it is ensured that <<span class='code'|read~*>> functions
      always returns valid ~U~T~F~-~8 encoded text~. <<span class='code'|strict>> defaults to
      <<span class='code'|false>>~.>>
<<div class="param_info"|<<span class="code code"|encoding>> : is the character encoding used for the
      channel~. ~It defaults to <<span class='code'|~Encoding~.system>>~.>>
<<div id="VALbyte_channel" class="code"|<<span class="keyword"|val>> byte~_channel : <<span class="code type"|'a <<a_api text="channel" | type Lwt_text.channel >> -> 'a <<a_api text="Lwt_io.channel" | type Lwt_io.channel >>>>>><<div class="info"|<<span class='code'|byte~_channel ch>> returns the underlying byte channel of a text
      channel\\
>>
<<div id="VALencoding" class="code"|<<span class="keyword"|val>> encoding : <<span class="code type"|'a <<a_api text="channel" | type Lwt_text.channel >> -> Encoding.t>>>><<div class="info"|<<span class='code'|encoding ch>> returns the character encoding of a channel~.\\
>>
<<div id="VALflush" class="code"|<<span class="keyword"|val>> flush : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="info"|~Flush the underlying byte channel\\
>>
<<div id="VALclose" class="code"|<<span class="keyword"|val>> close : <<span class="code type"|'a <<a_api text="channel" | type Lwt_text.channel >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div class="info"|~Close the underlying byte channel\\
>>
\\

======@@id="6_Lwtiolikevalues"@@~Lwt~_io like values======
\\
<<div id="VALatomic" class="code"|<<span class="keyword"|val>> atomic : <<span class="code type"|('a <<a_api text="channel" | type Lwt_text.channel >> -> 'b <<a_api text="Lwt.t" | type Lwt.t >>) -> 'a <<a_api text="channel" | type Lwt_text.channel >> -> 'b <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALstdin" class="code"|<<span class="keyword"|val>> stdin : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >>>>>><<div id="VALstdout" class="code"|<<span class="keyword"|val>> stdout : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >>>>>><<div id="VALstderr" class="code"|<<span class="keyword"|val>> stderr : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >>>>>><<div id="VALzero" class="code"|<<span class="keyword"|val>> zero : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >>>>>><<div id="VALnull" class="code"|<<span class="keyword"|val>> null : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >>>>>><<div id="VALread_char" class="code"|<<span class="keyword"|val>> read~_char : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALread_char_opt" class="code"|<<span class="keyword"|val>> read~_char~_opt : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t option <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALread_chars" class="code"|<<span class="keyword"|val>> read~_chars : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >>>>>><<div id="VALread_line" class="code"|<<span class="keyword"|val>> read~_line : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALread_line_opt" class="code"|<<span class="keyword"|val>> read~_line~_opt : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t option <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALread_lines" class="code"|<<span class="keyword"|val>> read~_lines : <<span class="code type"|<<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >>>>>><<div id="VALread" class="code"|<<span class="keyword"|val>> read : <<span class="code type"|?count:int -> <<a_api text="input_channel" | type Lwt_text.input_channel >> -> Text.t <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALwrite_char" class="code"|<<span class="keyword"|val>> write~_char : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALwrite_chars" class="code"|<<span class="keyword"|val>> write~_chars : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALwrite" class="code"|<<span class="keyword"|val>> write : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALwrite_line" class="code"|<<span class="keyword"|val>> write~_line : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALwrite_lines" class="code"|<<span class="keyword"|val>> write~_lines : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALopen_file" class="code"|<<span class="keyword"|val>> open~_file : <<span class="code type"|\\{{{   }}}?buffer_size:int ->\\{{{   }}}  ?strict:bool ->\\{{{   }}}  ?encoding:Encoding.t ->\\{{{   }}}  ?flags:Unix.open_flag list ->\\{{{   }}}  ?perm:Unix.file_perm ->\\{{{   }}}  mode:'a <<a_api text="Lwt_io.mode" | type Lwt_io.mode >> -> <<a_api text="Lwt_io.file_name" | type Lwt_io.file_name >> -> 'a <<a_api text="channel" | type Lwt_text.channel >> <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALwith_file" class="code"|<<span class="keyword"|val>> with~_file : <<span class="code type"|\\{{{   }}}?buffer_size:int ->\\{{{   }}}  ?strict:bool ->\\{{{   }}}  ?encoding:Encoding.t ->\\{{{   }}}  ?flags:Unix.open_flag list ->\\{{{   }}}  ?perm:Unix.file_perm ->\\{{{   }}}  mode:'a <<a_api text="Lwt_io.mode" | type Lwt_io.mode >> ->\\{{{   }}}  <<a_api text="Lwt_io.file_name" | type Lwt_io.file_name >> -> ('a <<a_api text="channel" | type Lwt_text.channel >> -> 'b <<a_api text="Lwt.t" | type Lwt.t >>) -> 'b <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALlines_of_file" class="code"|<<span class="keyword"|val>> lines~_of~_file : <<span class="code type"|<<a_api text="Lwt_io.file_name" | type Lwt_io.file_name >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >>>>>><<div id="VALlines_to_file" class="code"|<<span class="keyword"|val>> lines~_to~_file : <<span class="code type"|<<a_api text="Lwt_io.file_name" | type Lwt_io.file_name >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALchars_of_file" class="code"|<<span class="keyword"|val>> chars~_of~_file : <<span class="code type"|<<a_api text="Lwt_io.file_name" | type Lwt_io.file_name >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >>>>>><<div id="VALchars_to_file" class="code"|<<span class="keyword"|val>> chars~_to~_file : <<span class="code type"|<<a_api text="Lwt_io.file_name" | type Lwt_io.file_name >> -> Text.t <<a_api text="Lwt_stream.t" | type Lwt_stream.t >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALfprint" class="code"|<<span class="keyword"|val>> fprint : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALfprintl" class="code"|<<span class="keyword"|val>> fprintl : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALfprintf" class="code"|<<span class="keyword"|val>> fprintf : <<span class="code type"|\\{{{   }}}<<a_api text="output_channel" | type Lwt_text.output_channel >> ->\\{{{   }}}  ('a, unit, Text.t, unit <<a_api text="Lwt.t" | type Lwt.t >>) Pervasives.format4 -> 'a>>>><<div id="VALfprintlf" class="code"|<<span class="keyword"|val>> fprintlf : <<span class="code type"|\\{{{   }}}<<a_api text="output_channel" | type Lwt_text.output_channel >> ->\\{{{   }}}  ('a, unit, Text.t, unit <<a_api text="Lwt.t" | type Lwt.t >>) Pervasives.format4 -> 'a>>>><<div id="VALprint" class="code"|<<span class="keyword"|val>> print : <<span class="code type"|Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALprintl" class="code"|<<span class="keyword"|val>> printl : <<span class="code type"|Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALprintf" class="code"|<<span class="keyword"|val>> printf : <<span class="code type"|('a, unit, Text.t, unit <<a_api text="Lwt.t" | type Lwt.t >>) Pervasives.format4 -> 'a>>>><<div id="VALprintlf" class="code"|<<span class="keyword"|val>> printlf : <<span class="code type"|('a, unit, Text.t, unit <<a_api text="Lwt.t" | type Lwt.t >>) Pervasives.format4 -> 'a>>>><<div id="VALeprint" class="code"|<<span class="keyword"|val>> eprint : <<span class="code type"|Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALeprintl" class="code"|<<span class="keyword"|val>> eprintl : <<span class="code type"|Text.t -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALeprintf" class="code"|<<span class="keyword"|val>> eprintf : <<span class="code type"|('a, unit, Text.t, unit <<a_api text="Lwt.t" | type Lwt.t >>) Pervasives.format4 -> 'a>>>><<div id="VALeprintlf" class="code"|<<span class="keyword"|val>> eprintlf : <<span class="code type"|('a, unit, Text.t, unit <<a_api text="Lwt.t" | type Lwt.t >>) Pervasives.format4 -> 'a>>>><<div id="VALhexdump_stream" class="code"|<<span class="keyword"|val>> hexdump~_stream : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> char <<a_api text="Lwt_stream.t" | type Lwt_stream.t >> -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>><<div id="VALhexdump" class="code"|<<span class="keyword"|val>> hexdump : <<span class="code type"|<<a_api text="output_channel" | type Lwt_text.output_channel >> -> string -> unit <<a_api text="Lwt.t" | type Lwt.t >>>>>>