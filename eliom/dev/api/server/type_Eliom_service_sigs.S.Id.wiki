<<code language="ocaml" | sig
  type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k) service =
      ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k) Eliom_service_sigs.S.t
    constraint 'h = [< `WithSuffix | `WithoutSuffix ]
  type (_, _, _, _, _) t =
      Path :
        Eliom_lib.Url.path -> (Eliom_service_sigs.S.att, non_co, 'a, 'b, 'c)
                              Eliom_service_sigs.S.Id.t
    | Fallback :
        (unit, unit, 'mf, Eliom_service_sigs.S.att, non_co, non_ext, 
         reg, [ `WithoutSuffix ], unit, unit, 'ret)
        Eliom_service_sigs.S.Id.service -> (Eliom_service_sigs.S.att, 
                                            co, 'mf, 'ret, unit)
                                           Eliom_service_sigs.S.Id.t
    | Global :
        (Eliom_service_sigs.S.non_att, co, 'd, 'e, unit)
        Eliom_service_sigs.S.Id.t
  val untype :
    ('a, 'c, 'm, 'r, 'g) Eliom_service_sigs.S.Id.t ->
    ('a, 'c, 'm, 'rr, 'g) Eliom_service_sigs.S.Id.t
end >>