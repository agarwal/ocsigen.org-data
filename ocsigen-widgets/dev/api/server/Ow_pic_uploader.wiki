=Module <<a_api_type subproject="server" | module Ow_pic_uploader >> =
<<pre class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|module>> <<span class="ocsforge_color_uid"|<<span class="ocsforge_color_uid"|Ow_pic_uploader>>>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="ocsforge_color_keyword"|sig>><<a_api subproject="server" text=".." | module Ow_pic_uploader >><<span class="ocsforge_color_keyword"|end>>>>~Widget to upload a picture~, check it on server side~, resize it~,
   and possibly ask the user to crop it~.

----

~Call function <<span class="odocwiki_inlinecode"|make>> for each picture uploader you want to create~,
   with some parameters like the directory where you want to save the
   pictures~.
   ~This will create a service and the widget to upload in this
   directory using this service~.


   ~Be careful to set the right options in ~Ocsigen server~'s configuration file
   to be able to upload files and limit the maximum size of uploaded files~.
<<pre class="ocsforge_color odocwiki_code" id="TYPEt"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'data>> <<span class="odocwiki_name"|t>>>><<div class="odocwiki_info"|~The type of picture uploaders~.
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEcrop_type"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_name"|crop~_type>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_type"|string * <<span class="ocsforge_color_delimiter"| ( >>float * float * float * float<<span class="ocsforge_color_delimiter"| ) >>>> >><<div class="odocwiki_info"|~Type of the data sent to the cropping function
>>
<<pre id="VALmake" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|make>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| directory: >>string list <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| name: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?crop_ratio: >>float option <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?max_width: >>int <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?max_height: >>int <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?service_wrapper: >><<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_uid"|Ocsigen_extensions>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|file_info>> <<span class="ocsforge_color_delimiter"| -> >> string <<span class="ocsforge_color_uid"|Lwt>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\                    <<span class="ocsforge_color_uid"|Eliom_lib>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|file_info>> <<span class="ocsforge_color_delimiter"| -> >> string <<span class="ocsforge_color_uid"|Lwt>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?crop_wrapper: >><<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_delimiter"| ( >><<a_api subproject="server" text="crop_type" | type Ow_pic_uploader.crop_type >> * 'data <<span class="ocsforge_color_delimiter"| -> >> string <<span class="ocsforge_color_uid"|Lwt>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\                 <<a_api subproject="server" text="crop_type" | type Ow_pic_uploader.crop_type >> * 'data <<span class="ocsforge_color_delimiter"| -> >> unit <<span class="ocsforge_color_uid"|Lwt>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| data_deriver: >><<span class="ocsforge_color_delimiter"| ( >><<a_api subproject="server" text="crop_type" | type Ow_pic_uploader.crop_type >> * 'data<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_uid"|Deriving_Json>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>> <<span class="ocsforge_color_delimiter"| -> >>\\  unit <<span class="ocsforge_color_delimiter"| -> >> 'data <<a_api subproject="server" text="t" | type Ow_pic_uploader.t >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|make ~~directory ~~name ~(~)>> creates a picture uploader in <<span class="odocwiki_inlinecode"|directory>>
    with a service called <<span class="odocwiki_inlinecode"|name>> ~(choose the name you want~, as lon g as two
    uploaders have different names~)~.


* ~If optional argument <<span class="odocwiki_inlinecode"|crop~_ratio>> is present~, the user will be asked
    to crop the picture~. <<span class="odocwiki_inlinecode"|~None>> means that no ratio will be forced~.
    <<span class="odocwiki_inlinecode"|~Some  v>> means that the widget will impose width ~/ height ~= v~.
* ~Optional aguments <<span class="odocwiki_inlinecode"|~?max~_height>> and <<span class="odocwiki_inlinecode"|~?max~_width>> are used
    if you want the picture to be resized ~(for example to avoid large files~)~.
    ~Images will never be enlarged~.
    ~If the the image is to be cropped~, the resizing will be made after cropping~.
* <<span class="odocwiki_inlinecode"|~?service~_wrapper>> is called on the upload service handlers~.
    ~By default it is the identity function~. ~But you can
    use this for example to add some action to the service ~(for example
    allow only connected users~, or filter the result~)~.
* <<span class="odocwiki_inlinecode"|~?crop~_wrapper>> is a wrapper for the cropping function~.
    ~By default it does nothing~.
    ~The cropping function returns the file name on the server~.

>>

~Experimental client version of <<span class="odocwiki_inlinecode"|make>> to be used with client apps
    ~(mobile apps~)~.
    ~Call it with exactly the same parameter values as on server side
    if you want to avoid injection~.
<<pre id="VALupload_pic_form" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|upload~_pic~_form>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| ?send: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?crop: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?select_an_area_of_the_picture: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?fit_in_box: >><<span class="ocsforge_color_delimiter"| ( >>[ `Div ] <<span class="ocsforge_color_uid"|Eliom_content>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_uid"|Html5>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_uid"|D>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|elt>> <<span class="ocsforge_color_delimiter"| -> >>\\               int option * int option<<span class="ocsforge_color_delimiter"| ) >>\\              <<span class="ocsforge_color_uid"|Eliom_pervasives>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|client_value>> <<span class="ocsforge_color_delimiter"| -> >>\\  'data <<a_api subproject="server" text="t" | type Ow_pic_uploader.t >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| url_path: >>string list <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| text: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| on_error: >><<span class="ocsforge_color_delimiter"| ( >>exn <<span class="ocsforge_color_delimiter"| -> >> unit <<span class="ocsforge_color_uid"|Lwt>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| continuation: >><<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> unit <<span class="ocsforge_color_uid"|Lwt>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  'data <<span class="ocsforge_color_delimiter"| -> >> [ `Div ] <<span class="ocsforge_color_uid"|Eliom_content>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_uid"|Html5>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_uid"|D>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|elt>>>>>><<div class="odocwiki_info"|~Creates a form that will ask for an image~, send it~, possibly ask te user
    to crop it~. ~On success~, the continuation called as last parameter will
    be called with the name of the file on server as parameter
    ~(use this for example to close the popup window~)~.


* ~Argument <<span class="odocwiki_inlinecode"|~?send>>~: if given~, the text used to mean "~Send"
* ~Argument <<span class="odocwiki_inlinecode"|~?crop>>~: if given~, the text used to mean "crop"
* ~Argument <<span class="odocwiki_inlinecode"|~?select~_an~_area~_of~_the~_picture>>~: if given~,
    the text used to mean "~Select an area of the picture"
* ~Argument <<span class="odocwiki_inlinecode"|~?fit~_in~_box>>~: if given~, it is a client~-side function that
    will be called with the container as argument and will be expected to
    return a couple <<span class="odocwiki_inlinecode"|int option ~* int option>>~, which represents the width
    and the height of the box in which the picture has to fit~. ~If this
    argument is provided~, we use the "box sizing method"~, otherwise
    we use the "explicit sizing method"~, as explained in
    http~:~/~/deepliquid~.com~/content~/~Jcrop~_~Sizing~_~Issues~.html
    ~If the function returns <<span class="odocwiki_inlinecode"|~None~, ~None>>~, it will neither use the box sizing
    method or the explicit sizing method~.
* ~Argument <<span class="odocwiki_inlinecode"|~~url~_path>> is the ~U~R~L path of the directory containing
    these pictures on the server~.
* ~Argument <<span class="odocwiki_inlinecode"|~~text>> is the text you want to display before the form~.
* ~Arguments <<span class="odocwiki_inlinecode"|~~err~_log>> and <<span class="odocwiki_inlinecode"|std~_log>> are the client~-side functions to use
    to display ~(error or information~) messages~. ~Example <<span class="odocwiki_inlinecode"|~Eba~_msg~.log>>
    if you are using ~Eliom base app ~(as client values if you are using this
    from server side~)~.

>>

~This function will display a popup asking the user to upload a picture~,
    and returns~:
* the name of the picture if the procedure succeeded~,
* <<span class="odocwiki_inlinecode"|~None>> if the procedure was interrupted ~(popup closed~)~.

    ~It may raise an exception if something went wrong~.


    ~Cf~. <<span class="odocwiki_inlinecode"|upload~_pic~_form>> for the documentation for the arguments~.
