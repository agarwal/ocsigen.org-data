<<code language="ocaml" | sig
  type 'a kind
  type browser_content
  module Html :
    sig
      type page = Html_types.html Eliom_content.Html.elt
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.meth ->
        id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf, 
            return, 'gp_)
           Eliom_service.id ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Action :
    sig
      type page = unit
      type options = [ `NoReload | `Reload ]
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.meth ->
        id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf, 
            return, 'gp_)
           Eliom_service.id ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Unit :
    sig
      type page = unit
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.meth ->
        id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf, 
            return, 'gp_)
           Eliom_service.id ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module App :
    functor (P : Eliom_registration_sigs.APP_PARAM) ->
      sig
        val application_name : string
        type page = Html_types.html Eliom_content.Html.elt
        type options = unit
        type return = Eliom_service.non_ocaml
        type result = browser_content kind
        val register :
          ?app:string ->
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                   Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                   'e, return)
                  Eliom_service.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('get -> 'post -> page Lwt.t) -> unit
        val create :
          ?app:string ->
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          ?https:bool ->
          ?name:string ->
          ?csrf_safe:bool ->
          ?csrf_scope:[< Eliom_common.user_scope ] ->
          ?csrf_secure:bool ->
          ?max_use:int ->
          ?timeout:float ->
          meth:('m, 'gp, 'gn, 'pp, 'pn,
                [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
               Eliom_service.meth ->
          id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf,
              return, 'gp_)
             Eliom_service.id ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('gp -> 'pp -> page Lwt.t) ->
          ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
           'a, 'gn, 'pn, return)
          Eliom_service.t
        val send :
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t -> page -> result Lwt.t
      end
  type _ redirection =
      Redirection :
        (unit, unit, Eliom_service.get, 'b, 'c, 'd, 'e, [ `WithoutSuffix ],
         unit, unit, 'a)
        Eliom_service.t -> 'a Eliom_registration.redirection
  module Redirection :
    sig
      type 'a page = Eliom_service.non_ocaml redirection
      type options =
          [ `Found
          | `MovedPermanently
          | `NotNodifed
          | `SeeOther
          | `TemporaryRedirect
          | `UseProxy ]
      type 'a return = Eliom_service.non_ocaml
      val register :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'b, 'c, 'd, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'e,
                 'f, 'a return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> 'a page Lwt.t) ->
        ('get -> 'post -> 'a page Lwt.t) -> unit
      val create :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'b, 'mf, 'gp_)
             Eliom_service.meth ->
        id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf,
            'a return, 'gp_)
           Eliom_service.id ->
        ?error_handler:((string * exn) list -> 'a page Lwt.t) ->
        ('gp -> 'pp -> 'a page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'b, 'gn, 'pn, 'a return)
        Eliom_service.t
      type 'a result = browser_content kind
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> 'a page -> 'a result Lwt.t
    end
  module Any :
    sig
      type 'a page = 'a kind
      type options = unit
      type 'a return = Eliom_service.non_ocaml
      val register :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'b, 'c, 'd, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'e,
                 'f, 'a return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> 'a page Lwt.t) ->
        ('get -> 'post -> 'a page Lwt.t) -> unit
      val create :
        ?app:string ->
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'b, 'mf, 'gp_)
             Eliom_service.meth ->
        id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf,
            'a return, 'gp_)
           Eliom_service.id ->
        ?error_handler:((string * exn) list -> 'a page Lwt.t) ->
        ('gp -> 'pp -> 'a page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'b, 'gn, 'pn, 'a return)
        Eliom_service.t
      type 'a result = 'a kind
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> 'a page -> 'a result Lwt.t
    end
  module type Base = sig type return = Eliom_service.non_ocaml end
  module Block5 : Base
  module Html_text : Base
  module CssText : Base
  module Text : Base
  module String : Base
  module String_redirection : Base
  module Streamlist : Base
  module Ocaml : sig type 'a return = 'a Eliom_service.ocaml end
end >>