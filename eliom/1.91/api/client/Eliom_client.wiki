=Module <<a_api_type subproject="client" | module Eliom_client >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_client: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_client >><<span class='code'|end>>>>~Call server side services and change the current page~.\\

----
<<div id="VALchange_page" class="code"|<<span class="keyword"|val>> change~_page : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.service_kind" | type Eliom_services.service_kind >> ],\\{{{   }}}           [< `WithSuffix | `WithoutSuffix ], 'c, 'd,\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ], 'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:(string * string) list Eliom_pervasives.String.Table.t ->\\{{{   }}}  ?keep_get_na_params:bool -> 'a -> 'b -> unit Lwt.t>>>><<div class="info"|~Call a server side service and change the current page~.
    ~If the service belongs to the same application~,
    the client side program is not stopped~, and only
    the content ~(not the container~) is reloaded~.\\
>>
<<div id="VALcall_caml_service" class="code"|<<span class="keyword"|val>> call~_caml~_service : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.service_kind" | type Eliom_services.service_kind >> ],\\{{{   }}}           [< `WithSuffix | `WithoutSuffix ], 'c, 'd,\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ], 'e Eliom_parameters.caml)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:(string * string) list Eliom_pervasives.String.Table.t ->\\{{{   }}}  ?keep_get_na_params:bool -> 'a -> 'b -> 'e Lwt.t>>>><<div class="info"|~Call a server side service that return a ~Caml value~.\\
>>
<<div id="VALexit_to" class="code"|<<span class="keyword"|val>> exit~_to : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.service_kind" | type Eliom_services.service_kind >> ],\\{{{   }}}           [< `WithSuffix | `WithoutSuffix ], 'c, 'd,\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ], 'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:(string * string) list Eliom_pervasives.String.Table.t ->\\{{{   }}}  ?keep_get_na_params:bool -> 'a -> 'b -> unit>>>><<div class="info"|~Stop current program and load a new page~.\\
>>
<<div id="VALget_subpage" class="code"|<<span class="keyword"|val>> get~_subpage : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.service_kind" | type Eliom_services.service_kind >> ],\\{{{   }}}           [< `WithSuffix | `WithoutSuffix ], 'c, 'd,\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ], 'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:(string * string) list Eliom_pervasives.String.Table.t ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  'a ->\\{{{   }}}  'b ->\\{{{   }}}  [< `A\\{{{   }}}   | `Abbr\\{{{   }}}   | `Acronym\\{{{   }}}   | `Address\\{{{   }}}   | `B\\{{{   }}}   | `Bdo\\{{{   }}}   | `Big\\{{{   }}}   | `Blockquote\\{{{   }}}   | `Br\\{{{   }}}   | `Button\\{{{   }}}   | `Cite\\{{{   }}}   | `Code\\{{{   }}}   | `Del\\{{{   }}}   | `Dfn\\{{{   }}}   | `Div\\{{{   }}}   | `Dl\\{{{   }}}   | `Em\\{{{   }}}   | `Fieldset\\{{{   }}}   | `Form\\{{{   }}}   | `H1\\{{{   }}}   | `H2\\{{{   }}}   | `H3\\{{{   }}}   | `H4\\{{{   }}}   | `H5\\{{{   }}}   | `H6\\{{{   }}}   | `Hr\\{{{   }}}   | `I\\{{{   }}}   | `Img\\{{{   }}}   | `Input\\{{{   }}}   | `Ins\\{{{   }}}   | `Kbd\\{{{   }}}   | `Label\\{{{   }}}   | `Map\\{{{   }}}   | `Noscript\\{{{   }}}   | `Object\\{{{   }}}   | `Ol\\{{{   }}}   | `P\\{{{   }}}   | `PCDATA\\{{{   }}}   | `Pre\\{{{   }}}   | `Q\\{{{   }}}   | `Ruby_complex\\{{{   }}}   | `Ruby_simple1\\{{{   }}}   | `Ruby_simple2\\{{{   }}}   | `Samp\\{{{   }}}   | `Script\\{{{   }}}   | `Select\\{{{   }}}   | `Small\\{{{   }}}   | `Span\\{{{   }}}   | `Strong\\{{{   }}}   | `Sub\\{{{   }}}   | `Sup\\{{{   }}}   | `Table\\{{{   }}}   | `Textarea\\{{{   }}}   | `Tt\\{{{   }}}   | `Ul\\{{{   }}}   | `Var ]\\{{{   }}}  Eliom_pervasives.HTML5.M.elt list Lwt.t>>>><<div class="info"|~Call a service returning a list of html blocks~.\\
>>
<<div id="VALcall_service" class="code"|<<span class="keyword"|val>> call~_service : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.service_kind" | type Eliom_services.service_kind >> ],\\{{{   }}}           [< `WithSuffix | `WithoutSuffix ], 'c, 'd,\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ], 'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:(string * string) list Eliom_pervasives.String.Table.t ->\\{{{   }}}  ?keep_get_na_params:bool -> 'a -> 'b -> string Lwt.t>>>><<div class="info"|~(low level~) ~Call a server side service and return the content
    of the resulting ~H~T~T~P frame as a string~.\\
>>
<<div id="VALchange_url" class="code"|<<span class="keyword"|val>> change~_url : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.service_kind" | type Eliom_services.service_kind >> ],\\{{{   }}}           [< `WithSuffix | `WithoutSuffix ], 'c, 'd,\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ], 'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:(string * string) list Eliom_pervasives.String.Table.t ->\\{{{   }}}  ?keep_get_na_params:bool -> 'a -> 'b -> unit>>>><<div class="info"|~(low level~) ~Change the ~U~R~L~, without doing a request~.
    ~As browsers do not not allow to change the ~U~R~L ~(for security reasons~)~,
    we write the new ~U~R~L in the fragment part of the ~U~R~L~.
    ~A script must do the redirection if there is something in the fragment~.
    ~Usually this function is only for internal use~.\\
>>
<<div id="VALon_unload" class="code"|<<span class="keyword"|val>> on~_unload : <<span class="code type"|(unit -> unit Lwt.t) -> unit>>>><<div class="info"|register a function to be called on page change\\
>>
