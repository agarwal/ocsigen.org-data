=Module <<a_api_type subproject="server" | module Eliom_output >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_output: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output >><<span class='code'|end>>>>~Predefined modules for generating forms and
    registering handlers~, for several types of pages~:
    ~Applications~, ~H~T~M~L pages typed with polymorphic variants~,
    untyped ~(text~) pages~, actions~, redirections~, files ~.~.~.\\

----
<<div class="code" id="TYPEkind"|<<span class="keyword"|type>> <<span class="code type"|('a, 'b)>> kind>>

<<div class="code" id="TYPEapplication_content"|<<span class="keyword"|type>> <<span class="code type"|'a>> application~_content = <<span class="code type"|[ `Appl of 'a ]>> >>

<<div class="code" id="TYPEblock_content"|<<span class="keyword"|type>> block~_content>>

<<div class="code" id="TYPEbrowser_content"|<<span class="keyword"|type>> browser~_content = <<span class="code type"|[ `Browser ]>> >>

<<div class="code" id="TYPEcaml_content"|<<span class="keyword"|type>> <<span class="code type"|'a>> caml~_content>>

<<div class="code" id="TYPEunknown_content"|<<span class="keyword"|type>> unknown~_content>>

<<div class="code" id="TYPEappl_service"|<<span class="keyword"|type>> appl~_service = <<span class="code type"|[ `Appl ]>> >>

<<div class="code" id="TYPEhttp_service"|<<span class="keyword"|type>> http~_service = <<span class="code type"|[ `Http ]>> >>

<<div class="code" id="TYPEnon_caml_service"|<<span class="keyword"|type>> non~_caml~_service = <<span class="code type"|[ `Appl | `Http ]>> >>

<<div class="code" id="TYPEapplication_name"|<<span class="keyword"|type>> <<span class="code type"|'a>> application~_name>>

\\

==@@id="2_CreatinglinksandformswithHTML5M"@@~Creating links and forms with ~H~T~M~L~5~.~M==
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Html5" | module Eliom_output.Html5 >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Html5 >><<span class='code'|end>>>><<div class="info"|~Eliom service registration and forms creation for ~H~T~M~L~5 page
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Html5_registration" | module Eliom_output.Html5_registration >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Html5_registration >><<span class='code'|end>>>><<div class="info"|~Forms creation 
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Html5_forms" | module Eliom_output.Html5_forms >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Html5_forms >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Xhtml" | module Eliom_output.Xhtml >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Xhtml >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Xhtml_registration" | module Eliom_output.Xhtml_registration >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Xhtml_registration >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Xhtml_forms" | module Eliom_output.Xhtml_forms >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Xhtml_forms >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module type>> <<a_api subproject="server" text="APPL_PARAMS" | module type Eliom_output.APPL_PARAMS >> = <<span class='code'|sig>><<a_api subproject="server" text=".." | module type Eliom_output.APPL_PARAMS >><<span class='code'|end>>>><<div class="code" id="TYPEappl_service_options"|<<span class="keyword"|type>> appl~_service~_options = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@do_not_launch : <<span class="code type"|bool>>;|

}
>>

<<div id="VALdefault_appl_service_options" class="code"|<<span class="keyword"|val>> default~_appl~_service~_options : <<span class="code type"|<<a_api subproject="server" text="appl_service_options" | type Eliom_output.appl_service_options >>>>>><<div class="code"|<<span class="keyword"|module type>> <<a_api subproject="server" text="Eliom_appl" | module type Eliom_output.Eliom_appl >> = <<span class='code'|sig>><<a_api subproject="server" text=".." | module type Eliom_output.Eliom_appl >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Eliom_appl" | module Eliom_output.Eliom_appl >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Appl~_params>><<span class='code'| ~: >><<span class="code type"|<<a_api subproject="server" text="APPL_PARAMS" | module Eliom_output.APPL_PARAMS >>>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api subproject="server" text="Eliom_appl" | module Eliom_output.Eliom_appl >>>><<span class="code type"|{{{  }}}>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Blocks5" | module Eliom_output.Blocks5 >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Blocks5 >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Blocks" | module Eliom_output.Blocks >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Blocks >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Make_TypedXML_Registration" | module Eliom_output.Make_TypedXML_Registration >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~X~M~L>><<span class='code'| ~: >><<span class="code type"|XML_sigs.Iterable>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Typed~X~M~L>><<span class='code'| ~: >><<span class="code type"|XML_sigs.TypedXML>><<span class="code type"|{{{  }}} with module XML := XML>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~E>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div class="code" id="TYPEcontent"|<<span class="keyword"|type>> content>>

>><<span class='code'|end>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Make_TypedXML_Registration >><<span class='code'|end>>>>>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="HtmlText" | module Eliom_output.HtmlText >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.HtmlText >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="CssText" | module Eliom_output.CssText >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.CssText >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Text" | module Eliom_output.Text >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Text >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Action" | module Eliom_output.Action >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Action >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Unit" | module Eliom_output.Unit >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Unit >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Redirection" | module Eliom_output.Redirection >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Redirection >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="String_redirection" | module Eliom_output.String_redirection >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.String_redirection >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Files" | module Eliom_output.Files >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Files >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Any" | module Eliom_output.Any >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Any >><<span class='code'|end>>>><<div id="VALappl_self_redirect" class="code"|<<span class="keyword"|val>> appl~_self~_redirect : <<span class="code type"|\\{{{   }}}('a ->\\{{{   }}}   ([< `Appl of 'b | `Browser ], [< <<a_api subproject="server" text="non_caml_service" | type Eliom_output.non_caml_service >> ])\\{{{   }}}   <<a_api subproject="server" text="kind" | type Eliom_output.kind >> Lwt.t) ->\\{{{   }}}  'a ->\\{{{   }}}  ('c <<a_api subproject="server" text="application_content" | type Eliom_output.application_content >>, <<a_api subproject="server" text="appl_service" | type Eliom_output.appl_service >>)\\{{{   }}}  <<a_api subproject="server" text="kind" | type Eliom_output.kind >> Lwt.t>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Streamlist" | module Eliom_output.Streamlist >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Streamlist >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Caml" | module Eliom_output.Caml >>: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Caml >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Customize" | module Eliom_output.Customize >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~B>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options>>

<<div class="code" id="TYPEreturn"|<<span class="keyword"|type>> return>>

<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page>>

<<div class="code" id="TYPEresult"|<<span class="keyword"|type>> result>>

>><<span class='code'|end>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~R>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page = <<span class="code type"|B.page>> >>

<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options = <<span class="code type"|B.options>> >>

<<div class="code" id="TYPEreturn"|<<span class="keyword"|type>> return = <<span class="code type"|B.return>> >>

<<div class="code" id="TYPEresult"|<<span class="keyword"|type>> result = <<span class="code type"|B.result>> >>

<<div id="VALsend" class="code"|<<span class="keyword"|val>> send : <<span class="code type"|\\{{{   }}}?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string -> ?headers:Http_headers.t -> B.page -> B.result Lwt.t>>>><<div id="VALregister" class="code"|<<span class="keyword"|val>> register : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="server" text="Eliom_services.internal_service_kind" | type Eliom_services.internal_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [ `Registrable ], B.return)\\{{{   }}}          <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  ('a -> 'b -> B.page Lwt.t) -> unit>>>><<div id="VALregister_service" class="code"|<<span class="keyword"|val>> register~_service : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?priority:int ->\\{{{   }}}  path:<<a_api subproject="server" text="Eliom_pervasives.Url.path" | type Eliom_pervasives.Url.path >> ->\\{{{   }}}  get_params:('a, [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  ('a -> unit -> B.page Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, unit, [> `Registrable ], B.return)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_coservice" class="code"|<<span class="keyword"|val>> register~_coservice : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:(unit, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Service ] ], [ `Get ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [ `WithoutSuffix ], unit, unit, [< <<a_api subproject="server" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}            B.return)\\{{{   }}}           <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  ('a -> unit -> B.page Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Get ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ], B.return)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_coservice'" class="code"|<<span class="keyword"|val>> register~_coservice~' : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  ('a -> unit -> B.page Lwt.t) ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api subproject="server" text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ], B.return)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_post_service" class="code"|<<span class="keyword"|val>> register~_post~_service : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?priority:int ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ], 'd)\\{{{   }}}           <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('e, [ `WithoutSuffix ], 'f) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  ('a -> 'e -> B.page Lwt.t) ->\\{{{   }}}  ('a, 'e,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [ `Coservice | `Service ] ], [> `Post ])\\{{{   }}}        <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'f, [> `Registrable ], B.return)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_post_coservice" class="code"|<<span class="keyword"|val>> register~_post~_coservice : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [< `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ],\\{{{   }}}            B.return)\\{{{   }}}           <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  ('a -> 'd -> B.page Lwt.t) ->\\{{{   }}}  ('a, 'd,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Post ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Registrable ], B.return)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_post_coservice'" class="code"|<<span class="keyword"|val>> register~_post~_coservice~' : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?options:B.options ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> B.page Lwt.t) ->\\{{{   }}}  (unit -> 'a -> B.page Lwt.t) ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api subproject="server" text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ], B.return)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>>>><<span class='code'|end>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~T>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page>>

<<div id="VALtranslate" class="code"|<<span class="keyword"|val>> translate : <<span class="code type"|<<a_api subproject="server" text="page" | type Eliom_output.Customize.page >> -> B.page Lwt.t>>>>>><<span class='code'|end>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Customize >><<span class='code'|end>>>>>>>>>><<div id="VALset_exn_handler" class="code"|<<span class="keyword"|val>> set~_exn~_handler : <<span class="code type"|\\{{{   }}}(exn ->\\{{{   }}}   (<<a_api subproject="server" text="browser_content" | type Eliom_output.browser_content >>, <<a_api subproject="server" text="http_service" | type Eliom_output.http_service >>) <<a_api subproject="server" text="kind" | type Eliom_output.kind >>\\{{{   }}}   Lwt.t) ->\\{{{   }}}  unit>>>><<div id="VALcast_unknown_content_kind" class="code"|<<span class="keyword"|val>> cast~_unknown~_content~_kind : <<span class="code type"|\\{{{   }}}(<<a_api subproject="server" text="unknown_content" | type Eliom_output.unknown_content >>, <<a_api subproject="server" text="http_service" | type Eliom_output.http_service >>) <<a_api subproject="server" text="kind" | type Eliom_output.kind >> ->\\{{{   }}}  ('a, <<a_api subproject="server" text="http_service" | type Eliom_output.http_service >>) <<a_api subproject="server" text="kind" | type Eliom_output.kind >>>>>><<div id="VALcast_http_result" class="code"|<<span class="keyword"|val>> cast~_http~_result : <<span class="code type"|Ocsigen_http_frame.result -> ('a, 'b) <<a_api subproject="server" text="kind" | type Eliom_output.kind >>>>>>