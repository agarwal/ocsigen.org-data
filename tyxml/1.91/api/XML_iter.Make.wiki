=Functor <<a_api_type | module XML_iter.Make >> =
<<div class="code"|<<span class="keyword"|module>> Make: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api text=".." | module XML_iter.Make >><<span class='code'|end>>>>>><<div class="module_param_list" | <<span class="param_title" |Parameters :>><<div|
|@@class="paramstable"@ @class="centertop fifteen code"@@{{{XML}}}|@@class="centertop"@@:|<<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>>|
>>>>

----
<<div id="VALamap" class="code"|<<span class="keyword"|val>> amap : <<span class="code type"|(<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list) -> <<a_api text="XML.elt" | type XML.elt >> -> <<a_api text="XML.elt" | type XML.elt >>>>>><<div class="info"|~Recursively edit attributes for the element and all its children~.\\
>>
<<div id="VALamap1" class="code"|<<span class="keyword"|val>> amap~1 : <<span class="code type"|(<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list) -> <<a_api text="XML.elt" | type XML.elt >> -> <<a_api text="XML.elt" | type XML.elt >>>>>><<div class="info"|~Edit attributes only for one element~.\\
>>
\\
~The following can safely be exported by higher level libraries~,
	because removing an attribute from a element is always legal~.\\
<<div id="VALrm_attrib" class="code"|<<span class="keyword"|val>> rm~_attrib : <<span class="code type"|(<<a_api text="XML.aname" | type XML.aname >> -> bool) -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALrm_attrib_from_list" class="code"|<<span class="keyword"|val>> rm~_attrib~_from~_list : <<span class="code type"|(<<a_api text="XML.aname" | type XML.aname >> -> bool) -> (string -> bool) -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALmap_int_attrib" class="code"|<<span class="keyword"|val>> map~_int~_attrib : <<span class="code type"|(<<a_api text="XML.aname" | type XML.aname >> -> bool) -> (int -> int) -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALmap_string_attrib" class="code"|<<span class="keyword"|val>> map~_string~_attrib : <<span class="code type"|\\{{{   }}}(<<a_api text="XML.aname" | type XML.aname >> -> bool) ->\\{{{   }}}  (string -> string) -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALmap_string_attrib_in_list" class="code"|<<span class="keyword"|val>> map~_string~_attrib~_in~_list : <<span class="code type"|\\{{{   }}}(<<a_api text="XML.aname" | type XML.aname >> -> bool) ->\\{{{   }}}  (string -> string) -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>>\\
~Exporting the following by higher level libraries would drive
	a hole through a type system~, because they allow to add //any//
	attribute to //any// element~.\\
<<div id="VALadd_int_attrib" class="code"|<<span class="keyword"|val>> add~_int~_attrib : <<span class="code type"|<<a_api text="XML.aname" | type XML.aname >> -> int -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALadd_string_attrib" class="code"|<<span class="keyword"|val>> add~_string~_attrib : <<span class="code type"|<<a_api text="XML.aname" | type XML.aname >> -> string -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALadd_comma_sep_attrib" class="code"|<<span class="keyword"|val>> add~_comma~_sep~_attrib : <<span class="code type"|<<a_api text="XML.aname" | type XML.aname >> -> string -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALadd_space_sep_attrib" class="code"|<<span class="keyword"|val>> add~_space~_sep~_attrib : <<span class="code type"|<<a_api text="XML.aname" | type XML.aname >> -> string -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.attrib" | type XML.attrib >> list>>>><<div id="VALfold" class="code"|<<span class="keyword"|val>> fold : <<span class="code type"|\\{{{   }}}(unit -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> 'a) ->\\{{{   }}}  (<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> 'a list -> 'a) -> <<a_api text="XML.elt" | type XML.elt >> -> 'a>>>><<div id="VALall_entities" class="code"|<<span class="keyword"|val>> all~_entities : <<span class="code type"|<<a_api text="XML.elt" | type XML.elt >> -> string list>>>><<div id="VALtranslate" class="code"|<<span class="keyword"|val>> translate : <<span class="code type"|\\{{{   }}}(<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.elt" | type XML.elt >>) ->\\{{{   }}}  (<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.elt" | type XML.elt >> list -> <<a_api text="XML.elt" | type XML.elt >>) ->\\{{{   }}}  ('a -> <<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.elt" | type XML.elt >> list) ->\\{{{   }}}  ('a -> <<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> <<a_api text="XML.elt" | type XML.elt >> list -> <<a_api text="XML.elt" | type XML.elt >> list) ->\\{{{   }}}  (<<a_api text="XML.ename" | type XML.ename >> -> <<a_api text="XML.attrib" | type XML.attrib >> list -> 'a -> 'a) -> 'a -> <<a_api text="XML.elt" | type XML.elt >> -> <<a_api text="XML.elt" | type XML.elt >>>>>>