=Module type <<a_api_type subproject="server" | module type Eliom_mkreg.REGCREATE >> =
<<div class="code"|<<span class="keyword"|module type>> REGCREATE = <<span class='code'|sig>><<a_api subproject="server" text=".." | module type Eliom_mkreg.REGCREATE >><<span class='code'|end>>>>
==@@id="2_Creatingmodulestoregisterservicesforonetypeofpages"@@~Creating modules to register services for one type of pages==
\\

----
<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page>>

<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options>>

<<div class="code" id="TYPEreturn"|<<span class="keyword"|type>> return>>

<<div id="VALsend" class="code"|<<span class="keyword"|val>> send : <<span class="code type"|\\{{{   }}}?options:<<a_api subproject="server" text="options" | type Eliom_mkreg.REGCREATE.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  <<a_api subproject="server" text="page" | type Eliom_mkreg.REGCREATE.page >> -> Ocsigen_http_frame.result Lwt.t>>>><<div id="VALsend_appl_content" class="code"|<<span class="keyword"|val>> send~_appl~_content : <<span class="code type"|Eliom_services.send_appl_content>>>><<div class="info"|~Whether the service is capable to send application content 
        when required~.
        ~This field is usually <<span class='code'|~Eliom~_services~.~X~Never>>~. 
        ~This value is recorded inside each service just after registration~.\\
>>
