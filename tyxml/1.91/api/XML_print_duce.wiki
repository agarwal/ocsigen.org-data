=Module <<a_api_type | module XML_print_duce >> =
<<div class="code"|<<span class="keyword"|module>> XML_print_duce: <<span class='code'|sig>><<a_api text=".." | module XML_print_duce >><<span class='code'|end>>>>~Printer for ~X~H~T~M~L with ~Ocamlduce that handles browser specificities properly~.\\

----
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Make" | module XML_print_duce.Make >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~I>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div id="VALemptytags" class="code"|<<span class="keyword"|val>> emptytags : <<span class="code type"|string list>>>>>><<span class='code'|end>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api text="XML_sigs_duce.Printer" | module XML_sigs_duce.Printer >>>><<span class="code type"|{{{  }}}>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="MakeTypedRaw" | module XML_print_duce.MakeTypedRaw >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Typed~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs_duce.TypedXML" | module XML_sigs_duce.TypedXML >>>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api text="XML_sigs_duce.RawTypedPrinter" | module XML_sigs_duce.RawTypedPrinter >>>><<span class="code type"|{{{  }}}>>>>>><<div id="VALprint" class="code"|<<span class="keyword"|val>> print : <<span class="code type"|\\{{{   }}}output:(string -> unit) ->\\{{{   }}}  ?encode:(string -> string) -> Ocamlduce.Load.anyxml -> unit>>>>