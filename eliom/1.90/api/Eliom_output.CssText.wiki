=Module <<a_api_type | module Eliom_output.CssText >> =
<<div class="code"|<<span class="keyword"|module>> CssText: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = string\\{{{   }}}  and type return = Eliom_services.http>>>>
===@@id="3_ModuletoregisteruntypedCSSpages"@@~Module to register untyped ~C~S~S pages===
\\

----
<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page>>

<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options>>

<<div class="code" id="TYPEreturn"|<<span class="keyword"|type>> return>>

<<div id="VALsend" class="code"|<<span class="keyword"|val>> send : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> -> <<a_api text="Ocsigen_http_frame.result" | type Ocsigen_http_frame.result >> Lwt.t>>>><<div id="VALregister" class="code"|<<span class="keyword"|val>> register : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api text="Eliom_services.internal_service_kind" | type Eliom_services.internal_service_kind >> ],\\{{{   }}}           [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [ `Registrable ],\\{{{   }}}           <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}          <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a -> 'b -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) -> unit>>>><<div class="info"|~Register a service with the associated handler function~.
   <<span class='code'|register s t f>> will associate the service <<span class='code'|s>> to the function <<span class='code'|f>>~.
   <<span class='code'|f>> is the function that creates a page~, called //service handler//~.\\


   ~The handler function takes two parameters~.* ~The second and third ones are respectively ~G~E~T and ~P~O~S~T parameters~.


   ~For example if <<span class='code'|t>> is <<span class='code'|~Eliom~_parameters~.int "s">>~, then <<span class='code'| ~'get>> is <<span class='code'|int>>~.\\


   ~The <<span class='code'|~?scope>> optional parameter is <<span class='code'|`~Global>> by default~, which means that the
   service will be registered in the global table and be available to any client~.
   ~If you want to restrict the visibility of the service to a browser session~,
   use <<span class='code'|~~scope~:`~Session>>~.
   ~If you want to restrict the visibility of the service to a group of sessions~,
   use <<span class='code'|~~scope~:`~Session~_group>>~.
   ~If you have a client side ~Eliom program running~, and you want to restrict
   the visibility of the service to this instance of the program~,
   use <<span class='code'|~~scope~:`~Client~_process>>~.\\


   ~If the same service is registered several times with different visibilities~,
   ~Eliom will choose the service for handling a request in that order~:
   <<span class='code'|`~Client~_process>>~, <<span class='code'|`~Session>>~, <<span class='code'|`~Session~_group>> and finally <<span class='code'|`~Global>>~. ~It means for example
   that you can register a specialized version of a public service for a session~.\\


    ~Warning~: ~All public services created during initialization must be
    registered in the public table during initialisation~, never after~,\\


   ~Registering services and coservices is always done in memory as there is
   no means of marshalling closures~.\\


    ~If you register new services dynamically~, be aware that they will disappear
    if you stop the server~. ~If you create dynamically new ~U~R~Ls~,
    be very careful to re~-create these ~U~R~Ls when you relaunch the server~,
    otherwise~, some external links or bookmarks may be broken!\\


    ~Some output modules ~(for example ~Redirectmod~) define their own options
    for that function~. ~Use the <<span class='code'|~?options>> parameter to set them~.\\


    ~The optional parameters <<span class='code'|~?charset>>~, <<span class='code'|~?code>>~, <<span class='code'|~?content~_type>> and <<span class='code'|~?headers>>
    can be used to modify the ~H~T~T~P answer sent by ~Eliom~. ~Use this with care~.\\


    <<span class='code'|~?state~_name>> is the name of the session ~(browser session or "tab" session~)~,
    if you want several
    service sessions on the same site~. ~It has no effect for scope <<span class='code'|`~Global>>~.\\


    ~If <<span class='code'|~~secure~_session>> is false when the protocol is https~, the service will be 
    registered in the unsecure session~, 
    otherwise in the secure session with https~, the unsecure one with http~.
    ~(~Secure session means that ~Eliom will ask the browser to send the cookie
    only through ~H~T~T~P~S~)~. ~It has no effect for scope <<span class='code'|`~Global>>~.\\


    ~Note that in the case of ~C~S~R~F safe coservices~, parameters
    <<span class='code'|~?state~_name>> and <<span class='code'|~?secure~_session>> must match exactly the session name
    and secure option specified while creating the ~C~S~R~F safe service~. 
    ~Otherwise~, the registration will fail
    with \\
>>
<<div id="VALregister_service" class="code"|<<span class="keyword"|val>> register~_service : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  path:<<a_api text="Ocsigen_lib.url_path" | type Ocsigen_lib.url_path >> ->\\{{{   }}}  get_params:('a, [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, unit, [> `Registrable ], <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|service>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_coservice" class="code"|<<span class="keyword"|val>> register~_coservice : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:(unit, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Service ] ], [ `Get ]) <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [ `WithoutSuffix ], unit, unit, [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}            <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Get ]) <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ],\\{{{   }}}   <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|coservice>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_coservice'" class="code"|<<span class="keyword"|val>> register~_coservice~' : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ],\\{{{   }}}   <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|coservice~'>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_post_service" class="code"|<<span class="keyword"|val>> register~_post~_service : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ],\\{{{   }}}            <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a -> 'd -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a, 'd,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [ `Coservice | `Service ] ], [> `Post ])\\{{{   }}}        <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Registrable ], <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|post~_service>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_post_coservice" class="code"|<<span class="keyword"|val>> register~_post~_coservice : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [< `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ],\\{{{   }}}            <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a -> 'd -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  ('a, 'd,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Post ]) <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Registrable ], <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|post~_coservice>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_post_coservice'" class="code"|<<span class="keyword"|val>> register~_post~_coservice~' : <<span class="code type"|\\{{{   }}}?scope:<<a_api text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:<<a_api text="Http_headers.t" | type Http_headers.t >> ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  (unit -> 'a -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG.page >> Lwt.t) ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ],\\{{{   }}}   <<a_api text="return" | type Eliom_mkreg.ELIOMREGSIG.return >>)\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|post~_coservice~'>> followed by <<span class='code'|register>>\\
>>
