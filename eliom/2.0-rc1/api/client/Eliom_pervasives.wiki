=Module <<a_api_type subproject="client" | module Eliom_pervasives >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_pervasives: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives >><<span class='code'|end>>>>~Pervasives module for ~Eliom extending stdlib~, should always be opened~.\\

----
<<div  id="EXCEPTIONEliom_Internal_Error" class="code"|<<span class="keyword"|exception>> Eliom_Internal_Error <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div id="VALid" class="code"|<<span class="keyword"|val>> id : <<span class="code type"|'a -> 'a>>>><<div id="VAL(>>=)" class="code"|<<span class="keyword"|val>> ~(~>~>~=~) : <<span class="code type"|'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b Lwt.t>>>><<div id="VAL(>|=)" class="code"|<<span class="keyword"|val>> ~(~>~|~=~) : <<span class="code type"|'a Lwt.t -> ('a -> 'b) -> 'b Lwt.t>>>><<div id="VAL(!!)" class="code"|<<span class="keyword"|val>> ~(!!~) : <<span class="code type"|'a Lazy.t -> 'a>>>><<div id="VALmap_option" class="code"|<<span class="keyword"|val>> map~_option : <<span class="code type"|('a -> 'b) -> 'a option -> 'b option>>>><<div class="code" id="TYPEleftright"|<<span class="keyword"|type>> <<span class="code type"|('a, 'b)>> leftright = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Left>> <<span class="keyword"|of>> <<span class="code type"|'a>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Right>> <<span class="keyword"|of>> <<span class="code type"|'b>>|>>

<<div class="code" id="TYPEpoly"|<<span class="keyword"|type>> poly>>

<<div id="VALfrom_poly" class="code"|<<span class="keyword"|val>> from~_poly : <<span class="code type"|<<a_api subproject="client" text="poly" | type Eliom_pervasives.poly >> -> 'a>>>><<div class="code" id="TYPEclient_expr"|<<span class="keyword"|type>> <<span class="code type"|'a>> client~_expr = <<span class="code type"|int64 * <<a_api subproject="client" text="poly" | type Eliom_pervasives.poly >>>> >>

<<div class="code" id="TYPEwrapped_value"|<<span class="keyword"|type>> <<span class="code type"|'a>> wrapped~_value = <<span class="code type"|<<a_api subproject="client" text="poly" | type Eliom_pervasives.poly >> * 'a>> >>

<<div  id="EXCEPTIONFalse" class="code"|<<span class="keyword"|exception>> False>>
<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="List" | module Eliom_pervasives.List >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.List >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="String" | module Eliom_pervasives.String >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.String >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="Url" | module Eliom_pervasives.Url >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.Url >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="Printexc" | module Eliom_pervasives.Printexc >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.Printexc >><<span class='code'|end>>>><<div id="VALdebug" class="code"|<<span class="keyword"|val>> debug : <<span class="code type"|('a, unit, string, unit) Pervasives.format4 -> 'a>>>><<div id="VALdebug_exn" class="code"|<<span class="keyword"|val>> debug~_exn : <<span class="code type"|('a, unit, string, unit) Pervasives.format4 -> exn -> 'a>>>><<div id="VALjsdebug" class="code"|<<span class="keyword"|val>> jsdebug : <<span class="code type"|'a -> unit>>>><<div id="VALalert" class="code"|<<span class="keyword"|val>> alert : <<span class="code type"|('a, unit, string, unit) Pervasives.format4 -> 'a>>>><<div id="VALjsalert" class="code"|<<span class="keyword"|val>> jsalert : <<span class="code type"|Js.js_string Js.t -> unit>>>><<div id="VALto_json" class="code"|<<span class="keyword"|val>> to~_json : <<span class="code type"|?typ:'a -> 'b -> string>>>><<div id="VALof_json" class="code"|<<span class="keyword"|val>> of~_json : <<span class="code type"|?typ:'a -> string -> 'b>>>><<div id="VALencode_form_value" class="code"|<<span class="keyword"|val>> encode~_form~_value : <<span class="code type"|'a -> string>>>><<div id="VALunmarshal_js_var" class="code"|<<span class="keyword"|val>> unmarshal~_js~_var : <<span class="code type"|string -> 'a>>>><<div id="VALencode_header_value" class="code"|<<span class="keyword"|val>> encode~_header~_value : <<span class="code type"|'a -> string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="XML" | module Eliom_pervasives.XML >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.XML >><<span class='code'|end>>>><<div class="info"|~X~M~L building and deconstructing~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="SVG" | module Eliom_pervasives.SVG >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.SVG >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="HTML5" | module Eliom_pervasives.HTML5 >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.HTML5 >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api subproject="client" text="Regexp" | module Eliom_pervasives.Regexp >>: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_pervasives.Regexp >><<span class='code'|end>>>><<div class="code" id="TYPEfile_info"|<<span class="keyword"|type>> file~_info>>

