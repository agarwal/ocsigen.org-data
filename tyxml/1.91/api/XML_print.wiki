=Module <<a_api_type | module XML_print >> =
<<div class="code"|<<span class="keyword"|module>> XML_print: <<span class='code'|sig>><<a_api text=".." | module XML_print >><<span class='code'|end>>>>~Printer for ~X~M~L~.\\

----
<<div id="VALencode_unsafe_char" class="code"|<<span class="keyword"|val>> encode~_unsafe~_char : <<span class="code type"|string -> string>>>><<div class="info"|~The encoder maps strings to ~H~T~M~L and //must// encode the unsafe characters
    <<span class='code'|~'~<~'>>~, <<span class='code'|~'~>~'>>~, <<span class='code'|~'"~'>>~, <<span class='code'|~'~&~'>> and the control characters ~0~-~8~, ~1~1~-~1~2~, ~1~4~-~3~1~, ~1~2~7
    to ~H~T~M~L entities~.  <<span class='code'|encode~_unsafe>> is the default for <<span class='code'|~?encode>> in <<span class='code'|output>>
    and <<span class='code'|pretty~_print>> below~.  ~Other implementations are provided by the module
    <<span class='code'|~Netencoding>> in the
    [[http://www.ocaml-programming.de/programming/ocamlnet.html|~Ocaml~Net]]
    library~, e~.g~.~:
    <<span class='code'|let encode ~= ~Netencoding~.~Html~.encode ~~in~_enc~:`~Enc~_iso~8~8~5~9~1 ~~out~_enc~:`~Enc~_usascii ~(~)>>~,
    ~Where national characters are replaced by ~H~T~M~L entities~.
    ~The user is of course free to write her own implementation~.\\
**See also** [[http://www.ocaml-programming.de/programming/ocamlnet.html|~Ocaml~Net]]\\
>>
<<div id="VALencode_unsafe_char_and_at" class="code"|<<span class="keyword"|val>> encode~_unsafe~_char~_and~_at : <<span class="code type"|string -> string>>>><<div class="info"|~In addition~, encode <<span class='code'|"~@">> as <<span class='code'|"~&~#~6~4~;">> in the hope that this will fool
    simple minded email address harvesters~.\\
>>
<<div id="VALcompose_decl" class="code"|<<span class="keyword"|val>> compose~_decl : <<span class="code type"|?version:string -> ?encoding:string -> unit -> string>>>><<div class="info"|<<span class='code'|encoding>> is the name of the character encoding~, e~.g~. <<span class='code'|"~U~S~-~A~S~C~I~I">> or <<span class='code'|"~U~T~F~-~8">>\\
>>
<<div id="VALcompose_doctype" class="code"|<<span class="keyword"|val>> compose~_doctype : <<span class="code type"|string -> string list -> string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Make" | module XML_print.Make >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~I>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div id="VALemptytags" class="code"|<<span class="keyword"|val>> emptytags : <<span class="code type"|string list>>>>>><<span class='code'|end>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~O>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Output" | module XML_sigs.Output >>>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api text="XML_sigs.Printer" | module XML_sigs.Printer >>(XML)(O).T>><<span class="code type"|{{{  }}}>>>>>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="MakeTyped" | module XML_print.MakeTyped >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Typed~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.TypedXML" | module XML_sigs.TypedXML >>(XML).T>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~O>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Output" | module XML_sigs.Output >>>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api text="XML_sigs.TypedPrinter" | module XML_sigs.TypedPrinter >>(XML)(TypedXML)(O).T>><<span class="code type"|{{{  }}}>>>>>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="MakeSimple" | module XML_print.MakeSimple >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~F>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div id="VALemptytags" class="code"|<<span class="keyword"|val>> emptytags : <<span class="code type"|string list>>>>>><<span class='code'|end>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api text="XML_sigs.SimplePrinter" | module XML_sigs.SimplePrinter >>(XML).T>><<span class="code type"|{{{  }}}>>>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="MakeTypedSimple" | module XML_print.MakeTypedSimple >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.Iterable" | module XML_sigs.Iterable >>>><<span class='code'|~) ~-~> >><<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Typed~X~M~L>><<span class='code'| ~: >><<span class="code type"|<<a_api text="XML_sigs.TypedXML" | module XML_sigs.TypedXML >>(XML).T>><<span class='code'|~) ~-~> >><<span class="code type"|<<a_api text="XML_sigs.TypedSimplePrinter" | module XML_sigs.TypedSimplePrinter >>(XML)(TypedXML).T>><<span class="code type"|{{{  }}}>>>>>>>>