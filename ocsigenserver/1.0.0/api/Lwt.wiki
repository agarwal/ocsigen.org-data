=Module <<a_api_type | module Lwt >> =
<<div class="code"|<<span class="keyword"|module>> Lwt: <<span class='code'|sig>><<a_api text=".." | module Lwt >><<span class='code'|end>>>>~Module <<span class='code'|~Lwt>>~: cooperative light~-weight threads~.\\

----
\\
~Execution order
     ~A thread executes as much as possible~.  ~Switching to another
     thread is always explicit~.\\


   ~Exception handling* ~You must use "fail e" instead of "raise e" if you want the
       exception to be wrapped into the thread~.
* ~The construction <<span class='code'|try t with ~.~.~.>> will not catch the
       exception associated to the thread <<span class='code'|t>> if this thread fails~.
       ~You should use <<span class='code'|catch>> instead~.

\\
<<div class="code" id="TYPEt"|<<span class="keyword"|type>> <<span class="code type"|'a>> t>>
<<div class="info"|~The type of threads returning a result of type <<span class='code'|~'a>>~.\\
>>

<<div id="VALreturn" class="code"|<<span class="keyword"|val>> return : <<span class="code type"|'a -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|return e>> is a thread whose return value is the value of
          the expression <<span class='code'|e>>~.\\
>>
<<div id="VALfail" class="code"|<<span class="keyword"|val>> fail : <<span class="code type"|exn -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|fail e>> is a thread that fails with the exception <<span class='code'|e>>~.\\
>>
<<div id="VALbind" class="code"|<<span class="keyword"|val>> bind : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> ('a -> 'b <<a_api text="t" | type Lwt.t >>) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|bind t f>> is a thread which first waits for the thread <<span class='code'|t>>
          to terminate and then~, if the thread succeeds~, behaves as the
          application of function <<span class='code'|f>> to the return value of <<span class='code'|t>>~.  ~If
          the thread <<span class='code'|t>> fails~, <<span class='code'|bind t f>> also fails~, with the same
          exception~.\\


          ~The expression <<span class='code'|bind t ~(fun x ~-~> t~'~)>> can intuitively be read
          as <<span class='code'|let x ~= t in t~'>>~.\\


          ~Note that <<span class='code'|bind>> is also often used just for synchronization
          purpose~: <<span class='code'|t~'>> will not execute before <<span class='code'|t>> is terminated~.\\


          ~The result of a thread can be bound several time~.\\
>>
<<div id="VAL(>>=)" class="code"|<<span class="keyword"|val>> ~(~>~>~=~) : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> ('a -> 'b <<a_api text="t" | type Lwt.t >>) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|t ~>~>~= f>> is an alternative notation for <<span class='code'|bind t f>>~.\\
>>
<<div id="VALcatch" class="code"|<<span class="keyword"|val>> catch : <<span class="code type"|(unit -> 'a <<a_api text="t" | type Lwt.t >>) -> (exn -> 'a <<a_api text="t" | type Lwt.t >>) -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|catch t f>> is a thread that behaves as the thread <<span class='code'|t ~(~)>> if
          this thread succeeds~.  ~If the thread <<span class='code'|t ~(~)>> fails with some
          exception~, <<span class='code'|catch t f>> behaves as the application of <<span class='code'|f>> to
          this exception~.\\
>>
<<div id="VALtry_bind" class="code"|<<span class="keyword"|val>> try~_bind : <<span class="code type"|(unit -> 'a <<a_api text="t" | type Lwt.t >>) -> ('a -> 'b <<a_api text="t" | type Lwt.t >>) -> (exn -> 'b <<a_api text="t" | type Lwt.t >>) -> 'b <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|try~_bind t f g>> behaves as <<span class='code'|bind ~(t ~(~)~) f>> if <<span class='code'|t>> does not fail~.
         ~Otherwise~, it behaves as the application of <<span class='code'|g>> to the
         exception associated to <<span class='code'|t ~(~)>>~.\\
>>
<<div id="VALchoose" class="code"|<<span class="keyword"|val>> choose : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> list -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|choose l>> behaves as the first thread in <<span class='code'|l>> to terminate~.
          ~If several threads are already terminated~, one is choosen
          at random~.\\
>>
<<div id="VALignore_result" class="code"|<<span class="keyword"|val>> ignore~_result : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> unit>>>><<div class="info"|<<span class='code'|ignore~_result t>> start the thread <<span class='code'|t>> and ignores its result
          value if the thread terminates sucessfully~.  ~However~, if the
          thread <<span class='code'|t>> fails~, the exception is raised instead of being
          ignored~.
          ~You should use this function if you want to start a thread
          and don~'t care what its return value is~, nor when it
          terminates ~(for instance~, because it is looping~)~.
          ~Note that if the thread <<span class='code'|t>> yields and later fails~, the
          exception will not be raised at this point in the program~.\\
>>
<<div id="VALwait" class="code"|<<span class="keyword"|val>> wait : <<span class="code type"|unit -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|wait ~(~)>> is a thread which sleeps forever ~(unless it is
          resumed by one of the functions <<span class='code'|wakeup>>~, <<span class='code'|wakeup~_exn>> below~)~.
          ~This thread does not block the execution of the remainder of
          the program ~(except of course~, if another thread tries to
          wait for its termination~)~.\\
>>
<<div id="VALwakeup" class="code"|<<span class="keyword"|val>> wakeup : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> 'a -> unit>>>><<div class="info"|<<span class='code'|wakeup t e>> makes the sleeping thread <<span class='code'|t>> terminate and
         return the value of the expression <<span class='code'|e>>~.\\
>>
<<div id="VALwakeup_exn" class="code"|<<span class="keyword"|val>> wakeup~_exn : <<span class="code type"|'a <<a_api text="t" | type Lwt.t >> -> exn -> unit>>>><<div class="info"|<<span class='code'|wakeup~_exn t e>> makes the sleeping thread <<span class='code'|t>> fail with the
         exception <<span class='code'|e>>~.\\
>>
<<div id="VALfinalize" class="code"|<<span class="keyword"|val>> finalize : <<span class="code type"|(unit -> 'a <<a_api text="t" | type Lwt.t >>) -> (unit -> unit <<a_api text="t" | type Lwt.t >>) -> 'a <<a_api text="t" | type Lwt.t >>>>>><<div class="info"|<<span class='code'|finalize f g>> returns the same result as <<span class='code'|f ~(~)>> whether it fails 
         or not~. ~In both cases~, <<span class='code'|g ~(~)>> is executed after <<span class='code'|f>>~.\\
>>
