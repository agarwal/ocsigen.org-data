<<code language="ocaml" | sig
  type aname = string
  type separator = Space | Comma
  type event = string
  type attrib
  type attribs
  val float_attrib : XML.aname -> float -> XML.attrib
  val int_attrib : XML.aname -> int -> XML.attrib
  val string_attrib : XML.aname -> string -> XML.attrib
  val space_sep_attrib : XML.aname -> string list -> XML.attrib
  val comma_sep_attrib : XML.aname -> string list -> XML.attrib
  val event_attrib : XML.aname -> string -> XML.attrib
  val attrib_name : XML.attrib -> XML.aname
  val attrib_value_to_string : (string -> string) -> XML.attrib -> string
  val attrib_to_string : (string -> string) -> XML.attrib -> string
  type ename = string
  type elt_content =
      Empty
    | Comment of string
    | EncodedPCDATA of string
    | PCDATA of string
    | Entity of string
    | Leaf of XML.ename * XML.attrib list
    | Node of XML.ename * XML.attrib list * XML.elt list
  and elt = { mutable ref : int; elt : XML.elt_content; }
  val empty : unit -> XML.elt
  val comment : string -> XML.elt
  val pcdata : string -> XML.elt
  val encodedpcdata : string -> XML.elt
  val entity : string -> XML.elt
  val leaf : ?a:XML.attrib list -> XML.ename -> XML.elt
  val node : ?a:XML.attrib list -> XML.ename -> XML.elt list -> XML.elt
  val cdata : string -> XML.elt
  val cdata_script : string -> XML.elt
  val cdata_style : string -> XML.elt
  val encode_unsafe : string -> string
  val encode_unsafe_and_at : string -> string
  val output :
    ?preformatted:XML.ename list ->
    ?no_break:XML.ename list ->
    ?encode:(string -> string) -> (string -> unit) -> XML.elt -> unit
  val output_compact :
    ?encode:(string -> string) -> (string -> unit) -> XML.elt -> unit
  val pretty_print :
    ?width:int ->
    ?preformatted:XML.ename list ->
    ?no_break:XML.ename list ->
    ?encode:(string -> string) -> (string -> unit) -> XML.elt -> unit
  val decl :
    ?version:string -> ?encoding:string -> (string -> unit) -> unit -> unit
  val amap : (XML.ename -> XML.attribs -> XML.attribs) -> XML.elt -> XML.elt
  val amap1 : (XML.ename -> XML.attribs -> XML.attribs) -> XML.elt -> XML.elt
  val rm_attrib : (XML.aname -> bool) -> XML.attribs -> XML.attribs
  val rm_attrib_from_list :
    (XML.aname -> bool) -> (string -> bool) -> XML.attribs -> XML.attribs
  val map_int_attrib :
    (XML.aname -> bool) -> (int -> int) -> XML.attribs -> XML.attribs
  val map_string_attrib :
    (XML.aname -> bool) -> (string -> string) -> XML.attribs -> XML.attribs
  val map_string_attrib_in_list :
    (XML.aname -> bool) -> (string -> string) -> XML.attribs -> XML.attribs
  val add_int_attrib : XML.aname -> int -> XML.attribs -> XML.attribs
  val add_string_attrib : XML.aname -> string -> XML.attribs -> XML.attribs
  val add_comma_sep_attrib :
    XML.aname -> string -> XML.attribs -> XML.attribs
  val add_space_sep_attrib :
    XML.aname -> string -> XML.attribs -> XML.attribs
  val fold :
    (unit -> 'a) ->
    (string -> 'a) ->
    (string -> 'a) ->
    (string -> 'a) ->
    (XML.ename -> XML.attrib list -> 'a) ->
    (XML.ename -> XML.attrib list -> 'a list -> 'a) -> XML.elt -> 'a
  val all_entities : XML.elt -> string list
  val translate :
    (XML.ename -> XML.attrib list -> XML.elt) ->
    (XML.ename -> XML.attrib list -> XML.elt list -> XML.elt) ->
    ('a -> XML.ename -> XML.attrib list -> XML.elt list) ->
    ('a -> XML.ename -> XML.attrib list -> XML.elt list -> XML.elt list) ->
    (XML.ename -> XML.attrib list -> 'a -> 'a) -> 'a -> XML.elt -> XML.elt
  type ref_tree = Ref_tree of int option * (int * XML.ref_tree) list
  val ref_node : XML.elt -> int
  val next_ref : unit -> int
  val make_ref_tree : XML.elt -> XML.ref_tree
  val make_ref_tree_list : XML.elt list -> (int * XML.ref_tree) list
  val register_event : XML.elt -> string -> ('a -> 'b) -> 'a -> unit
  val class_name : string
end >>