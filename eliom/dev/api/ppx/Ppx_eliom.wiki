=Module <<a_api_type subproject="ppx" | module Ppx_eliom >> =
<<pre class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|module>> <<span class="ocsforge_color_uid"|<<span class="ocsforge_color_uid"|Ppx_eliom>>>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="ocsforge_color_keyword"|sig>><<a_api subproject="ppx" text=".." | module Ppx_eliom >><<span class="ocsforge_color_keyword"|end>>>>~Eliom ppx syntax extension~.


~The eliom syntax extension allows to write~, in one file~, both the client and server part of your application~. ~The extension is automatically enabled by the <<span class="odocwiki_inlinecode"|eliomc>> and <<span class="odocwiki_inlinecode"|js~_of~_eliomc>> compilers on <<span class="odocwiki_inlinecode"|~.eliom>> and <<span class="odocwiki_inlinecode"|~.eliomi>> files~.


~For the camlp~4 syntax extension~, see
<<a_manual chapter="clientserver-language" | here >>


~The extensions presented here are also available with the <<span class="odocwiki_inlinecode"|eliom~.>> prefix~.



==@@id="2_Sections"@@~Sections==



~The location of code execution is specified by section annotations~. ~We can specify
that a declaration is performed on the server~, or on the client~:



<<code language='ocaml'|[%%server
  let s = ...
]

[%%client
  let c = ...
]
>>



~Some constructions have a shortcut~:



<<code language='ocaml'|let%client c = ...
>>



~Finally~, it~'s also possible to start a section for the rest of the file~:



<<code language='ocaml'|[%%server.start]
let s = ..
>>



~In <<span class="odocwiki_inlinecode"|~.eliomi>> files~, only the last version is available~.


~Sections are only available at top level and cannot be nested~.



===@@id="3_Sharedsections"@@~Shared sections===



~Shared sections are also available for code that should be on the client and on the server~.



<<code language='ocaml'|let%shared sh = ...
>>



~This is equivalent to duplicating the code in a client and a server section~.



==@@id="2_Fragments"@@~Fragments==



~A client~-side expression can be included inside a server section~, and the server can
thereafter refer to it~: an expression placed inside <<span class="odocwiki_inlinecode"|~[~%client ~.~.~. ~]>> will be computed
on the client when it receives the page~; but the eventual client~-side value of the
expression can be manipulated as a black box on the server~.



<<code language='ocaml'|let%server x = [%client 1 + 3 ]
>>

~For example~, here~, the expression <<span class="odocwiki_inlinecode"|~1 ~+ ~3>> will be evaluated on the client~, but itâ€™s
possible to refer server~-side to the future value of this expression ~(for example~,
put it in a list~)~. ~The value of a client fragment cannot be accessed on the server~.


~In this case~, <<span class="odocwiki_inlinecode"|x>> has type <<span class="odocwiki_inlinecode"|int fragment>>~.
~Eliom can~'t always infer the type of fragments~. ~In this case~, you may annotate the type~:
<<span class="odocwiki_inlinecode"| ~[~%client ~( ~.~.~. ~: ~<type~> ~) ~] >>~.


~Client fragments cannot be nested~.



===@@id="3_Sharedfragments"@@~Shared fragments===



~It is also possible to use shared fragments~.

<<code language='ocaml'|let%server x =  [%shared ...]
>>



~It will produce values of type <<a_api subproject="server"|type Eliom_lib.shared_value>> ~.


~Shared fragments can be nested and can contain client fragments~.



==@@id="2_Injectionsandescapedvalues"@@~Injections and escaped values==



~Values that have been computed on the server can be used on the client by
prefixing them with a percent symbol <<span class="odocwiki_inlinecode"|~~~%>>~. ~We call this an //injection//~.



<<code language='ocaml'|let%server s = 1 + 2
let%client c = ~%s + 1
>>



~Here~, the expression <<span class="odocwiki_inlinecode"|~1 ~+ ~2>> is evaluated and bound to variable <<span class="odocwiki_inlinecode"|s>> on the server~.
~The resulting value <<span class="odocwiki_inlinecode"|~3>> is transferred to the client together with the ~Web page~,
then the expression <<span class="odocwiki_inlinecode"|~~~%s ~+ ~1>> is computed client~-side~.
~An injection makes it possible to access client~-side a client fragment which
has been specified on the server~:



<<code language='ocaml'|let%server x = [%client 1 + 3 ]
let%client c = [3 + ~%x]
>>



~The value inside the client fragment is extracted by <<span class="odocwiki_inlinecode"|~~~%x>>~, whose value is <<span class="odocwiki_inlinecode"|~4>> here~.



===@@id="3_Restrictions"@@~Restrictions===



~It is not possible to use injections on values containing a closure~. ~This includes lazy values~, objects or anything containing functions~. ~You can use either <<a_api subproject="server"|type Eliom_pervasive.server_function>>  and client or shared fragments to circumvent this limitation~.


~To extend and customize the serialization from client to server~, see chapter
<<a_manual chapter="clientserver-wrapping"|Wrapping values>> ~.



==@@id="2_Noteaboutevaluation"@@~Note about evaluation==



~Regardless of the construction used and their combination~, there is only one communication
 from server to client~, when the webpage is sent~.
~This is due to the fact that client fragments are not executed immediately when encountered inside server code~.
~The intuitive semantic is the following~: client code is not executed when encountered~,
instead it is registered for later execution~, once the webpage has been sent to the
 client~. ~Then all the client code is executed in the order it was encountered on the server~.

----
