=Module <<a_api_type | module Ocsigen_http_frame >> =
<<div class="code"|<<span class="keyword"|module>> Ocsigen_http_frame: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_http_frame >><<span class='code'|end>>>><<span class='code'|compute~_new~_ri~_cookies now path ri~_cookies cookies~_to~_set>>
   adds the cookies from <<span class='code'|cookies~_to~_set>>
   to <<span class='code'|ri~_cookies>>~, as if the cookies
   had been send to the browser and the browser
   was doing a new request to the url <<span class='code'|path>>~.
   ~Only the cookies that match <<span class='code'|path>> ~(current path~) are added~.\\

----
<<div class="code" id="TYPEetag"|<<span class="keyword"|type>> etag = <<span class="code type"|string>> >>

<<div id="VALcompute_new_ri_cookies" class="code"|<<span class="keyword"|val>> compute~_new~_ri~_cookies : <<span class="code type"|\\{{{   }}}float ->\\{{{   }}}  string list ->\\{{{   }}}  string Ocsigen_lib.String_Table.t ->\\{{{   }}}  Ocsigen_cookies.cookie Ocsigen_lib.String_Table.t Ocsigen_cookies.Cookies.t ->\\{{{   }}}  string Ocsigen_lib.String_Table.t>>>><<div class="info"|<<span class='code'|compute~_new~_ri~_cookies now path ri~_cookies cookies~_to~_set>>
   adds the cookies from <<span class='code'|cookies~_to~_set>>
   to <<span class='code'|ri~_cookies>>~, as if the cookies
   had been send to the browser and the browser
   was doing a new request to the url <<span class='code'|path>>~.
   ~Only the cookies that match <<span class='code'|path>> ~(current path~) are added~.\\
>>
<<div class="code" id="TYPEresult"|<<span class="keyword"|type>> result = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_cookies : <<span class="code type"|Ocsigen_cookies.cookieset>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@cookies to set|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_lastmodified : <<span class="code type"|float option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Default~: <<span class='code'|~None>>|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_etag : <<span class="code type"|<<a_api text="etag" | type Ocsigen_http_frame.etag >> option>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_code : <<span class="code type"|int>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~H~T~T~P code~, if not ~2~0~0|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_stream : <<span class="code type"|\\{{{   }}}string <<a_api text="Ocsigen_stream.t" | type Ocsigen_stream.t >> *\\{{{   }}}  (string <<a_api text="Ocsigen_stream.t" | type Ocsigen_stream.t >> -> int64 -> string <<a_api text="Ocsigen_stream.step" | type Ocsigen_stream.step >> Lwt.t) option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Default~: empty stream~. 
           ~The second field is ~(optionaly~)
           the function used to skip a part of the 
           stream~, if you do not you want to use
           a basic reading of the stream~. 
           ~For example~, for static files~, you can optimize it by using
           a <<span class='code'|seek>> function~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_content_length : <<span class="code type"|int64 option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@<<span class='code'|~None>> means ~Transfer~-encoding~: chunked|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_content_type : <<span class="code type"|string option>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_headers : <<span class="code type"|<<a_api text="Http_headers.t" | type Http_headers.t >>>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The headers you want to add|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_charset : <<span class="code type"|string option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Default~: ~None|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@res_location : <<span class="code type"|string option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Default~: ~None|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|

}
>>
<<div class="info"|~The type of answers to send\\
>>

<<div id="VALdefault_result" class="code"|<<span class="keyword"|val>> default~_result : <<span class="code type"|unit -> <<a_api text="result" | type Ocsigen_http_frame.result >>>>>><<div class="info"|~Default <<span class='code'|result>> to use as a base for constructing others~.\\
>>
<<div id="VALempty_result" class="code"|<<span class="keyword"|val>> empty~_result : <<span class="code type"|unit -> <<a_api text="result" | type Ocsigen_http_frame.result >>>>>><<div class="info"|<<span class='code'|result>> for an empty page~.\\
>>
<<div class="code"|<<span class="keyword"|module type>> <<a_api text="HTTP_CONTENT" | module type Ocsigen_http_frame.HTTP_CONTENT >> = <<span class='code'|sig>><<a_api text=".." | module type Ocsigen_http_frame.HTTP_CONTENT >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Http_header" | module Ocsigen_http_frame.Http_header >>: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_http_frame.Http_header >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Http_error" | module Ocsigen_http_frame.Http_error >>: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_http_frame.Http_error >><<span class='code'|end>>>><<div class="code" id="TYPEt"|<<span class="keyword"|type>> t = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@frame_header : <<span class="code type"|<<a_api text="Http_header.http_header" | type Ocsigen_http_frame.Http_header.http_header >>>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@frame_content : <<span class="code type"|string <<a_api text="Ocsigen_stream.t" | type Ocsigen_stream.t >> option>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@frame_abort : <<span class="code type"|unit -> unit Lwt.t>>;|

}
>>
<<div class="info"|~The type of ~H~T~T~P frames~.
   ~The content may be void ~(no body~) or a stream~.
   ~While sending~, a stream will be sent with chunked encoding if no
   content~-length is supplied~.
   abort is the function to be called if you want to cancel the stream
   reading ~(closes the connection~)~.\\
>>

