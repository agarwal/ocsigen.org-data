<<code language="ocaml" | sig
  type 'a kind
  type browser_content = [ `Browser ]
  type block_content
  type unknown_content
  type 'a application_content = [ `Appl of 'a ]
  type 'a application_name
  type 'a ocaml_content
  module Html5 :
    sig
      type page = Html5_types.html Eliom_content.Html5.elt
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module type APPL_PARAMS = sig val application_name : string end
  type appl_service_options = { do_not_launch : bool; }
  val default_appl_service_options : Eliom_registration.appl_service_options
  module type ELIOM_APPL =
    sig
      val set_client_fun :
        ?app:string ->
        service:('a, 'b, 'c, 'd, 'e, 'f, 'g,
                 [< `WithSuffix | `WithoutSuffix ], 'h, 'i, 'j)
                Eliom_service.t ->
        ('a -> 'b -> unit Lwt.t) Eliom_client_value.t -> unit
      val application_script :
        ?defer:bool ->
        ?async:bool -> unit -> [> `Script ] Eliom_content.Html5.elt
      val application_name : string
      val is_initial_request : unit -> bool
      type app_id
      type page = Html5_types.html Eliom_content.Html5.elt
      type options = appl_service_options
      type return = Eliom_service.non_ocaml
      type result = app_id application_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
      val typed_name :
        Eliom_registration.ELIOM_APPL.app_id
        Eliom_registration.application_name
    end
  module App : functor (Appl_params : APPL_PARAMS) -> ELIOM_APPL
  module type TMPL_PARAMS =
    sig
      type t
      val name : string
      val make_page :
        Eliom_registration.TMPL_PARAMS.t ->
        Html5_types.html Eliom_content.Html5.elt Lwt.t
      val update :
        Eliom_registration.TMPL_PARAMS.t -> unit Eliom_client_value.t
    end
  module Eliom_tmpl :
    functor (Appl : ELIOM_APPL) (Tmpl_param : TMPL_PARAMS) ->
      sig
        type page = Tmpl_param.t
        type options = appl_service_options
        type return = Eliom_service.non_ocaml
        type result = Appl.app_id application_content kind
        val register :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                   Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                   'e, return)
                  Eliom_service.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('get -> 'post -> page Lwt.t) -> unit
        val create :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          ?https:bool ->
          ?name:string ->
          ?csrf_safe:bool ->
          ?csrf_scope:[< Eliom_common.user_scope ] ->
          ?csrf_secure:bool ->
          ?max_use:int ->
          ?timeout:float ->
          meth:('m, 'gp, 'gn, 'pp, 'pn,
                [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
               Eliom_service.Meth.t ->
          id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('gp -> 'pp -> page Lwt.t) ->
          ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
           'a, 'gn, 'pn, return)
          Eliom_service.t
        val send :
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t -> page -> result Lwt.t
      end
  module Flow5 :
    sig
      type page = Html5_types.flow5 Eliom_content.Html5.elt list
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = block_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Make_typed_xml_registration :
    functor
      (Xml : Xml_sigs.Iterable) (Typed_xml : sig
                                               module Info : Xml_sigs.Info
                                               type 'a elt
                                               type doc
                                               val toelt : 'a elt -> Xml.elt
                                               val doc_toelt : doc -> Xml.elt
                                             end) (E : sig type content end) ->
      sig
        type page = E.content Typed_xml.elt list
        type options = unit
        type return = Eliom_service.non_ocaml
        type result = block_content kind
        val register :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                   Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                   'e, return)
                  Eliom_service.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('get -> 'post -> page Lwt.t) -> unit
        val create :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          ?https:bool ->
          ?name:string ->
          ?csrf_safe:bool ->
          ?csrf_scope:[< Eliom_common.user_scope ] ->
          ?csrf_secure:bool ->
          ?max_use:int ->
          ?timeout:float ->
          meth:('m, 'gp, 'gn, 'pp, 'pn,
                [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
               Eliom_service.Meth.t ->
          id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('gp -> 'pp -> page Lwt.t) ->
          ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
           'a, 'gn, 'pn, return)
          Eliom_service.t
        val send :
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t -> page -> result Lwt.t
      end
  module Html_text :
    sig
      type page = string
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module CssText :
    sig
      type page = string
      type options = int
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Action :
    sig
      type page = unit
      type options = [ `NoReload | `Reload ]
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Unit :
    sig
      type page = unit
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  type (_, _) redirected_service =
      Service :
        (unit, unit, Eliom_service.get, 'c, 'd, 'e, 'f, [ `WithoutSuffix ],
         unit, unit, 'b)
        Eliom_service.t -> ('a, 'b) Eliom_registration.redirected_service
  module Redirection :
    sig
      type ('a, 'b) page = ('a, 'b) Eliom_registration.redirected_service
      type options =
          [ `Found
          | `MovedPermanently
          | `NotNodifed
          | `SeeOther
          | `TemporaryRedirect
          | `UseProxy ]
      type 'b return = 'b
      type 'a result = 'a Eliom_registration.kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.Redirection.options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'c, 'd, 'e, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'f,
                 'g, 'b Eliom_registration.Redirection.return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list ->
                        ('a, 'b) Eliom_registration.Redirection.page Lwt.t) ->
        ('get -> 'post -> ('a, 'b) Eliom_registration.Redirection.page Lwt.t) ->
        unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.Redirection.options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'c, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, 'b Eliom_registration.Redirection.return, 'gp_)
           Eliom_service.Id.t ->
        ?error_handler:((string * exn) list ->
                        ('a, 'b) Eliom_registration.Redirection.page Lwt.t) ->
        ('gp -> 'pp -> ('a, 'b) Eliom_registration.Redirection.page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'c, 'gn, 'pn, 'b Eliom_registration.Redirection.return)
        Eliom_service.t
      val send :
        ?options:Eliom_registration.Redirection.options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ('a, 'b) Eliom_registration.Redirection.page ->
        'a Eliom_registration.Redirection.result Lwt.t
    end
  module String_redirection :
    sig
      type page = Eliom_lib.Url.uri
      type options =
          [ `Found
          | `MovedPermanently
          | `NotNodifed
          | `SeeOther
          | `TemporaryRedirect
          | `UseProxy ]
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module File :
    sig
      val check_file : string -> bool
      type page = string
      type options = int
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module File_ct :
    sig
      val check_file : string -> bool
      type page = string * string
      type options = int
      type return = Eliom_service.non_ocaml
      type result = browser_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Ocaml :
    sig
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:unit ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, 'return Eliom_service.ocaml)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> 'return Lwt.t) ->
        ('get -> 'post -> 'return Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:unit ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, 'return Eliom_service.ocaml, 'gp_)
           Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> 'return Lwt.t) ->
        ('gp -> 'pp -> 'return Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, 'return Eliom_service.ocaml)
        Eliom_service.t
      val send :
        ?options:unit ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        'return ->
        'return Eliom_registration.ocaml_content Eliom_registration.kind
        Lwt.t
    end
  module Any :
    sig
      type ('a, 'b) page = 'a Eliom_registration.kind
      type options = unit
      type 'b return = 'b
      type 'a result = 'a Eliom_registration.kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:unit ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'c, 'd, 'e, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'f,
                 'g, 'b)
                Eliom_service.t ->
        ?error_handler:((string * exn) list ->
                        'a Eliom_registration.kind Lwt.t) ->
        ('get -> 'post -> 'a Eliom_registration.kind Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:unit ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'c, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, 'b, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list ->
                        'a Eliom_registration.kind Lwt.t) ->
        ('gp -> 'pp -> 'a Eliom_registration.kind Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'c, 'gn, 'pn, 'b)
        Eliom_service.t
      val send :
        ?options:unit ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        'a Eliom_registration.kind -> 'a Eliom_registration.kind Lwt.t
    end
  val appl_self_redirect :
    ('page -> [< `Appl of 'a | `Browser ] Eliom_registration.kind Lwt.t) ->
    'page ->
    'appl Eliom_registration.application_content Eliom_registration.kind
    Lwt.t
  module String :
    sig
      type page = string * string
      type options = int
      type return = Eliom_service.non_ocaml
      type result = unknown_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Streamlist :
    sig
      type page = (unit -> string Ocsigen_stream.t Lwt.t) list * string
      type options = unit
      type return = Eliom_service.non_ocaml
      type result = unknown_content kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                 Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                 'e, return)
                Eliom_service.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('get -> 'post -> page Lwt.t) -> unit
      val create :
        ?scope:[< Eliom_common.scope ] ->
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        meth:('m, 'gp, 'gn, 'pp, 'pn,
              [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
             Eliom_service.Meth.t ->
        id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
        ?error_handler:((string * exn) list -> page Lwt.t) ->
        ('gp -> 'pp -> page Lwt.t) ->
        ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
         'a, 'gn, 'pn, return)
        Eliom_service.t
      val send :
        ?options:options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t -> page -> result Lwt.t
    end
  module Customize :
    functor
      (R : Eliom_reg_sigs.S) (T : sig
                                    type page
                                    val translate :
                                      Eliom_registration.Customize.page ->
                                      R.page Lwt.t
                                  end) ->
      sig
        type page = T.page
        type options = R.options
        type return = R.return
        type result = R.result
        val register :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                   Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                   'e, return)
                  Eliom_service.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('get -> 'post -> page Lwt.t) -> unit
        val create :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          ?https:bool ->
          ?name:string ->
          ?csrf_safe:bool ->
          ?csrf_scope:[< Eliom_common.user_scope ] ->
          ?csrf_secure:bool ->
          ?max_use:int ->
          ?timeout:float ->
          meth:('m, 'gp, 'gn, 'pp, 'pn,
                [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
               Eliom_service.Meth.t ->
          id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('gp -> 'pp -> page Lwt.t) ->
          ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
           'a, 'gn, 'pn, return)
          Eliom_service.t
        val send :
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t -> page -> result Lwt.t
      end
  val set_exn_handler :
    (exn -> Eliom_registration.browser_content Eliom_registration.kind Lwt.t) ->
    unit
  val cast_unknown_content_kind :
    Eliom_registration.unknown_content Eliom_registration.kind ->
    'a Eliom_registration.kind
  val cast_http_result :
    Ocsigen_http_frame.result -> 'a Eliom_registration.kind
end >>