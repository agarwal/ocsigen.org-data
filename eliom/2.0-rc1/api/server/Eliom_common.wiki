=Module <<a_api_type subproject="server" | module Eliom_common >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_common: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_common >><<span class='code'|end>>>>~Low level functions for ~Eliom~, exceptions and types~.\\

----
<<div  id="EXCEPTIONEliom_404" class="code"|<<span class="keyword"|exception>> Eliom_404>>
<<div  id="EXCEPTIONEliom_Wrong_parameter" class="code"|<<span class="keyword"|exception>> Eliom_Wrong_parameter>>
<<div class="info"|~Page not found\\
>>
<<div  id="EXCEPTIONEliom_Session_expired" class="code"|<<span class="keyword"|exception>> Eliom_Session_expired>>
<<div class="info"|~Service called with wrong parameter names\\
>>
<<div  id="EXCEPTIONEliom_Typing_Error" class="code"|<<span class="keyword"|exception>> Eliom_Typing_Error <<span class="keyword"|of>> <<span class="code type"|(string * exn) list>>>>
<<div  id="EXCEPTIONEliom_site_information_not_available" class="code"|<<span class="keyword"|exception>> Eliom_site_information_not_available <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div class="info"|~The service ~(~G~E~T or ~P~O~S~T~) parameters do not match expected type\\
>>
<<div class="code" id="TYPEscope_name"|<<span class="keyword"|type>> scope~_name = <<span class="code type"|Eliom_common_base.scope_name>> >>
<<div class="info"|~That function cannot be used when the site information is not available~,
    that is~, outside a request or the initialisation phase of your ~Eliom module
    ~(while reading the configuration file~)~.\\


    ~In particular~, you cannot use the function before the configuration file
    is read for example when you are using //static linking//~.
    ~In that case you must
    delay the function call using <<a_api subproject="server" | val Eliom_services.register_eliom_module >>~.\\
>>

<<div class="code" id="TYPEuser_scope"|<<span class="keyword"|type>> user~_scope = <<span class="code type"|\\{{{   }}}[ `Client_process of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>\\{{{   }}}  | `Session of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>\\{{{   }}}  | `Session_group of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> ]>> >>

<<div class="code" id="TYPEscope"|<<span class="keyword"|type>> scope = <<span class="code type"|\\{{{   }}}[ `Client_process of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>\\{{{   }}}  | `Global\\{{{   }}}  | `Session of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>\\{{{   }}}  | `Session_group of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> ]>> >>

<<div class="code" id="TYPEall_scope"|<<span class="keyword"|type>> all~_scope = <<span class="code type"|\\{{{   }}}[ `Client_process of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>\\{{{   }}}  | `Global\\{{{   }}}  | `Request\\{{{   }}}  | `Session of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>\\{{{   }}}  | `Session_group of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> ]>> >>

<<div class="code" id="TYPEglobal_scope"|<<span class="keyword"|type>> global~_scope = <<span class="code type"|[ `Global ]>> >>

<<div class="code" id="TYPEsession_group_scope"|<<span class="keyword"|type>> session~_group~_scope = <<span class="code type"|[ `Session_group of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> ]>> >>

<<div class="code" id="TYPEsession_scope"|<<span class="keyword"|type>> session~_scope = <<span class="code type"|[ `Session of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> ]>> >>

<<div class="code" id="TYPEclient_process_scope"|<<span class="keyword"|type>> client~_process~_scope = <<span class="code type"|[ `Client_process of <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> ]>> >>

<<div class="code" id="TYPErequest_scope"|<<span class="keyword"|type>> request~_scope = <<span class="code type"|[ `Request ]>> >>

<<div id="VALglobal" class="code"|<<span class="keyword"|val>> global : <<span class="code type"|<<a_api subproject="server" text="global_scope" | type Eliom_common.global_scope >>>>>><<div id="VALsession_group" class="code"|<<span class="keyword"|val>> session~_group : <<span class="code type"|<<a_api subproject="server" text="session_group_scope" | type Eliom_common.session_group_scope >>>>>><<div id="VALsession" class="code"|<<span class="keyword"|val>> session : <<span class="code type"|<<a_api subproject="server" text="session_scope" | type Eliom_common.session_scope >>>>>><<div id="VALclient_process" class="code"|<<span class="keyword"|val>> client~_process : <<span class="code type"|<<a_api subproject="server" text="client_process_scope" | type Eliom_common.client_process_scope >>>>>><<div id="VALcomet_client_process" class="code"|<<span class="keyword"|val>> comet~_client~_process : <<span class="code type"|<<a_api subproject="server" text="client_process_scope" | type Eliom_common.client_process_scope >>>>>><<div id="VALrequest" class="code"|<<span class="keyword"|val>> request : <<span class="code type"|<<a_api subproject="server" text="request_scope" | type Eliom_common.request_scope >>>>>><<div id="VALcreate_scope_name" class="code"|<<span class="keyword"|val>> create~_scope~_name : <<span class="code type"|string -> <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >>>>>><<div id="VALlist_scope_names" class="code"|<<span class="keyword"|val>> list~_scope~_names : <<span class="code type"|unit -> <<a_api subproject="server" text="scope_name" | type Eliom_common.scope_name >> list>>>><<div class="code" id="TYPEcookie_scope"|<<span class="keyword"|type>> cookie~_scope = <<span class="code type"|[ `Client_process | `Session ]>> >>
<<div class="info"|~Eliom is using regular ~(browser~) cookies but can also use
    browser tab cookies ~(only if you are using a client side program~)\\
>>

<<div id="VALcookie_scope_of_user_scope" class="code"|<<span class="keyword"|val>> cookie~_scope~_of~_user~_scope : <<span class="code type"|[< <<a_api subproject="server" text="user_scope" | type Eliom_common.user_scope >> ] -> [> <<a_api subproject="server" text="cookie_scope" | type Eliom_common.cookie_scope >> ]>>>><<div class="info"|~It is possible to define data tables or service table for one
    ~(browser~) session~, for one tab~, or for one group of sessions~.\\
>>
<<div class="code" id="TYPEfullsessionname"|<<span class="keyword"|type>> fullsessionname = <<span class="code type"|<<a_api subproject="server" text="cookie_scope" | type Eliom_common.cookie_scope >> * string>> >>

<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Fullsessionname_Table" | module Eliom_common.Fullsessionname_Table >>: <<span class="code type"|Map.S>><<span class="code type"|{{{  }}} with type key = fullsessionname>>>><<div id="VALeliom_link_too_old" class="code"|<<span class="keyword"|val>> eliom~_link~_too~_old : <<span class="code type"|bool Polytables.key>>>><<div id="VALeliom_service_session_expired" class="code"|<<span class="keyword"|val>> eliom~_service~_session~_expired : <<span class="code type"|\\{{{   }}}(<<a_api subproject="server" text="fullsessionname" | type Eliom_common.fullsessionname >> list * <<a_api subproject="server" text="fullsessionname" | type Eliom_common.fullsessionname >> list)\\{{{   }}}  Polytables.key>>>><<div class="info"|~If present and true in request data~, it means that
    the previous coservice does not exist any more\\
>>
\\
~If present in request data~,  means that
    the service session cookies does not exist any more~.
    ~The string lists are the list of names of expired sessions\\
