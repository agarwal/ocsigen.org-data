=Module <<a_api_type | module Ocsigen_pervasives.String >> =
<<div class="code"|<<span class="keyword"|module>> String: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_pervasives.String >><<span class='code'|end>>>>
----
<<div class="code"|<<span class="keyword"|include>> String>>
<<div id="VALremove_spaces" class="code"|<<span class="keyword"|val>> remove~_spaces : <<span class="code type"|string -> int -> int -> string>>>><<div id="VALsep" class="code"|<<span class="keyword"|val>> sep : <<span class="code type"|char -> string -> string * string>>>><<div id="VALsplit" class="code"|<<span class="keyword"|val>> split : <<span class="code type"|?multisep:bool -> char -> string -> string list>>>><<div id="VALmake_cryptographic_safe" class="code"|<<span class="keyword"|val>> make~_cryptographic~_safe : <<span class="code type"|unit -> string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Table" | module Ocsigen_pervasives.String.Table >>: <<span class="code type"|Map.S>><<span class="code type"|{{{  }}} with type key = string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Set" | module Ocsigen_pervasives.String.Set >>: <<span class="code type"|Set.S>><<span class="code type"|{{{  }}} with type elt = string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Map" | module Ocsigen_pervasives.String.Map >>: <<span class="code type"|Map.S>><<span class="code type"|{{{  }}} with type key = string>>>>