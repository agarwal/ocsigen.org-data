=Module <<a_api_type subproject="server" | module Eliom_react.Up >> =
<<div class="code"|<<span class="keyword"|module>> Up: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_react.Up >><<span class='code'|end>>>>
----
<<div class="code" id="TYPEt"|<<span class="keyword"|type>> <<span class="code type"|'a>> t>>
<<div class="info"|~The type of events that~, while being "on the server"~, are triggered by
      clients~. ~On the server such an event is ~/primitive~/ ~(hence the <<span class='code'|create>>
      function~) whereas it is ~/effect~-full~/ on the client~.\\
>>

<<div id="VALto_react" class="code"|<<span class="keyword"|val>> to~_react : <<span class="code type"|'a <<a_api subproject="server" text="t" | type Eliom_react.Up.t >> -> 'a React.E.t>>>><<div class="info"|<<span class='code'|to~_react e>> injects the up events <<span class='code'|e>> into react events so that it can
      be manipulated as a standard event~.\\
>>
<<div id="VALcreate" class="code"|<<span class="keyword"|val>> create : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ('a, [ `WithoutSuffix ],\\{{{   }}}   [ `One of 'a <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >> ] <<a_api subproject="server" text="Eliom_parameters.param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> -> 'a <<a_api subproject="server" text="t" | type Eliom_react.Up.t >>>>>><<div class="info"|<<span class='code'|create param>> creates an ~Up event~.
      ~If <<span class='code'|~~name>> is present~, the coservice used to transmit the event will
      always have the same name~, even if the server is restarted~.
      <<span class='code'|~~scope>> describes the visibility of the event~. ~By default~, it is
      <<span class='code'|`~Global>> if it is called during initialisation~,
      <<span class='code'|`~Client~_process>> otherwise~.\\
>>
