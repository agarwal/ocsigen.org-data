=Module <<a_api_type subproject="server" | module Eliom_common >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_common: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_common >><<span class='code'|end>>>>~Low level functions for ~Eliom~, exceptions and types~.\\

----
<<div  id="EXCEPTIONEliom_404" class="code"|<<span class="keyword"|exception>> Eliom_404>>
<<div class="info"|~Page not found\\
>>
<<div  id="EXCEPTIONEliom_Wrong_parameter" class="code"|<<span class="keyword"|exception>> Eliom_Wrong_parameter>>
<<div class="info"|~Service called with wrong parameter names\\
>>
<<div  id="EXCEPTIONEliom_Session_expired" class="code"|<<span class="keyword"|exception>> Eliom_Session_expired>>
<<div  id="EXCEPTIONEliom_Typing_Error" class="code"|<<span class="keyword"|exception>> Eliom_Typing_Error <<span class="keyword"|of>> <<span class="code type"|(string * exn) list>>>>
<<div class="info"|~The service ~(~G~E~T or ~P~O~S~T~) parameters do not match expected type\\
>>
<<div  id="EXCEPTIONEliom_site_information_not_available" class="code"|<<span class="keyword"|exception>> Eliom_site_information_not_available <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div class="info"|~That function cannot be used when the site information is not available~,
    that is~, outside a request or the initialisation phase of your ~Eliom module
    ~(while reading the configuration file~)~.\\


    ~In particular~, you cannot use the function before the configuration file
    is read for example when you are using //static linking//~.
    ~In that case you must
    delay the function call using <<a_api subproject="server" | val Eliom_services.register_eliom_module >>~.\\
>>
<<div class="code" id="TYPEcookie_scope"|<<span class="keyword"|type>> cookie~_scope = <<span class="code type"|[ `Client_process | `Session ]>> >>
<<div class="info"|~Eliom is using regular ~(browser~) cookies but can also use
    browser tab cookies ~(only if you are using a client side program~)\\

~It is possible to define data tables or service table for one
    ~(browser~) session~, for one tab~, or for one group of sessions~.\\
>>

<<div class="code" id="TYPEuser_scope"|<<span class="keyword"|type>> user~_scope = <<span class="code type"|[ `Client_process | `Session | `Session_group ]>> >>

<<div class="code" id="TYPEscope"|<<span class="keyword"|type>> scope = <<span class="code type"|[ `Client_process | `Global | `Session | `Session_group ]>> >>

<<div id="VALcookie_scope_of_user_scope" class="code"|<<span class="keyword"|val>> cookie~_scope~_of~_user~_scope : <<span class="code type"|[< <<a_api subproject="server" text="user_scope" | type Eliom_common.user_scope >> ] -> [> <<a_api subproject="server" text="cookie_scope" | type Eliom_common.cookie_scope >> ]>>>><<div id="VALuser_scope_of_scope" class="code"|<<span class="keyword"|val>> user~_scope~_of~_scope : <<span class="code type"|[< <<a_api subproject="server" text="scope" | type Eliom_common.scope >> ] -> [> <<a_api subproject="server" text="user_scope" | type Eliom_common.user_scope >> ]>>>><<div class="code" id="TYPEfullsessionname"|<<span class="keyword"|type>> fullsessionname = <<span class="code type"|<<a_api subproject="server" text="cookie_scope" | type Eliom_common.cookie_scope >> * string>> >>

<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Fullsessionname_Table" | module Eliom_common.Fullsessionname_Table >>: <<span class="code type"|Map.S>><<span class="code type"|{{{  }}} with type key = fullsessionname>>>><<div id="VALeliom_link_too_old" class="code"|<<span class="keyword"|val>> eliom~_link~_too~_old : <<span class="code type"|bool Polytables.key>>>><<div class="info"|~If present and true in request data~, it means that
    the previous coservice does not exist any more\\
>>
<<div id="VALeliom_service_session_expired" class="code"|<<span class="keyword"|val>> eliom~_service~_session~_expired : <<span class="code type"|\\{{{   }}}(<<a_api subproject="server" text="fullsessionname" | type Eliom_common.fullsessionname >> list * <<a_api subproject="server" text="fullsessionname" | type Eliom_common.fullsessionname >> list)\\{{{   }}}  Polytables.key>>>><<div class="info"|~If present in request data~,  means that
    the service session cookies does not exist any more~.
    ~The string lists are the list of names of expired sessions\\
>>
