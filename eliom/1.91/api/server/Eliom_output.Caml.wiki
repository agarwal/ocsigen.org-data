=Module <<a_api_type subproject="server" | module Eliom_output.Caml >> =
<<div class="code"|<<span class="keyword"|module>> Caml: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_output.Caml >><<span class='code'|end>>>>~Allows to register services that send caml values~.
    ~Note that this kind of services are most of the time
    ~P~O~S~T coservices~, and ~G~E~T ~(co~)services are probably useless here~.\\

----
<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options = <<span class="code type"|unit>> >>

<<div id="VALregister" class="code"|<<span class="keyword"|val>> register : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="server" text="Eliom_services.internal_service_kind" | type Eliom_services.internal_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [ `Registrable ],\\{{{   }}}           'e <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}          <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'e Lwt.t) ->\\{{{   }}}  ('a -> 'b -> 'e Lwt.t) -> unit>>>><<div id="VALregister_service" class="code"|<<span class="keyword"|val>> register~_service : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  path:<<a_api subproject="server" text="Eliom_pervasives.Url.path" | type Eliom_pervasives.Url.path >> ->\\{{{   }}}  get_params:('a, [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'd Lwt.t) ->\\{{{   }}}  ('a -> unit -> 'd Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, unit, [> `Registrable ], 'd <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_coservice" class="code"|<<span class="keyword"|val>> register~_coservice : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:(unit, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Service ] ], [ `Get ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [ `WithoutSuffix ], unit, unit, [< <<a_api subproject="server" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}            'a <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}           <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  get_params:('b, [ `WithoutSuffix ], 'c) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'a Lwt.t) ->\\{{{   }}}  ('b -> unit -> 'a Lwt.t) ->\\{{{   }}}  ('b, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Get ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'c, unit, [> `Registrable ], 'a <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_coservice'" class="code"|<<span class="keyword"|val>> register~_coservice~' : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'c Lwt.t) ->\\{{{   }}}  ('a -> unit -> 'c Lwt.t) ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api subproject="server" text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ], 'c <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_post_service" class="code"|<<span class="keyword"|val>> register~_post~_service : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ],\\{{{   }}}            'd <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}           <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('e, [ `WithoutSuffix ], 'f) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'd Lwt.t) ->\\{{{   }}}  ('a -> 'e -> 'd Lwt.t) ->\\{{{   }}}  ('a, 'e,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [ `Coservice | `Service ] ], [> `Post ])\\{{{   }}}        <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'f, [> `Registrable ], 'd <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_post_coservice" class="code"|<<span class="keyword"|val>> register~_post~_coservice : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [< `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api subproject="server" text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ],\\{{{   }}}            'd <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}           <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('e, [ `WithoutSuffix ], 'f) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'd Lwt.t) ->\\{{{   }}}  ('a -> 'e -> 'd Lwt.t) ->\\{{{   }}}  ('a, 'e,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Post ]) <<a_api subproject="server" text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'f, [> `Registrable ], 'd <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>><<div id="VALregister_post_coservice'" class="code"|<<span class="keyword"|val>> register~_post~_coservice~' : <<span class="code type"|\\{{{   }}}?scope:<<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ->\\{{{   }}}  ?options:<<a_api subproject="server" text="options" | type Eliom_output.Caml.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  ?state_name:string ->\\{{{   }}}  ?secure_session:bool ->\\{{{   }}}  ?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_state_name:string ->\\{{{   }}}  ?csrf_scope:<<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:((string * exn) list -> 'c Lwt.t) ->\\{{{   }}}  (unit -> 'a -> 'c Lwt.t) ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api subproject="server" text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ], 'c <<a_api subproject="server" text="Eliom_parameters.caml" | type Eliom_parameters.caml >>)\\{{{   }}}  <<a_api subproject="server" text="Eliom_services.service" | type Eliom_services.service >>>>>>