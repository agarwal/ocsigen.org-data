=Module <<a_api_type | module Ocsigen_comet.Channels >> =
<<div class="code"|<<span class="keyword"|module>> Channels: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_comet.Channels >><<span class='code'|end>>>>
----
<<div  id="EXCEPTIONToo_many_virtual_channels" class="code"|<<span class="keyword"|exception>> Too_many_virtual_channels>>
<<div class="info"|~An exception that may be raised when trying to create a new channel while
      the channel count exceed <<span class='code'|max~_virtual~_channels>>~. ~Note that by default
      <<span class='code'|max~_virtual~_channels>> is set to <<span class='code'|~None>> so that the exception is never
      raised~.\\
>>
<<div  id="EXCEPTIONNon_unique_channel_name" class="code"|<<span class="keyword"|exception>> Non_unique_channel_name>>
<<div class="info"|~An exception raised when creating a channel with a name already associated
      to another channel~. ~It is strictly forbidden to name several channels with
      the same string~.\\
>>
<<div class="code" id="TYPEt"|<<span class="keyword"|type>> t>>
<<div class="info"|~The abstract type of server~-to~-client communication channels~.\\
>>

<<div class="code" id="TYPEchan_id"|<<span class="keyword"|type>> chan~_id = <<span class="code type"|string>> >>
<<div class="info"|~The type of channel identifier~. ~Channels are uniquely identified by there
      chan~_id value~.\\
>>

<<div id="VALcreate" class="code"|<<span class="keyword"|val>> create : <<span class="code type"|?name:string -> unit -> <<a_api text="t" | type Ocsigen_comet.Channels.t >>>>>><<div class="info"|<<span class='code'|create ~(~)>> returns a channel with a freshly baked identifier while
      <<span class='code'|create ~~name ~(~)>> returns a channel with the identifier <<span class='code'|name>> after
      checking for uniqueness~. ~If <<span class='code'|name>> is the identifier of an existing
      channel~, the exception <<span class='code'|~Non~_unique~_channel~_name>> is raised~.\\
>>
<<div id="VALwrite" class="code"|<<span class="keyword"|val>> write : <<span class="code type"|\\{{{   }}}<<a_api text="t" | type Ocsigen_comet.Channels.t >> ->\\{{{   }}}  string * <<a_api text="Ocsigen_stream.outcome" | type Ocsigen_stream.outcome >> Lwt.u option -> unit>>>><<div class="info"|<<span class='code'|write c ~(s~, u~)>> sends the string <<span class='code'|s>> on the channel <<span class='code'|c>>~. ~The argument <<span class='code'|u>>
      allow one to observe the result of the operation~. ~If <<span class='code'|u>> is <<span class='code'|~None>>~, there
      is no way to tell if the sending worked as expected~. ~However if <<span class='code'|u>> is
      <<span class='code'|~Some u~'>> then <<span class='code'|u~'>> will be woken up with the outcome ~(either <<span class='code'|`~Falure>> or
      <<span class='code'|`~Success>>~) of the stream writing process~.\\
>>
<<div id="VALlisteners" class="code"|<<span class="keyword"|val>> listeners : <<span class="code type"|<<a_api text="t" | type Ocsigen_comet.Channels.t >> -> int>>>><<div class="info"|<<span class='code'|listeners c>> returns the number of clients currently registered on <<span class='code'|c>>
      ~A client is "currently registered" on a channel if an actual
      connection is open for the server to push a message onto~. ~Note that this
      information is server~-based only~, and that because it is so~, some clients
      may still be registered as active while they have in fact closed the
      connection~. ~In such a case~, the outcome mechanism in <<span class='code'|write>> will report
      the failure~.\\
>>
<<div id="VALget_id" class="code"|<<span class="keyword"|val>> get~_id : <<span class="code type"|<<a_api text="t" | type Ocsigen_comet.Channels.t >> -> <<a_api text="chan_id" | type Ocsigen_comet.Channels.chan_id >>>>>><<div class="info"|<<span class='code'|get~_id c>> returns the unique identifier associated to <<span class='code'|c>>~. ~The client can
      register to <<span class='code'|c>> using the returned identifier~.\\
>>
