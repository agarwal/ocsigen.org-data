=Module <<a_api_type subproject="server" | module Eliom_openid >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_openid: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_openid >><<span class='code'|end>>>>~Open~I~D identification\\

----
\\
~This module implements the ~Relying ~Party of the ~Open~I~D specification~,
    in stateful mode~.\\
\\

=@@id="1_Librarydescription"@@~Library description=
\\
\\
~The library provides means to authenticate an user
    to a remote provider using the ~Open~I~D protocol~.
    ~Basically~, you need to ask the user its ~Open~I~D url~, and
    the fields you want to require ~(or none~, if you just want to
    authenticate an user~)~, along with other information~.\\


    ~The library uses an "hidden service" that is needed when the provider
    redirects back to your site~. ~This service is registered in the library~, all you have
    to do is to give a path for that service and a default handler
    ~(if the user connects to that service without being in an authentication process~.~)
    ~Here is a short example of how to use the library
    
<<code language='ocaml'|open Eliom_openid
let messages = Eliom_state.create_volatile_table ()
(* The login form *)
let login_form = Eliom_services.new_service
  ~path:["login-form"]
  ~get_params: Eliom_parameters.unit
  ()

(* Initialize the library, and getting the authenticate function *)
let authenticate = Eliom_openid.init ~path:["__openid_return_service"]
    ~f: (fun _ _ -> Eliom_output.Redirection.send login_form)

(* Create the handler for the form *)
(* We have to use Eliom_output.String_redirection as we
   redirect the user to her provider *)
let form_handler = Eliom_output.String_redirection.register_new_post_coservice
    ~fallback: login_form
    ~post_params: (Eliom_parameters.string "url")
    (fun _ url ->
       authenticate
    ~max_auth_age: 4 (* Requires that if the user logged in more that 4 seconds ago
                        he needs to relog in *)
    ~required: [Eliom_openid.Email] (* Requires his e-mail *)
    ~immediate: false
   url
   (fun result ->
     let string =
       match result with
         | Setup_needed -> "setup needed" | Canceled -> "canceled"
         | Result result ->
           try List.assoc Email result.fields with Not_found -> "No e-mail :("
     in
     Eliom_state.set_volatile_session_data ~table:messages string;
     Eliom_output.Redirection.send login_form))

open XHTML.M
let _ = Eliom_output.Xhtml.register
    ~service: login_form
    (fun _ _ ->
    (match Eliom_state.get_volatile_session_data ~table: messages () with
     | Eliom_state.Data s ->
       Eliom_state.discard () ~>>= fun () ->
       Lwt.return [p [pcdata ("Authentication result: "^ s)]]
     | _ -> Lwt.return []) ~>>= fun message ->
    let form =
    Eliom_output.Xhtml.post_form ~service:form_handler
      (fun url ->
        [p [pcdata "Your OpenID identifier: ";
            Eliom_output.Xhtml.string_input ~input_type:`Text ~name:url ();
            Eliom_output.Xhtml.string_input ~input_type:`Submit ~value:"Login" ();
           ]]) ()
    in
    Lwt.return
      (html
           (head (title (pcdata "A sample test")) [])
           (body
              (message @ [form]))))
>>
\\
\\

=@@id="1_Documentation"@@~Documentation=
\\
\\

==@@id="2_Miscallenous"@@~Miscallenous==
\\
<<div class="code" id="TYPEopenid_error"|<<span class="keyword"|type>> openid~_error = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Invalid_XRDS_File>> <<span class="keyword"|of>> <<span class="code type"|string * string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The provider ~X~R~D~S file was not valid|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Discovery_Error>> <<span class="keyword"|of>> <<span class="code type"|string * string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~An error occured during the discovery of the provider|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Missing_parameter>> <<span class="keyword"|of>> <<span class="code type"|string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The remote server forgot a parameter in its request|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Invalid_signature>> <<span class="keyword"|of>> <<span class="code type"|string * string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~We disagree with the server~'s signature|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Invalid_association>> <<span class="keyword"|of>> <<span class="code type"|string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~We were unable to associate with a provider|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Invalid_argument>> <<span class="keyword"|of>> <<span class="code type"|string * string * string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The argument provided were not set to a correct value|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Server_error>> <<span class="keyword"|of>> <<span class="code type"|string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The server threw an explicit error|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Invalid_answer>> <<span class="keyword"|of>> <<span class="code type"|string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The answer code was not correct|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Invalid_html_doc>> <<span class="keyword"|of>> <<span class="code type"|string>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~An error occured during the parsing of an user url in html format|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|>>
<<div class="info"|~Error that may happen when identifiying an user\\

~Prettyprint an ~Open~I~D ~Error\\
>>

<<div id="VALstring_of_openid_error" class="code"|<<span class="keyword"|val>> string~_of~_openid~_error : <<span class="code type"|<<a_api subproject="server" text="openid_error" | type Eliom_openid.openid_error >> -> string>>>><<div  id="EXCEPTIONError" class="code"|<<span class="keyword"|exception>> Error <<span class="keyword"|of>> <<span class="code type"|<<a_api subproject="server" text="openid_error" | type Eliom_openid.openid_error >>>>>>
<<div class="info"|~Exception thrown by this module~'s function~.\\
>>
<<div class="code" id="TYPEfield"|<<span class="keyword"|type>> field = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Email>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Fullname>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|DateOfBirth>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|PostCode>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Timezone>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Language>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Country>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Gender>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Nickname>>|>>
<<div class="info"|~A field you can request to the provider\\
>>

<<div class="code" id="TYPEextension"|<<span class="keyword"|type>> <<span class="code type"|'a>> extension = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@headers : <<span class="code type"|(string * string) list>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@parse : <<span class="code type"|(string * string) list -> 'a Lwt.t>>;|

}
>>
<<div class="info"|~An extension yielding values of type ~'a\\
>>

<<div id="VALsreg" class="code"|<<span class="keyword"|val>> sreg : <<span class="code type"|\\{{{   }}}?policy_url:string ->\\{{{   }}}  required:<<a_api subproject="server" text="field" | type Eliom_openid.field >> list ->\\{{{   }}}  optional:<<a_api subproject="server" text="field" | type Eliom_openid.field >> list ->\\{{{   }}}  unit -> (<<a_api subproject="server" text="field" | type Eliom_openid.field >> * string) list <<a_api subproject="server" text="extension" | type Eliom_openid.extension >>>>>><<div class="info"|~The ~S~R~E~G extension\\
**See also** [[http://openid.net/specs/openid-simple-registration-extension-1_1-01.html|~S~R~E~G]]\\
>>
<<div id="VALax" class="code"|<<span class="keyword"|val>> ax : <<span class="code type"|\\{{{   }}}required:<<a_api subproject="server" text="field" | type Eliom_openid.field >> list ->\\{{{   }}}  optional:<<a_api subproject="server" text="field" | type Eliom_openid.field >> list ->\\{{{   }}}  unit -> (<<a_api subproject="server" text="field" | type Eliom_openid.field >> * string) list <<a_api subproject="server" text="extension" | type Eliom_openid.extension >>>>>><<div class="info"|~The ~A~X extension\\
**See also** [[http://openid.net/specs/openid-attribute-exchange-1_0.html|~A~X]]\\
>>
<<div class="code" id="TYPEpape"|<<span class="keyword"|type>> pape = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@auth_time : <<span class="code type"|string option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The time at which the user last logged in|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@policies : <<span class="code type"|string list option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~A list of policies ~(url~) describing your usage of the data|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@nist_level : <<span class="code type"|int option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The nist level|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|

}
>>
<<div class="info"|~The pape data returned by the server\\
>>

<<div id="VALpape" class="code"|<<span class="keyword"|val>> pape : <<span class="code type"|\\{{{   }}}?max_auth_age:int ->\\{{{   }}}  ?auth_policies:string list ->\\{{{   }}}  unit -> <<a_api subproject="server" text="pape" | type Eliom_openid.pape >> <<a_api subproject="server" text="extension" | type Eliom_openid.extension >>>>>><<div class="info"|~The ~P~A~P~E extension~.\\
**See also** [[http://openid.net/specs/openid-provider-authentication-policy-extension-1_0-01.html|~P~A~P~E]]\\
>>
<<div id="VAL( *** )" class="code"|<<span class="keyword"|val>> ~( ~*~*~* ~) : <<span class="code type"|\\{{{   }}}'a <<a_api subproject="server" text="extension" | type Eliom_openid.extension >> ->\\{{{   }}}  'b <<a_api subproject="server" text="extension" | type Eliom_openid.extension >> -> ('a * 'b) <<a_api subproject="server" text="extension" | type Eliom_openid.extension >>>>>><<div class="info"|~Product of two extension\\
>>
<<div class="code" id="TYPEauthentication_result"|<<span class="keyword"|type>> <<span class="code type"|'a>> authentication~_result = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Canceled>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The user canceled the login ~(or failed~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Setup_needed>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The provider has not enough information to complete an immediate
                     request~. ~Only returned when using an immediate authentication~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Result>> <<span class="keyword"|of>> <<span class="code type"|'a>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~All went ok~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|>>
<<div class="info"|~The result of an authentication~.\\
>>

\\

==@@id="2_Lowlevelinterface"@@~Low~-level interface~.==
\\
<<div id="VALperform_discovery" class="code"|<<span class="keyword"|val>> perform~_discovery : <<span class="code type"|string -> (string * string option) Lwt.t>>>><<div class="info"|~Perform discovery on an user~-supplied url\\
>>
<<div class="code"|<<span class="keyword"|module type>> <<a_api subproject="server" text="HiddenServiceInfo" | module type Eliom_openid.HiddenServiceInfo >> = <<span class='code'|sig>><<a_api subproject="server" text=".." | module type Eliom_openid.HiddenServiceInfo >><<span class='code'|end>>>><<div class="info"|~Information about the hidden service
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api subproject="server" text="Make" | module Eliom_openid.Make >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~S>><<span class='code'| ~: >><<span class="code type"|<<a_api subproject="server" text="HiddenServiceInfo" | module Eliom_openid.HiddenServiceInfo >>>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_openid.Make >><<span class='code'|end>>>>>>\\

==@@id="2_Highlevelinterface"@@~High~-level interface==
\\
\\
~The high~-level interface takes care of creating
    the extension you want~, without to use them directly~.
    ~It yields a <<span class='code'|result>>~.\\
<<div class="code" id="TYPEresult"|<<span class="keyword"|type>> result = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@fields : <<span class="code type"|(<<a_api subproject="server" text="field" | type Eliom_openid.field >> * string) list>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The fields you requested|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@pape : <<span class="code type"|<<a_api subproject="server" text="pape" | type Eliom_openid.pape >>>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The pape information|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|

}
>>
<<div class="info"|~The result yielded by the authentication process\\
>>

<<div class="code" id="TYPEcheck_fun"|<<span class="keyword"|type>> check~_fun = <<span class="code type"|\\{{{   }}}?immediate:bool ->\\{{{   }}}  ?policy_url:string ->\\{{{   }}}  ?max_auth_age:int ->\\{{{   }}}  ?auth_policies:string list ->\\{{{   }}}  ?required:<<a_api subproject="server" text="field" | type Eliom_openid.field >> list ->\\{{{   }}}  ?optional:<<a_api subproject="server" text="field" | type Eliom_openid.field >> list ->\\{{{   }}}  string ->\\{{{   }}}  (<<a_api subproject="server" text="result" | type Eliom_openid.result >> <<a_api subproject="server" text="authentication_result" | type Eliom_openid.authentication_result >> ->\\{{{   }}}   Eliom_output.Any.page Lwt.t) ->\\{{{   }}}  XHTML.M.uri Lwt.t>> >>
<<div class="info"|~The type of the authenticate function~.* immediate~: whether to use immediate identification or not ~(default~: true~)
* policy~_url~: an optional policy url to describe what you do with the data ~(sreg~) ~(default~:none~)
* required~: optional fields you really need ~(although the provier may not provide them~) ~(default~:empty~)
* optional~: optional fields you don~'t really need ~(default~: empty~)
* max~_auth~_age~: ~Requires that the user logged in less than <<span class='code'|n>> seconds ago~. ~(default~: up to the provider~)
* auth~_policies~: ~A list of url describing your policies regarding the data ~(default~: empty~)
* the url the user gave you
* an handler~, that~'ll be called after checking the parameters with the result
      and the server params of the ~G~E~T request~. ~You can send whatever page you want
      but you should redirect the user to a page so he can~'t bookmark it~, or
      send some piece of html to interface with javascript~.

\\
>>

<<div id="VALinit" class="code"|<<span class="keyword"|val>> init : <<span class="code type"|\\{{{   }}}path:string list ->\\{{{   }}}  f:((string * string) list -> unit -> Eliom_output.Any.page Lwt.t) ->\\{{{   }}}  <<a_api subproject="server" text="check_fun" | type Eliom_openid.check_fun >>>>>><<div class="info"|~Init the ~Open~I~D for your site~.
    ~Takes a path and a handler for the hidden service\\
>>
