=Functor <<a_api_type subproject="client" | module Eliom_mkforms.MakeForms >> =
<<div class="code"|<<span class="keyword"|module>> MakeForms: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Pages>><<span class='code'| ~: >><<span class="code type"|<<a_api subproject="client" text="FORMS_PARAM" | module Eliom_mkforms.FORMS_PARAM >>>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_mkforms.MakeForms >><<span class='code'|end>>>>>><<div class="module_param_list" | <<span class="param_title" |Parameters :>><<div|
|@@class="paramstable"@ @class="centertop fifteen code"@@{{{Pages}}}|@@class="centertop"@@:|<<span class="code type"|<<a_api subproject="client" text="FORMS_PARAM" | module Eliom_mkforms.FORMS_PARAM >>>>|
>>>>

----
\\

==@@id="2_Linksandforms"@@~Links and forms==
\\
<<div id="VALmake_string_uri" class="code"|<<span class="keyword"|val>> make~_string~_uri : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, unit, [< <<a_api subproject="client" text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'b, unit, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'c)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set -> 'a -> string>>>><<div class="info"|~Creates the string corresponding to the relative ~U~R~L of a service applied to
    its ~G~E~T parameters~.\\


    ~If <<span class='code'|absolute>> is set to <<span class='code'|true>>~, or if there is a protocol change~,
    the ~U~R~L will be absolute~.\\


    ~If <<span class='code'|absolute~_path>> is set to <<span class='code'|true>>~, and <<span class='code'|absolute>> is <<span class='code'|false>>~,
    the ~U~R~L will be absolute~, but without <<span class='code'|protocol~:~/~/server~:port>>~.\\


    ~Default hostname is determined from the <<span class='code'|~Host>> http header of the request
    ~(or the attribute of ~<host~> tag in
    configuration file if the option <<span class='code'|~<usedefaulthostname~/~>>> is set~)~.
    ~Default port is the current port ~(or another port of the server if
    you are switching from or to https~)~.
    ~But you can choose the hostname or port you want by setting
    the optional <<span class='code'|~?hostname>> and <<span class='code'|~?port>> parameters here~.\\
>>
<<div id="VALmake_uri" class="code"|<<span class="keyword"|val>> make~_uri : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, unit, [< <<a_api subproject="client" text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'b, unit, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'c)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set -> 'a -> Pages.uri>>>><<div class="info"|~Creates the ~U~R~L for a service~.
    ~Like the <<span class='code'|a>> function~, it may take extra parameters~.\\
>>
<<div id="VALmake_uri_components" class="code"|<<span class="keyword"|val>> make~_uri~_components : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, unit, [< <<a_api subproject="client" text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'b, unit, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'c)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  'a -> string * (string * string) list * string option>>>><<div class="info"|~Creates the ~U~R~L for a service~.
    ~Returns the path ~(as a string~, encoded~)~,
    the association list of get parameters ~(not encoded~)~,
    and the fragment ~(not encoded~, if any~)~.
    ~Like the <<span class='code'|a>> function~, it may take extra parameters~.\\
>>
<<div id="VALmake_post_uri_components" class="code"|<<span class="keyword"|val>> make~_post~_uri~_components : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.post_service_kind" | type Eliom_services.post_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  'a ->\\{{{   }}}  'b ->\\{{{   }}}  string * (string * string) list * string option * (string * string) list>>>><<div class="info"|~Like <<span class='code'|make~_uri~_components>>~, but also creates a table of post parameters~.\\
>>
<<div id="VALa" class="code"|<<span class="keyword"|val>> a : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?a:Pages.a_attrib_t ->\\{{{   }}}  service:('a, unit, [< <<a_api subproject="client" text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'b, unit, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'c)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  ?no_appl:bool -> 'd Pages.a_content_elt_list -> 'a -> 'd Pages.a_elt>>>><<div class="info"|<<span class='code'|a service cont ~(~)>> creates a link to <<span class='code'|service>>~.
    ~The text of
    the link is <<span class='code'|cont>>~. ~For example <<span class='code'|cont>> may be something like
    <<span class='code'|~[pcdata "click here"~]>>~.\\


    ~The last  parameter is for ~G~E~T parameters~.
    ~For example <<span class='code'|a service cont ~(~4~2~,"hello"~)>>\\


    ~The <<span class='code'|~~a>> optional parameter is used for extra attributes~.\\


    ~The <<span class='code'|~~fragment>> optional parameter is used for the "fragment" part
    of the ~U~R~L~, that is~, the part after character "~#"~.\\


    ~When possible~, all links generated by ~Eliom are relative~, for example
    to make easier the use with reverse proxies~.
    ~But in case of protocol change ~(if you want to switch to https using
    <<span class='code'|~~https~:true>> for example~, or if the service imposes https~)~,
    absolute links will be generated~.
    ~In that case~,
    default hostname is determined from the <<span class='code'|~Host>> http header of the request
    ~(or the attribute of ~<host~> tag in
    configuration file if the option <<span class='code'|~<usedefaulthostname~/~>>> is set~)~.
    ~Default port is the current port ~(or another port of the server if
    you are switching from or to https~)~.
    ~But you can choose the hostname or port you want by setting
    the optional <<span class='code'|~?hostname>> and <<span class='code'|~?port>> parameters here~.
    ~These options have no effect for relative links~.\\


    ~You can add non~-localized parameters using the optional parameter
    <<span class='code'|nl~_params>>~. ~See <<span class='code'|~Eliom~_parameters~.nl~_params~_set>>~.\\


    ~If <<span class='code'|~~keep~_nl~_params>> is <<span class='code'|`~Persistent>> ~(resp~. <<span class='code'|`~All>>~)~,
    persistent ~(resp all~) non localized ~G~E~T parameters
    will be kept in the ~U~R~L ~(default is the default for the service~)~.\\


    ~If a client side application is running~, and unless
    <<span class='code'|~~no~_appl~:true>> is specified~, it will use <<span class='code'|~<a onclick~=~.~.~.~>>>
    instead of <<span class='code'|~<a href~=~.~.~.~>>> to send process cookies~.
    ~Thus~, if the destination service belongs to the same application~,
    the client side process will not be stopped when the link is clicked~.\\
>>
<<div id="VALcss_link" class="code"|<<span class="keyword"|val>> css~_link : <<span class="code type"|?a:Pages.link_attrib_t -> uri:Pages.uri -> unit -> Pages.link_elt>>>><<div class="info"|~Creates a <<span class='code'|~<link~>>> tag for a ~Cascading ~Style~Sheet ~(~C~S~S~)~.\\
>>
<<div id="VALjs_script" class="code"|<<span class="keyword"|val>> js~_script : <<span class="code type"|?a:Pages.script_attrib_t -> uri:Pages.uri -> unit -> Pages.script_elt>>>><<div class="info"|~Creates a <<span class='code'|~<script~>>> tag to add a javascript file\\
>>
<<div id="VALget_form" class="code"|<<span class="keyword"|val>> get~_form : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?a:Pages.form_attrib_t ->\\{{{   }}}  service:('a, unit, [< <<a_api subproject="client" text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'b, 'c, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'd)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  ?no_appl:bool -> ('b -> Pages.form_content_elt_list) -> Pages.form_elt>>>><<div id="VALlwt_get_form" class="code"|<<span class="keyword"|val>> lwt~_get~_form : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?a:Pages.form_attrib_t ->\\{{{   }}}  service:('a, unit, [< <<a_api subproject="client" text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'b, 'c, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'd)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  ?no_appl:bool ->\\{{{   }}}  ('b -> Pages.form_content_elt_list Lwt.t) -> Pages.form_elt Lwt.t>>>><<div class="info"|~The same but taking a cooperative function~.\\
>>
<<div id="VALpost_form" class="code"|<<span class="keyword"|val>> post~_form : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?a:Pages.form_attrib_t ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.post_service_kind" | type Eliom_services.post_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  ?no_appl:bool -> ('d -> Pages.form_content_elt_list) -> 'a -> Pages.form_elt>>>><<div class="info"|<<span class='code'|post~_form service formgen>> creates a ~P~O~S~T form to <<span class='code'|service>>~.
    ~The last parameter is for ~G~E~T parameters ~(as in the function <<span class='code'|a>>~)~.\\


    ~If <<span class='code'|~~keep~_nl~_params>> is <<span class='code'|`~Persistent>> ~(resp~. <<span class='code'|`~All>>~)~,
    persistent ~(resp all~) non localized ~G~E~T parameters
    will be kept in the ~U~R~L ~(default is the default for the
    service~)~.\\
>>
<<div id="VALlwt_post_form" class="code"|<<span class="keyword"|val>> lwt~_post~_form : <<span class="code type"|\\{{{   }}}?absolute:bool ->\\{{{   }}}  ?absolute_path:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?a:Pages.form_attrib_t ->\\{{{   }}}  service:('a, 'b, [< <<a_api subproject="client" text="Eliom_services.post_service_kind" | type Eliom_services.post_service_kind >> ],\\{{{   }}}           [< <<a_api subproject="client" text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [< <<a_api subproject="client" text="Eliom_services.registrable" | type Eliom_services.registrable >> ],\\{{{   }}}           'e)\\{{{   }}}          <<a_api subproject="client" text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?hostname:string ->\\{{{   }}}  ?port:int ->\\{{{   }}}  ?fragment:string ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?nl_params:Eliom_parameters.nl_params_set ->\\{{{   }}}  ?no_appl:bool ->\\{{{   }}}  ('d -> Pages.form_content_elt_list Lwt.t) -> 'a -> Pages.form_elt Lwt.t>>>><<div class="info"|~The same but taking a cooperative function~.\\
>>
\\

==@@id="2_Formwidgets"@@~Form widgets==
\\
<<div id="VALint_input" class="code"|<<span class="keyword"|val>> int~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:[< int Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:int -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for an integer\\
>>
<<div id="VALint32_input" class="code"|<<span class="keyword"|val>> int~3~2~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:[< int32 Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:int32 -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for an integer\\
>>
<<div id="VALint64_input" class="code"|<<span class="keyword"|val>> int~6~4~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:[< int64 Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:int64 -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for an integer\\
>>
<<div id="VALfloat_input" class="code"|<<span class="keyword"|val>> float~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:[< float Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:float -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for a float\\
>>
<<div id="VALstring_input" class="code"|<<span class="keyword"|val>> string~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:[< string Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:string -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for a string\\
>>
<<div id="VALuser_type_input" class="code"|<<span class="keyword"|val>> user~_type~_input : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:[< 'a Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:'a -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for a user type\\
>>
<<div id="VALraw_input" class="code"|<<span class="keyword"|val>> raw~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  input_type:Pages.input_type_t ->\\{{{   }}}  ?name:string -> ?value:string -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an untyped <<span class='code'|~<input~>>> tag~. ~You may use the name you want
    ~(for example to use with <<span class='code'|~Eliom~_parameters~.any>>~)~.\\
>>
<<div id="VALfile_input" class="code"|<<span class="keyword"|val>> file~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< <<a_api subproject="client" text="Eliom_pervasives.file_info" | type Eliom_pervasives.file_info >> Eliom_parameters.setoneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input~>>> tag for sending a file\\
>>
<<div id="VALimage_input" class="code"|<<span class="keyword"|val>> image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< Eliom_parameters.coordinates Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~."~>>> tag that sends the coordinates
    the user clicked on\\
>>
<<div id="VALint_image_input" class="code"|<<span class="keyword"|val>> int~_image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< (int * Eliom_parameters.coordinates) Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  value:int -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and a value of type int\\
>>
<<div id="VALint32_image_input" class="code"|<<span class="keyword"|val>> int~3~2~_image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< (int32 * Eliom_parameters.coordinates) Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  value:int32 -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and a value of type int~3~2\\
>>
<<div id="VALint64_image_input" class="code"|<<span class="keyword"|val>> int~6~4~_image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< (int64 * Eliom_parameters.coordinates) Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  value:int64 -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and a value of type int~6~4\\
>>
<<div id="VALfloat_image_input" class="code"|<<span class="keyword"|val>> float~_image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< (float * Eliom_parameters.coordinates) Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  value:float -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and a value of type float\\
>>
<<div id="VALstring_image_input" class="code"|<<span class="keyword"|val>> string~_image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< (string * Eliom_parameters.coordinates) Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  value:string -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and a value of type string\\
>>
<<div id="VALuser_type_image_input" class="code"|<<span class="keyword"|val>> user~_type~_image~_input : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.input_attrib_t ->\\{{{   }}}  name:[< ('a * Eliom_parameters.coordinates) Eliom_parameters.oneradio ]\\{{{   }}}       Eliom_parameters.param_name ->\\{{{   }}}  value:'a -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and a value of user defined type\\
>>
<<div id="VALraw_image_input" class="code"|<<span class="keyword"|val>> raw~_image~_input : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  name:string -> value:string -> ?src:Pages.uri -> unit -> Pages.input_elt>>>><<div class="info"|~Creates an <<span class='code'|~<input type~="image" name~="~.~.~." value~="~.~.~."~>>> tag that sends
    the coordinates the user clicked on and an untyped value\\
>>
<<div id="VALbool_checkbox" class="code"|<<span class="keyword"|val>> bool~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `One of bool ] Eliom_parameters.param_name -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have a boolean value~.
    ~The service must declare a <<span class='code'|bool>> parameter~.\\
>>
<<div id="VALint_checkbox" class="code"|<<span class="keyword"|val>> int~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Set of int ] Eliom_parameters.param_name ->\\{{{   }}}  value:int -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have an int value~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|set>>~.\\
>>
<<div id="VALint32_checkbox" class="code"|<<span class="keyword"|val>> int~3~2~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Set of int32 ] Eliom_parameters.param_name ->\\{{{   }}}  value:int32 -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have an int~3~2 value~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|set>>~.\\
>>
<<div id="VALint64_checkbox" class="code"|<<span class="keyword"|val>> int~6~4~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Set of int64 ] Eliom_parameters.param_name ->\\{{{   }}}  value:int64 -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have an int~6~4 value~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|set>>~.\\
>>
<<div id="VALfloat_checkbox" class="code"|<<span class="keyword"|val>> float~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Set of float ] Eliom_parameters.param_name ->\\{{{   }}}  value:float -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have a float value~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|set>>~.\\
>>
<<div id="VALstring_checkbox" class="code"|<<span class="keyword"|val>> string~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Set of string ] Eliom_parameters.param_name ->\\{{{   }}}  value:string -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have a string value~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|set>>~.\\
>>
<<div id="VALuser_type_checkbox" class="code"|<<span class="keyword"|val>> user~_type~_checkbox : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Set of 'a ] Eliom_parameters.param_name ->\\{{{   }}}  value:'a -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag that will have a "user type" value~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|set>>~.\\
>>
<<div id="VALraw_checkbox" class="code"|<<span class="keyword"|val>> raw~_checkbox : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool -> name:string -> value:string -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a checkbox <<span class='code'|~<input~>>> tag with untyped content~.
    ~Thus you can do several checkboxes with the same name
    ~(and different values~)~.
    ~The service must declare a parameter of type <<span class='code'|any>>~.\\
>>
<<div id="VALstring_radio" class="code"|<<span class="keyword"|val>> string~_radio : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Radio of string ] Eliom_parameters.param_name ->\\{{{   }}}  value:string -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with string content\\
>>
<<div id="VALint_radio" class="code"|<<span class="keyword"|val>> int~_radio : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Radio of int ] Eliom_parameters.param_name ->\\{{{   }}}  value:int -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with int content\\
>>
<<div id="VALint32_radio" class="code"|<<span class="keyword"|val>> int~3~2~_radio : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Radio of int32 ] Eliom_parameters.param_name ->\\{{{   }}}  value:int32 -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with int~3~2 content\\
>>
<<div id="VALint64_radio" class="code"|<<span class="keyword"|val>> int~6~4~_radio : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Radio of int64 ] Eliom_parameters.param_name ->\\{{{   }}}  value:int64 -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with int~6~4 content\\
>>
<<div id="VALfloat_radio" class="code"|<<span class="keyword"|val>> float~_radio : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Radio of float ] Eliom_parameters.param_name ->\\{{{   }}}  value:float -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with float content\\
>>
<<div id="VALuser_type_radio" class="code"|<<span class="keyword"|val>> user~_type~_radio : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool ->\\{{{   }}}  name:[ `Radio of 'a ] Eliom_parameters.param_name ->\\{{{   }}}  value:'a -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with user~_type content\\
>>
<<div id="VALraw_radio" class="code"|<<span class="keyword"|val>> raw~_radio : <<span class="code type"|\\{{{   }}}?a:Pages.input_attrib_t ->\\{{{   }}}  ?checked:bool -> name:string -> value:string -> unit -> Pages.input_elt>>>><<div class="info"|~Creates a radio <<span class='code'|~<input~>>> tag with untyped string content ~(low level~)\\
>>
<<div id="VALstring_button" class="code"|<<span class="keyword"|val>> string~_button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  name:[< string Eliom_parameters.setone ] Eliom_parameters.param_name ->\\{{{   }}}  value:string -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with string content\\
>>
<<div id="VALint_button" class="code"|<<span class="keyword"|val>> int~_button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  name:[< int Eliom_parameters.setone ] Eliom_parameters.param_name ->\\{{{   }}}  value:int -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with int content\\
>>
<<div id="VALint32_button" class="code"|<<span class="keyword"|val>> int~3~2~_button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  name:[< int32 Eliom_parameters.setone ] Eliom_parameters.param_name ->\\{{{   }}}  value:int32 -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with int~3~2 content\\
>>
<<div id="VALint64_button" class="code"|<<span class="keyword"|val>> int~6~4~_button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  name:[< int64 Eliom_parameters.setone ] Eliom_parameters.param_name ->\\{{{   }}}  value:int64 -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with int~6~4 content\\
>>
<<div id="VALfloat_button" class="code"|<<span class="keyword"|val>> float~_button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  name:[< float Eliom_parameters.setone ] Eliom_parameters.param_name ->\\{{{   }}}  value:float -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with float content\\
>>
<<div id="VALuser_type_button" class="code"|<<span class="keyword"|val>> user~_type~_button : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.button_attrib_t ->\\{{{   }}}  name:[< 'a Eliom_parameters.setone ] Eliom_parameters.param_name ->\\{{{   }}}  value:'a -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with user~_type content\\
>>
<<div id="VALraw_button" class="code"|<<span class="keyword"|val>> raw~_button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  button_type:Pages.button_type_t ->\\{{{   }}}  name:string ->\\{{{   }}}  value:string -> Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with untyped string content\\
>>
<<div id="VALbutton" class="code"|<<span class="keyword"|val>> button : <<span class="code type"|\\{{{   }}}?a:Pages.button_attrib_t ->\\{{{   }}}  button_type:Pages.button_type_t ->\\{{{   }}}  Pages.button_content_elt_list -> Pages.button_elt>>>><<div class="info"|~Creates a <<span class='code'|~<button~>>> tag with no value~. ~No value is sent~.\\
>>
<<div id="VALtextarea" class="code"|<<span class="keyword"|val>> textarea : <<span class="code type"|\\{{{   }}}?a:Pages.textarea_attrib_t ->\\{{{   }}}  name:[< string Eliom_parameters.setoneradio ] Eliom_parameters.param_name ->\\{{{   }}}  ?value:string -> rows:int -> cols:int -> unit -> Pages.textarea_elt>>>><<div class="info"|~Creates a <<span class='code'|~<textarea~>>> tag\\
>>
<<div id="VALraw_textarea" class="code"|<<span class="keyword"|val>> raw~_textarea : <<span class="code type"|\\{{{   }}}?a:Pages.textarea_attrib_t ->\\{{{   }}}  name:string ->\\{{{   }}}  ?value:string -> rows:int -> cols:int -> unit -> Pages.textarea_elt>>>><<div class="info"|~Creates a <<span class='code'|~<textarea~>>> tag for untyped form\\
>>
<<div class="code" id="TYPEsoption"|<<span class="keyword"|type>> <<span class="code type"|'a>> soption = <<span class="code type"|Pages.option_attrib_t * 'a * Pages.pcdata_elt option * bool>> >>

<<div class="code" id="TYPEselect_opt"|<<span class="keyword"|type>> <<span class="code type"|'a>> select~_opt = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Optgroup>> <<span class="keyword"|of>> <<span class="code type"|\\{{{   }}}Pages.optgroup_attrib_t * string * 'a <<a_api subproject="client" text="soption" | type Eliom_mkforms.MakeForms.soption >>\\{{{   }}}   * 'a <<a_api subproject="client" text="soption" | type Eliom_mkforms.MakeForms.soption >> list>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Option>> <<span class="keyword"|of>> <<span class="code type"|'a <<a_api subproject="client" text="soption" | type Eliom_mkforms.MakeForms.soption >>>>|>>
<<div class="info"|~The type for <<span class='code'|~<select~>>> options and groups of options~.* ~The field of type ~'a in <<span class='code'|soption>> is the value that will be sent
    by the form~.
* ~If the <<span class='code'|pcdata~_elt option>> is not present it is also the
    value displayed~.
* ~The string in <<span class='code'|select~_opt>> is the label

\\
>>

<<div id="VALint_select" class="code"|<<span class="keyword"|val>> int~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `One of int ] Eliom_parameters.param_name ->\\{{{   }}}  int <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  int <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for int values~.\\
>>
<<div id="VALint32_select" class="code"|<<span class="keyword"|val>> int~3~2~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `One of int32 ] Eliom_parameters.param_name ->\\{{{   }}}  int32 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  int32 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for int~3~2 values~.\\
>>
<<div id="VALint64_select" class="code"|<<span class="keyword"|val>> int~6~4~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `One of int64 ] Eliom_parameters.param_name ->\\{{{   }}}  int64 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  int64 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for int~6~4 values~.\\
>>
<<div id="VALfloat_select" class="code"|<<span class="keyword"|val>> float~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `One of float ] Eliom_parameters.param_name ->\\{{{   }}}  float <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  float <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for float values~.\\
>>
<<div id="VALstring_select" class="code"|<<span class="keyword"|val>> string~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `One of string ] Eliom_parameters.param_name ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for string values~.\\
>>
<<div id="VALuser_type_select" class="code"|<<span class="keyword"|val>> user~_type~_select : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `One of 'a ] Eliom_parameters.param_name ->\\{{{   }}}  'a <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  'a <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for user type values~.\\
>>
<<div id="VALraw_select" class="code"|<<span class="keyword"|val>> raw~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:string ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for any ~(untyped~) value~.\\
>>
<<div id="VALint_multiple_select" class="code"|<<span class="keyword"|val>> int~_multiple~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `Set of int ] Eliom_parameters.param_name ->\\{{{   }}}  int <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  int <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for int values~.\\
>>
<<div id="VALint32_multiple_select" class="code"|<<span class="keyword"|val>> int~3~2~_multiple~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `Set of int32 ] Eliom_parameters.param_name ->\\{{{   }}}  int32 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  int32 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for int~3~2 values~.\\
>>
<<div id="VALint64_multiple_select" class="code"|<<span class="keyword"|val>> int~6~4~_multiple~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `Set of int64 ] Eliom_parameters.param_name ->\\{{{   }}}  int64 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  int64 <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for int~6~4 values~.\\
>>
<<div id="VALfloat_multiple_select" class="code"|<<span class="keyword"|val>> float~_multiple~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `Set of float ] Eliom_parameters.param_name ->\\{{{   }}}  float <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  float <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for float values~.\\
>>
<<div id="VALstring_multiple_select" class="code"|<<span class="keyword"|val>> string~_multiple~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `Set of string ] Eliom_parameters.param_name ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for string values~.\\
>>
<<div id="VALuser_type_multiple_select" class="code"|<<span class="keyword"|val>> user~_type~_multiple~_select : <<span class="code type"|\\{{{   }}}('a -> string) ->\\{{{   }}}  ?a:Pages.select_attrib_t ->\\{{{   }}}  name:[< `Set of 'a ] Eliom_parameters.param_name ->\\{{{   }}}  'a <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  'a <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for user type values~.\\
>>
<<div id="VALraw_multiple_select" class="code"|<<span class="keyword"|val>> raw~_multiple~_select : <<span class="code type"|\\{{{   }}}?a:Pages.select_attrib_t ->\\{{{   }}}  name:string ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> ->\\{{{   }}}  string <<a_api subproject="client" text="select_opt" | type Eliom_mkforms.MakeForms.select_opt >> list -> Pages.select_elt>>>><<div class="info"|~Creates a <<span class='code'|~<select~>>> tag for any ~(untyped~) value~.\\
>>
