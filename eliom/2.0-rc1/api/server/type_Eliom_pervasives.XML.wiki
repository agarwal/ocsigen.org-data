<<code language="ocaml" | sig
  type aname = string
  type separator = Space | Comma
  type attrib
  type acontent = private
      AFloat of Eliom_pervasives.XML.aname * float
    | AInt of Eliom_pervasives.XML.aname * int
    | AStr of Eliom_pervasives.XML.aname * string
    | AStrL of Eliom_pervasives.XML.separator * Eliom_pervasives.XML.aname *
        string list
  val acontent : Eliom_pervasives.XML.attrib -> Eliom_pervasives.XML.acontent
  val aname : Eliom_pervasives.XML.attrib -> Eliom_pervasives.XML.aname
  type caml_event
  type event
  val event_of_string : string -> Eliom_pervasives.XML.event
  val string_of_event : Eliom_pervasives.XML.event -> string
  val event_of_js :
    int64 -> Eliom_pervasives.poly -> Eliom_pervasives.XML.event
  val event_of_service :
    [ `A | `Form_get | `Form_post ] ->
    (bool * Eliom_pervasives.Url.path) option -> Eliom_pervasives.XML.event
  type racontent =
      RA of Eliom_pervasives.XML.acontent
    | RACamlEvent of
        (Eliom_pervasives.XML.aname * Eliom_pervasives.XML.caml_event)
  val racontent :
    Eliom_pervasives.XML.attrib -> Eliom_pervasives.XML.racontent
  val float_attrib :
    Eliom_pervasives.XML.aname -> float -> Eliom_pervasives.XML.attrib
  val int_attrib :
    Eliom_pervasives.XML.aname -> int -> Eliom_pervasives.XML.attrib
  val string_attrib :
    Eliom_pervasives.XML.aname -> string -> Eliom_pervasives.XML.attrib
  val space_sep_attrib :
    Eliom_pervasives.XML.aname -> string list -> Eliom_pervasives.XML.attrib
  val comma_sep_attrib :
    Eliom_pervasives.XML.aname -> string list -> Eliom_pervasives.XML.attrib
  val event_attrib :
    Eliom_pervasives.XML.aname ->
    Eliom_pervasives.XML.event -> Eliom_pervasives.XML.attrib
  type elt
  type ename = string
  type econtent = private
      Empty
    | Comment of string
    | EncodedPCDATA of string
    | PCDATA of string
    | Entity of string
    | Leaf of Eliom_pervasives.XML.ename * Eliom_pervasives.XML.attrib list
    | Node of Eliom_pervasives.XML.ename * Eliom_pervasives.XML.attrib list *
        Eliom_pervasives.XML.elt list
  val content : Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.econtent
  val make : Eliom_pervasives.XML.econtent -> Eliom_pervasives.XML.elt
  val empty : unit -> Eliom_pervasives.XML.elt
  val comment : string -> Eliom_pervasives.XML.elt
  val pcdata : string -> Eliom_pervasives.XML.elt
  val encodedpcdata : string -> Eliom_pervasives.XML.elt
  val entity : string -> Eliom_pervasives.XML.elt
  val leaf :
    ?a:Eliom_pervasives.XML.attrib list ->
    Eliom_pervasives.XML.ename -> Eliom_pervasives.XML.elt
  val node :
    ?a:Eliom_pervasives.XML.attrib list ->
    Eliom_pervasives.XML.ename ->
    Eliom_pervasives.XML.elt list -> Eliom_pervasives.XML.elt
  val cdata : string -> Eliom_pervasives.XML.elt
  val cdata_script : string -> Eliom_pervasives.XML.elt
  val cdata_style : string -> Eliom_pervasives.XML.elt
  val make_unique :
    ?copy:Eliom_pervasives.XML.elt ->
    Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.elt
  val is_unique : Eliom_pervasives.XML.elt -> bool
  val get_unique_id : Eliom_pervasives.XML.elt -> string option
  module Hashtbl :
    sig
      type key = elt
      type 'a t
      val create : int -> 'a t
      val clear : 'a t -> unit
      val copy : 'a t -> 'a t
      val add : 'a t -> key -> 'a -> unit
      val remove : 'a t -> key -> unit
      val find : 'a t -> key -> 'a
      val find_all : 'a t -> key -> 'a list
      val replace : 'a t -> key -> 'a -> unit
      val mem : 'a t -> key -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val length : 'a t -> int
    end
  val hash : Eliom_pervasives.XML.elt -> int
  val compare : Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.elt -> int
  type ref_tree
  val make_ref_tree :
    Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.ref_tree
  val make_ref_tree_list :
    Eliom_pervasives.XML.elt list -> Eliom_pervasives.XML.ref_tree list
end >>