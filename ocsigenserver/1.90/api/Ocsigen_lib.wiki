=Module <<a_api_type | module Ocsigen_lib >> =
<<div class="code"|<<span class="keyword"|module>> Ocsigen_lib: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_lib >><<span class='code'|end>>>>~Remove the slash at beginning but if it is also at the end\\

----
<<div  id="EXCEPTIONOcsigen_Internal_Error" class="code"|<<span class="keyword"|exception>> Ocsigen_Internal_Error <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div  id="EXCEPTIONInput_is_too_large" class="code"|<<span class="keyword"|exception>> Input_is_too_large>>
<<div  id="EXCEPTIONOcsigen_Bad_Request" class="code"|<<span class="keyword"|exception>> Ocsigen_Bad_Request>>
<<div  id="EXCEPTIONOcsigen_Request_too_long" class="code"|<<span class="keyword"|exception>> Ocsigen_Request_too_long>>
<<div id="VALid" class="code"|<<span class="keyword"|val>> id : <<span class="code type"|'a -> 'a>>>><<div class="code" id="TYPEurl_path"|<<span class="keyword"|type>> url~_path = <<span class="code type"|string list>> >>

<<div id="VALstring_of_url_path" class="code"|<<span class="keyword"|val>> string~_of~_url~_path : <<span class="code type"|encode:bool -> string list -> string>>>><<div id="VALcomp" class="code"|<<span class="keyword"|val>> comp : <<span class="code type"|('a -> 'b) -> ('c -> 'a) -> 'c -> 'b>>>><<div id="VALuncurry2" class="code"|<<span class="keyword"|val>> uncurry~2 : <<span class="code type"|('a -> 'b -> 'c) -> 'a * 'b -> 'c>>>><<div id="VALlist_remove_first_if_any" class="code"|<<span class="keyword"|val>> list~_remove~_first~_if~_any : <<span class="code type"|'a -> 'a list -> 'a list>>>><<div id="VALlist_remove_first_if_any_q" class="code"|<<span class="keyword"|val>> list~_remove~_first~_if~_any~_q : <<span class="code type"|'a -> 'a list -> 'a list>>>><<div id="VALlist_remove_first" class="code"|<<span class="keyword"|val>> list~_remove~_first : <<span class="code type"|'a -> 'a list -> 'a list>>>><<div id="VALlist_remove_first_q" class="code"|<<span class="keyword"|val>> list~_remove~_first~_q : <<span class="code type"|'a -> 'a list -> 'a list>>>><<div id="VALlist_remove_all" class="code"|<<span class="keyword"|val>> list~_remove~_all : <<span class="code type"|'a -> 'a list -> 'a list>>>><<div id="VALlist_remove_all_q" class="code"|<<span class="keyword"|val>> list~_remove~_all~_q : <<span class="code type"|'a -> 'a list -> 'a list>>>><<div id="VALlist_remove_all_assoc" class="code"|<<span class="keyword"|val>> list~_remove~_all~_assoc : <<span class="code type"|'a -> ('a * 'b) list -> ('a * 'b) list>>>><<div id="VALlist_remove_all_assoc_q" class="code"|<<span class="keyword"|val>> list~_remove~_all~_assoc~_q : <<span class="code type"|'a -> ('a * 'b) list -> ('a * 'b) list>>>><<div id="VALlist_last" class="code"|<<span class="keyword"|val>> list~_last : <<span class="code type"|'a list -> 'a>>>><<div id="VALlist_assoc_remove" class="code"|<<span class="keyword"|val>> list~_assoc~_remove : <<span class="code type"|'a -> ('a * 'b) list -> 'b * ('a * 'b) list>>>><<div id="VALlist_is_prefix" class="code"|<<span class="keyword"|val>> list~_is~_prefix : <<span class="code type"|'a list -> 'a list -> bool>>>><<div id="VALlist_is_prefix_skip_end_slash" class="code"|<<span class="keyword"|val>> list~_is~_prefix~_skip~_end~_slash : <<span class="code type"|string list -> string list -> bool>>>><<div id="VALremove_dotdot" class="code"|<<span class="keyword"|val>> remove~_dotdot : <<span class="code type"|string list -> string list>>>><<div id="VALremove_slash_at_beginning" class="code"|<<span class="keyword"|val>> remove~_slash~_at~_beginning : <<span class="code type"|string list -> string list>>>><<div class="info"|~Remove the slash at beginning but if it is also at the end\\
>>
<<div id="VALrecursively_remove_slash_at_beginning" class="code"|<<span class="keyword"|val>> recursively~_remove~_slash~_at~_beginning : <<span class="code type"|string list -> string list>>>><<div class="info"|~Recursively remove the slash at beginning but if it is also at the end\\
>>
<<div id="VALremove_slash_at_end" class="code"|<<span class="keyword"|val>> remove~_slash~_at~_end : <<span class="code type"|string list -> string list>>>><<div id="VALremove_internal_slash" class="code"|<<span class="keyword"|val>> remove~_internal~_slash : <<span class="code type"|string list -> string list>>>><<div id="VALadd_end_slash_if_missing" class="code"|<<span class="keyword"|val>> add~_end~_slash~_if~_missing : <<span class="code type"|string list -> string list>>>><<div id="VALchange_empty_list" class="code"|<<span class="keyword"|val>> change~_empty~_list : <<span class="code type"|string list -> string list>>>><<div id="VALremove_end_slash" class="code"|<<span class="keyword"|val>> remove~_end~_slash : <<span class="code type"|string -> string>>>><<div id="VALstring_first_diff" class="code"|<<span class="keyword"|val>> string~_first~_diff : <<span class="code type"|string -> string -> int -> int -> int>>>><<div id="VALadd_to_string" class="code"|<<span class="keyword"|val>> add~_to~_string : <<span class="code type"|string -> string -> string -> string>>>><<div id="VALconcat_strings" class="code"|<<span class="keyword"|val>> concat~_strings : <<span class="code type"|string -> string -> string -> string>>>><<div id="VALbasic_sep" class="code"|<<span class="keyword"|val>> basic~_sep : <<span class="code type"|char -> string -> string * string>>>><<div id="VALremove_spaces" class="code"|<<span class="keyword"|val>> remove~_spaces : <<span class="code type"|string -> int -> int -> string>>>><<div id="VALsep" class="code"|<<span class="keyword"|val>> sep : <<span class="code type"|char -> string -> string * string>>>><<div class="info"|~Cut a string to the next separator~, removing spaces~.
   ~Raises ~Not~_found if the separator connot be found~.\\
>>
<<div id="VALsplit" class="code"|<<span class="keyword"|val>> split : <<span class="code type"|?multisep:bool -> char -> string -> string list>>>><<div id="VALstring_of_exn" class="code"|<<span class="keyword"|val>> string~_of~_exn : <<span class="code type"|exn -> string>>>><<div class="info"|<<span class='code'|string~_of~_exn e>> returns a ~(hopefully~) meaningful explanation of
      the exception <<span class='code'|e>>~.\\
>>
<<div id="VALregister_exn_printer" class="code"|<<span class="keyword"|val>> register~_exn~_printer : <<span class="code type"|((exn -> string) -> exn -> string) -> unit>>>><<div class="info"|<<span class='code'|register~_exn~_printer p>> registers <<span class='code'|p>> so that a call to <<span class='code'|p
      string~_of~_exn e>> is tried first in <<span class='code'|string~_of~_exn e>>~. <<span class='code'|p>> must raise
      <<span class='code'|e>> if it doesn~'t handle it~.\\
>>
<<div id="VALfst3" class="code"|<<span class="keyword"|val>> fst~3 : <<span class="code type"|'a * 'b * 'c -> 'a>>>><<div id="VALsnd3" class="code"|<<span class="keyword"|val>> snd~3 : <<span class="code type"|'a * 'b * 'c -> 'b>>>><<div id="VALthd3" class="code"|<<span class="keyword"|val>> thd~3 : <<span class="code type"|'a * 'b * 'c -> 'c>>>><<div id="VALapply_option" class="code"|<<span class="keyword"|val>> apply~_option : <<span class="code type"|('a -> 'b) -> 'a option -> 'b option>>>><<div class="code" id="TYPEleftright"|<<span class="keyword"|type>> <<span class="code type"|('a, 'b)>> leftright = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Left>> <<span class="keyword"|of>> <<span class="code type"|'a>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Right>> <<span class="keyword"|of>> <<span class="code type"|'b>>|>>

<<div class="code" id="TYPEyesnomaybe"|<<span class="keyword"|type>> yesnomaybe = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Yes>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|No>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Maybe>>|>>

<<div id="VALget_inet_addr" class="code"|<<span class="keyword"|val>> get~_inet~_addr : <<span class="code type"|string -> Unix.inet_addr Lwt.t>>>><<div class="info"|returns the first inet address for one host\\
>>
<<div class="code" id="TYPEip_address"|<<span class="keyword"|type>> ip~_address = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|IPv4>> <<span class="keyword"|of>> <<span class="code type"|int32>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|IPv6>> <<span class="keyword"|of>> <<span class="code type"|int64 * int64>>|>>
<<div class="info"|~I~P address parsing\\
>>

<<div  id="EXCEPTIONInvalid_ip_address" class="code"|<<span class="keyword"|exception>> Invalid_ip_address <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div id="VALparse_ip" class="code"|<<span class="keyword"|val>> parse~_ip : <<span class="code type"|string -> <<a_api text="ip_address" | type Ocsigen_lib.ip_address >> * <<a_api text="ip_address" | type Ocsigen_lib.ip_address >> option>>>><<div id="VALmatch_ip" class="code"|<<span class="keyword"|val>> match~_ip : <<span class="code type"|\\{{{   }}}<<a_api text="ip_address" | type Ocsigen_lib.ip_address >> * <<a_api text="ip_address" | type Ocsigen_lib.ip_address >> option ->\\{{{   }}}  <<a_api text="ip_address" | type Ocsigen_lib.ip_address >> -> bool>>>><<div id="VALnetwork_of_ip" class="code"|<<span class="keyword"|val>> network~_of~_ip : <<span class="code type"|<<a_api text="ip_address" | type Ocsigen_lib.ip_address >> -> int32 -> int64 * int64 -> <<a_api text="ip_address" | type Ocsigen_lib.ip_address >>>>>><<div id="VALinet6_addr_loopback" class="code"|<<span class="keyword"|val>> inet~6~_addr~_loopback : <<span class="code type"|<<a_api text="ip_address" | type Ocsigen_lib.ip_address >>>>>><<div id="VALgetnameinfo" class="code"|<<span class="keyword"|val>> getnameinfo : <<span class="code type"|Unix.inet_addr -> int -> string Lwt.t>>>><<div class="info"|calls ~Lwt~_lib~.getnameinfo and returns the result~,
    but if it fails returns the ~I~P number~,
    with <<span class='code'| before and >> after ~I~Pv~6 addresses~.\\
>>
<<div id="VALbasename" class="code"|<<span class="keyword"|val>> basename : <<span class="code type"|string -> string>>>><<div id="VALextension" class="code"|<<span class="keyword"|val>> extension : <<span class="code type"|string -> string>>>><<div class="info"|~Extension of a file~. ~Raises <<span class='code'|~Not~_found>> if the argument has no
  extension\\
>>
<<div id="VALextension_no_directory" class="code"|<<span class="keyword"|val>> extension~_no~_directory : <<span class="code type"|string -> string>>>><<div class="info"|~Extension of a file~. ~Supposes that the argument does not
    contain ~'~/~' ~(but is faster than extension~)\\
>>
<<div id="VALfixup_url_string" class="code"|<<span class="keyword"|val>> fixup~_url~_string : <<span class="code type"|string -> string>>>><<div id="VALparse_url" class="code"|<<span class="keyword"|val>> parse~_url : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  bool option * string option * int option * string * string list *\\{{{   }}}  string option * (string * string) list Lazy.t>>>><<div id="VALmake_absolute_url" class="code"|<<span class="keyword"|val>> make~_absolute~_url : <<span class="code type"|https:bool -> host:string -> port:int -> string -> string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="StringSet" | module Ocsigen_lib.StringSet >>: <<span class="code type"|Set.S>><<span class="code type"|{{{  }}} with type elt = string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Clist" | module Ocsigen_lib.Clist >>: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_lib.Clist >><<span class='code'|end>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="String_Table" | module Ocsigen_lib.String_Table >>: <<span class="code type"|Deriving_Json_stdlib.Map.S>><<span class="code type"|{{{  }}} with type key = string>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Int_Table" | module Ocsigen_lib.Int_Table >>: <<span class="code type"|Map.S>><<span class="code type"|{{{  }}} with type key = int>>>><<div class="code" id="TYPEfile_info"|<<span class="keyword"|type>> file~_info = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@tmp_filename : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Where the file is stored on the server|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@filesize : <<span class="code type"|int64>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Size~, in bytes|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@raw_original_filename : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Original file name~, as given by the client~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@original_basename : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Original file name|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@file_content_type : <<span class="code type"|(string * string option) option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@content~-type~, and optionally charset~, of the file~, if supplied|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|

}
>>
<<div class="info"|~The files sent in the request\\

~Note that the files are cancelled once the request has been fulfilled\\
>>

\\
~Only ~I~E is known to make <<span class='code'|raw~_original~_filename>> and
    <<span class='code'|original~_basename>> differ~, as it sends the full original path
    of uploaded files~.  ~In all cases~, <<span class='code'|original~_basename>> is the
    basename of the file~. ~More precisely~, it is the part of the
    filename after the last <<span class='code'|~/>> or <<span class='code'|~\ >>~, if any~, or <<span class='code'|"none">> if one of
    these characters is the last one~. ~You should probably never use
    <<span class='code'|raw~_original~_filename>>~.\\
<<div id="VALmk_url_encoded_parameters" class="code"|<<span class="keyword"|val>> mk~_url~_encoded~_parameters : <<span class="code type"|(string * string) list -> string>>>><<div id="VALencode" class="code"|<<span class="keyword"|val>> encode : <<span class="code type"|?plus:bool -> string -> string>>>><<div id="VALdecode" class="code"|<<span class="keyword"|val>> decode : <<span class="code type"|?plus:bool -> string -> string>>>><<div id="VALmake_cryptographic_safe_string" class="code"|<<span class="keyword"|val>> make~_cryptographic~_safe~_string : <<span class="code type"|unit -> string>>>><<div id="VALdebug" class="code"|<<span class="keyword"|val>> debug : <<span class="code type"|string -> unit>>>><<div id="VALto_json" class="code"|<<span class="keyword"|val>> to~_json : <<span class="code type"|?typ:'a Deriving_Json.t -> 'a -> string>>>><<div id="VALof_json" class="code"|<<span class="keyword"|val>> of~_json : <<span class="code type"|?typ:'a Deriving_Json.t -> string -> 'a>>>>