<<code language="ocaml" | sig
  type page
  type options
  type return = Eliom_service.non_ocaml
  type result
  val register :
    ?app:string ->
    ?scope:[< Eliom_common.scope ] ->
    ?options:Eliom_registration_sigs.S.options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    ?secure_session:bool ->
    service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
             Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd, 'e,
             Eliom_registration_sigs.S.return)
            Eliom_service.t ->
    ?error_handler:((string * exn) list ->
                    Eliom_registration_sigs.S.page Lwt.t) ->
    ('get -> 'post -> Eliom_registration_sigs.S.page Lwt.t) -> unit
  val create :
    ?app:string ->
    ?scope:[< Eliom_common.scope ] ->
    ?options:Eliom_registration_sigs.S.options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    ?secure_session:bool ->
    ?https:bool ->
    ?name:string ->
    ?csrf_safe:bool ->
    ?csrf_scope:[< Eliom_common.user_scope ] ->
    ?csrf_secure:bool ->
    ?max_use:int ->
    ?timeout:float ->
    meth:('m, 'gp, 'gn, 'pp, 'pn, [< `WithSuffix | `WithoutSuffix ] as 'a,
          'gp_)
         Eliom_service.meth ->
    path:('att, 'co, 'gp_) Eliom_service.path_option ->
    ?error_handler:((string * exn) list ->
                    Eliom_registration_sigs.S.page Lwt.t) ->
    ('gp -> 'pp -> Eliom_registration_sigs.S.page Lwt.t) ->
    ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'a,
     'gn, 'pn, Eliom_registration_sigs.S.return)
    Eliom_service.t
  val attach_get :
    ?app:string ->
    ?scope:[< Eliom_common.scope ] ->
    ?options:Eliom_registration_sigs.S.options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    ?secure_session:bool ->
    ?https:bool ->
    ?name:string ->
    ?csrf_safe:bool ->
    ?csrf_scope:[< Eliom_common.user_scope ] ->
    ?csrf_secure:bool ->
    ?max_use:int ->
    ?timeout:float ->
    fallback:(unit, unit, Eliom_service.get, Eliom_service.att,
              Eliom_service.non_co, Eliom_service.non_ext, 'a,
              [ `WithoutSuffix ], unit, unit,
              Eliom_registration_sigs.S.return)
             Eliom_service.t ->
    get_params:('gp, [ `WithoutSuffix ], 'gn) Eliom_parameter.params_type ->
    ?error_handler:((string * exn) list ->
                    Eliom_registration_sigs.S.page Lwt.t) ->
    ('gp -> unit -> Eliom_registration_sigs.S.page Lwt.t) ->
    ('gp, unit, Eliom_service.get, Eliom_service.att, Eliom_service.co,
     Eliom_service.non_ext, Eliom_service.reg, [ `WithoutSuffix ], 'gn, 
     unit, Eliom_registration_sigs.S.return)
    Eliom_service.t
  val attach_post :
    ?app:string ->
    ?scope:[< Eliom_common.scope ] ->
    ?options:Eliom_registration_sigs.S.options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    ?secure_session:bool ->
    ?https:bool ->
    ?name:string ->
    ?csrf_safe:bool ->
    ?csrf_scope:[< Eliom_common.user_scope ] ->
    ?csrf_secure:bool ->
    ?max_use:int ->
    ?timeout:float ->
    fallback:('gp, unit, Eliom_service.get, Eliom_service.att,
              Eliom_service.non_co, Eliom_service.non_ext, 'a,
              [ `WithoutSuffix ], 'gn, unit,
              Eliom_registration_sigs.S.return)
             Eliom_service.t ->
    post_params:('pp, [ `WithoutSuffix ], 'pn) Eliom_parameter.params_type ->
    ?error_handler:((string * exn) list ->
                    Eliom_registration_sigs.S.page Lwt.t) ->
    ('gp -> 'pp -> Eliom_registration_sigs.S.page Lwt.t) ->
    ('gp, 'pp, Eliom_service.post, Eliom_service.att, Eliom_service.co,
     Eliom_service.non_ext, Eliom_service.reg, [ `WithoutSuffix ], 'gn, 'pn,
     Eliom_registration_sigs.S.return)
    Eliom_service.t
  val send :
    ?options:Eliom_registration_sigs.S.options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    Eliom_registration_sigs.S.page -> Eliom_registration_sigs.S.result Lwt.t
end >>