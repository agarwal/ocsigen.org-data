
=Creating links and forms=

<<outline depth="2"| <<header| =Table of contents= >> >>

==@@id="links"@@Links

To create a link (<<span class="code"|<a~>>>), use the
 <<a_api| val Eliom_content.Html5.D.a >> function,
as in these examples:

<<code language="ocaml"|
 open Eliom_content

 let links = Eliom_registration.Html5.register_service ["rep";"links"] unit
 (fun () () ->
   Lwt.return
    Html5.D.(
      html
       (head (title (pcdata "Links")) [])
       (body
         [p
          [a coucou [pcdata "coucou"] (); br ();
           a hello [pcdata "hello"] (); br ();
           a default
             [pcdata "default page of the dir"] (); br ();
           a uasuffix
             [pcdata "uasuffix"] (2007,06); br ();
           a coucou_params
             [pcdata "coucou_params"] (42,(22,"ciao")); br ();
           a raw_serv
             [pcdata "raw_serv"] [("sun","yellow");("sea","blue and pink")]; br ();
           a
             (Eliom_service.external_service
                ~prefix:"http://fr.wikipedia.org"
                ~path:["wiki";""]
                ~get_params:(suffix (all_suffix "suff"))
                ())
             [pcdata "OCaml on wikipedia"]
             ["OCaml"]; br ();
           raw_a
             ~a:[a_href (uri_of_string "http://en.wikipedia.org/wiki/OCaml")]
             [pcdata "OCaml on wikipedia"]
         ]])))
>>

See [[site:tuto/rep/links|<<span class="code"|links>>]].
  

 <<a_api| val Eliom_content.Html5.D.a >> takes as first parameter
the service you want to link to.
The third parameter is the text of the link.
The last parameter is for
GET parameters you want to put in the link.
The type of this parameter and the name of GET parameters depend
on the service you link to.

  
The links to Wikipedia shows how to define an external service (here it
uses a suffix URL).
For an external service without parameters, you can use the low level
function  <<a_api project="eliom"| val Eliom_content.Html5.D.raw_a >>, if you don't want to create an
external service explicitely.
Note that the path must be a list of strings.
Do not write <<span class="code"|["foo/bar"]>>,
but <<span class="code"|["foo";"bar"]>>, otherwise, the "/" will be encoded in
the URL.\\


If you want to create (mutually or not) recursive pages, create the
service using <<a_api| val Eliom_service.service >> first, then
register it in the table using (for example) <<a_api| val Eliom_registration.Html5.register >>:

  

<<code language="ocaml"|let linkrec = Eliom_service.service ["linkrec"] unit ()

let _ = Eliom_registration.Html5.register linkrec
    (fun () () ->
      Lwt.return
       (html
        (head (title (pcdata "")) [])
        (body [p [a linkrec [pcdata "click"] ()]])))
>>
[[site:tuto/linkrec| See <<span class="code"|linkrec>>]].

==@@id="forms"@@Forms

===Forms towards GET services

The function  <<a_api|  val Eliom_content.Html5.D.get_form >> allows to create a form
that uses the GET method (parameters in the URL).
It works like  <<a_api| val Eliom_content.Html5.D.a >> but takes a //function// that creates the form from the parameters names as parameter.

  
<<code language="ocaml"|
let create_form =
  (fun (number_name, (number2_name, string_name)) ->
    Html5.D.(
      [p [pcdata "Write an int: ";
        int_input ~input_type:`Text ~name:number_name ();
        pcdata "Write another int: ";
        int_input ~input_type:`Text ~name:number2_name ();
        pcdata "Write a string: ";
        string_input ~input_type:`Text ~name:string_name ();
        string_input ~input_type:`Submit ~value:"Click" ()]]
    ))

let form = Eliom_registration.Html5.register_service ["form"] unit
  (fun () () ->
     let f = Html5.D.get_form coucou_params create_form in
     Lwt.return
       (html
         (head (title (pcdata "")) [])
         (body [f])))
>>

  
[[site:tuto/form| See the function <<span class="code"|form>> in action]].\\

If you want to use typed parameters,
you cannot use functions like  <<a_api project="tyxml"| val Html5.M.input >> to
create your forms (but you can use it if you want to use parameters defined with
 <<a_api| val Eliom_parameter.any >>). Indeed, parameter names are typed to force them
be used properly. In our example, <<span class="code"|number_name>> has type
<<span class="code"|int param_name>> and must be used with
<<span class="code"|int_input>> (or other widgets), whereas
<<span class="code"|string_name>> has type
<<span class="code"|string param_name>> and must be used with
<<span class="code"|string_input>> (or other widgets).
All functions for creating form widgets are detailed
in <<a_api | module Eliom_content.Html5.D >> (and <<a_api | module Eliom_content.Html5.D >>).

For untyped forms, you may use functions from <<a_api project="tyxml"
| module HTML5.M >> (or OCamlDuce's syntax, or whatever syntax you are
using) or functions which name is prefixed by "<<span
class="code"|raw_>>".  Here is a form linking to our (untyped) service
<<span class="code"|raw_serv>>.

<<code language="ocaml"|
let raw_form =
  Eliom_registration.Html5.register_service
    ~path:["anyform"]
    ~get_params:unit
    (fun () () ->
      Lwt.return
        Html5.D.(html
                   (head (title (pcdata "")) [])
                   (body
                      [h1 [pcdata "Any Form"];
                       get_form raw_serv
                         (fun () ->
                           [p [pcdata "Form to raw_serv: ";
                               untyped_input ~input_type:`Text ~name:"plop" ();
                               untyped_input ~input_type:`Text ~name:"plip" ();
                               untyped_input ~input_type:`Text ~name:"plap" ();
                               untyped_input ~input_type:`Submit ~value:"Click" ()]])
                        ])))
>>

  
Try this [[site:tuto/anyform| form]].
  

===POST parameters
  
  
By default Web page parameters are transferred in the URL (GET parameters).
A web page may also expect POST parameters
(that is, parameters that are not in the URL but in the body of the HTTP
request, if the POST method is used).
(See page * * more information on the POST and GET methods, and how
to define a service that uses the POST method).

<<code language="ocaml"|let no_post_param_service =
  Eliom_registration.Html5.register_service
    ~path:["post"]
    ~get_params:unit
    (fun () () ->
      Lwt.return
        (html
         (head (title (pcdata "")) [])
         (body [h1 [pcdata
                      "Version of the page without POST parameters"]])))

let my_service_with_post_params =
  register_post_service
    ~fallback:no_post_param_service
    ~post_params:(string "value")
    (fun () value ->
      Lwt.return
        (html
         (head (title (pcdata "")) [])
         (body [h1 [pcdata value]])))
>>



  
Services may take both GET and POST parameters:
  

<<code language="ocaml"|let get_no_post_param_service =
  Eliom_registration.Html5.register_service
    ~path:["post2"]
    ~get_params:(int "i")
    (fun i () ->
      Lwt.return
        (html
         (head (title (pcdata "")) [])
         (body [p [pcdata "No POST parameter, i:";
                   em [pcdata (string_of_int i)]]])))

let my_service_with_get_and_post = register_post_service
  ~fallback:get_no_post_param_service
  ~post_params:(string "value")
  (fun i value ->
    Lwt.return
      (html
         (head (title (pcdata "")) [])
         (body [p [pcdata "Value: ";
                   em [pcdata value];
                   pcdata ", i: ";
                   em [pcdata (string_of_int i)]]])))
>>

===@@id="postforms"@@POST forms
  
  
 To create a POST form, use the
    <<a_api| val Eliom_content.Html5.D.post_form >> function.
   It is similar to  <<a_api| val Eliom_content.Html5.D.get_form >>
   with an additional parameter
   for the GET parameters you want to put in the URL (if any).
   Here, <<span class="code"|form2>> is a page containing a form
   to the service <<span class="code"|post>> (using Html5.F's functions)
   and <<span class="code"|form3>> (defined using the syntax extension)
   contains a form to <<span class="code"|post2>>, with a GET parameter.
   <<span class="code"|form4>> is a form to an external page.
       
  

<<code language="ocaml"|let form2 = Eliom_registration.Html5.register_service ["form2"] unit
  (fun () () ->
     let f =
       (Eliom_content.Html5.D.post_form my_service_with_post_params
          (fun chaine ->
            [p [pcdata "Write a string: ";
                string_input ~input_type:`Text ~name:chaine ()]]) ()) in
     Lwt.return
       (html
         (head (title (pcdata "form")) [])
         (body [f])))

let form3 = Eliom_registration.Html5.register_service ["form3"] unit
  (fun () () ->
     let module Html5 = Html5.D in
     let f  =
       (Eliom_content.Html5.D.post_form my_service_with_get_and_post
          (fun chaine ->
            <:xmllist< <p> Write a string:
                    $string_input ~input_type:`Text ~name:chaine ()$ </p> ~>>)
          222) in
     Lwt.return
       << <html>
            <head><title></title></head>
            <body>$f$</body></html> ~>>)

let form4 = Eliom_registration.Html5.register_service ["form4"] unit
  (fun () () ->
     let module Html5 = Eliom_content.Html5.D in
     let f  =
       (Eliom_content.Html5.D.post_form
          (external_post_service
             ~prefix:"http://www.petizomverts.com"
             ~path:["zebulon"]
             ~get_params:(int "i")
             ~post_params:(string "chaine") ())
          (fun chaine ->
            <:xmllist< <p> Write a string:
                     $string_input ~input_type:`Text ~name:chaine ()$ </p> ~>>)
          222) in
     Lwt.return
       (html
        (head (title (pcdata "form")) [])
        (body [f])))
>>

See the urls:
[[site:tuto/post|<<span class="code"|post>> without parameter]],
[[site:tuto/post2?i=123|<<span class="code"|post2>> without POST parameter]],
[[site:tuto/form2|<<span class="code"|form2>>]],
[[site:tuto/form3|<<span class="code"|form3>>]],
[[site:tuto/form4|<<span class="code"|form4>>]].


==@@id="advancedformsandparameters"@@Advanced forms and parameters

This section shows more advanced use of page parameters and
corresponding forms.

===Parsing parameters using regular expressions
  
  
Eliom_parameter.regexp allows to parse page parameters using (Perl-compatible)
regular expressions. We use the module <<span class="code"|Netstring_pcre>>,
from //OCamlnet//. See the documentation about OCamlnet
for more information.
The following example shows a service that accepts only parameters
values enclosed between <<span class="code"|[>> and <<span class="code"|]>>:

<<code language="ocaml"|
let r = Netstring_pcre.regexp "\\\\[(.*)\\\\]"

let regexp =
  Eliom_registration.Html5.register_service
    ~path:["regexp"]
    ~get_params:(regexp r "$1" "myparam")
    (fun g () ->
      Lwt.return
        Html5.D.(html
                  (head (title (pcdata "")) [])
                  (body [p [pcdata g]])))

>>

<<code language="ocaml"|let myregexp = Netstring_pcre.regexp "\\[(.*)\\]"

let regexpserv =
  Eliom_registration.Html5.register_service
    ~path:["regexp"]
    ~get_params:(regexp myregexp "$1" (fun s -> s) "myparam")
    (fun g () ->
      Lwt.return
        Html5.D.(html
                  (head (title (pcdata "")) [])
                  (body [p [pcdata g]])))
>>
[[site:tuto/regexp?myparam=%5Btoto%5D| Try it]].

===Boolean checkboxes

Page may take parameter of type <<span class="code"|bool>>.
A possible use of this type is in a form
with //boolean checkboxes//, as in the example below:
      
<<code language="ocaml"|(* Form with bool checkbox: *)
let bool_params = Eliom_registration.Html5.register_service
    ~path:["bool"]
    ~get_params:(bool "case")
  (fun case () ->
    let module Html5 = Html5.D in
    Lwt.return
      << <html>
           <head><title></title></head>
           <body>
           <p>
             $pcdata (if case then "checked" else "not checked")$
           </p>
           </body>
         </html> ~>>)

let create_form_bool casename =
    <:xmllist< <p>check? $bool_checkbox ~name:casename ()$ <br/>
      $string_input ~input_type:`Submit ~value:"Click" ()$</p> ~>>

let form_bool = Eliom_registration.Html5.register_service ["formbool"] unit
  (fun () () ->
     let module Html5 = Html5.D in
     let f = get_form bool_params create_form_bool in
     Lwt.return
       << <html>
            <head><title></title></head>
            <body> $f$ </body>
          </html> ~>>)


>>
          
[[site:tuto/formbool| Try it]].\\

//Important warning://
As you can see, browsers do not send any value
for unchecked boxes! An unchecked box is equivalent to no parameter
at all! Thus it is not possible to distinguish between a service
taking a boolean and a service taking no parameter at all
(if they share the same URL).
In Eliom services with higher priority are tried first, and then
they are tried in order of registration.
The first matching service will answer.\\

Other types similar to bool:
* <<a_api| val Eliom_parameter.opt >> (page taking an optional parameter),
* <<a_api| val Eliom_parameter.sum >> (either a parameter or another).

See <<a_api | module Eliom_parameter>>.

===Type <<span class="code"|set>>

Page may take several parameters of the same name.
It is useful when you want to create a form with a variable number
of fields.
To do that with Eliom, use the type  <<a_api| val Eliom_parameter.set >>.
For example <<span class="code"|set int "val">> means that the page will take
zero, one or several parameters of name <<span class="code"|"val">>,
all of type <<span class="code"|int>>.
The function you register will receive the parameters in a list.
Example:

<<code language="ocaml"|let set = Eliom_registration.Html5.register_service
    ~path:["set"]
    ~get_params:(set string "s")
  (fun l () ->
    let module Html5 = Html5.D in
    let ll =
      List.map
        (fun s -> << <strong>$str:s$ </strong> ~>>) l
    in
    Lwt.return
    << <html>
         <head><title></title></head>
         <body>
         <p>
           You sent:
           $list:ll$
         </p>
         </body>
       </html> ~>>)
>>
  
These parameters may come from several kinds of widgets in forms.
   Here is an example of a form with several checkboxes, all sharing the same
   name, but with different values:
   
<<code language="ocaml"|
(* form to set *)
let setform = Eliom_registration.Html5.register_service
    ~path:["setform"]
    ~get_params:unit
    (fun () () ->
      Lwt.return
        (html
           (head (title (pcdata "")) [])
           (body [h1 [pcdata "Set Form"];
                  get_form set
                    (fun n ->
                      [p [pcdata "Form to set: ";
                          string_checkbox ~name:n ~value:"box1" ();
                          string_checkbox
                            ~name:n ~value:"box2" ~checked:true ();
                          string_checkbox ~name:n ~value:"box3" ();
                          string_checkbox ~name:n ~value:"box4" ();
                          string_input ~input_type:`Submit ~value:"Click" ()]])
                ])))
>>
  
[[site:tuto/setform| Try it]].\\

Once again, note that there is no difference between an empty
set or no parameter at all. If you register a service without parameters
and a service with a set of parameters on the same URL, the service with
higher priority, or the firstly registered service that matches,
will answer.
      
  

===Select
  
  
Here is an example of a select box.
  
<<code language="ocaml"|let select_example_result = Eliom_registration.Html5.register_service
    ~path:["select"]
    ~get_params:(string "s")
    (fun g () ->
      Lwt.return
        (html
           (head (title (pcdata "")) [])
           (body [p [pcdata "You selected: ";
                     strong [pcdata g]]])))

let create_select_form =
  (fun select_name ->
    Html5.D.(
      [p [pcdata "Select something: ";
        string_select ~name:select_name
          (Option ([] (* attributes *),
                   "Bob" (* value *),
                   None (* Content, if different from value *),
                   false (* not selected *))) (* first line *)
          [Option ([], "Marc", None, false);
          (Optgroup
          ([],
           "Girls",
           ([], "Karin", None, false),
           [([a_disabled `Disabled], "Juliette", None, false);
            ([], "Alice", None, true);
            ([], "Germaine", Some (pcdata "Bob's mother"), false)]))]
          ;
        string_input ~input_type:`Submit ~value:"Send" ()]]
    ))

let select_example = Eliom_registration.Html5.register_service ["select"] unit
  (fun () () ->
     let open Html5.D in
     let f =
       get_form
         select_example_result create_select_form
     in
     Lwt.return
       (html
         (head (title (pcdata "")) [])
         (body [f])))
>>
  
[[site:tuto/select| Try it]].\\

To do "multiple" select boxes, use functions like
 <<a_api| val Eliom_content.Html5.D.string_multiple_select >>.
As you can see in the type, the service must be declared with parameters
of type  <<a_api| val Eliom_parameter.set >>.

===Clickable images
  
  
Here is an example of clickable image.
      You receive the coordinates the user clicked on.
      
<<code language="ocaml"|let coord = Eliom_registration.Html5.register_service
    ~path:["coord"]
    ~get_params:(coordinates "coord")
  (fun c () ->
    let module Html5 = Html5.D in
    Lwt.return
      << <html>
           <head><title></title></head>
           <body>
           <p>
             You clicked on coordinates:
             ($str:(string_of_int c.abscissa)$, $str:(string_of_int c.ordinate)$)
           </p>
           </body>
         </html> ~>>)

(* form to image *)
let imageform = Eliom_registration.Html5.register_service
    ~path:["imageform"]
    ~get_params:unit
    (fun () () ->
      Lwt.return
        (html
           (head (title (pcdata "")) [])
           (body [h1 [pcdata "Image Form"];
                  get_form coord
                    (fun n ->
                      [p [image_input
                            ~src:(make_uri ~service:(static_dir ()) ["ocsigen5.png"])
                            ~name:n
                            ()]])
                ])))
>>
  
[[site:tuto/imageform| Try it]].\\

You may also send a value with the coordinates:
  
<<code language="ocaml"|let coord2 = Eliom_registration.Html5.register_service
    ~path:["coord2"]
    ~get_params:(int_coordinates "coord")
  (fun (i, c) () ->
    let module Html5 = Html5.D in
    Lwt.return
      << <html>
           <head><title></title></head>
           <body>
           <p>
             You clicked on coordinates:
             ($str:(string_of_int c.abscissa)$, $str:(string_of_int c.ordinate)$)
           </p>
           </body>
         </html> ~>>)

(* form to image *)
let imageform2 = Eliom_registration.Html5.register_service
    ~path:["imageform2"]
    ~get_params:unit
    (fun () () ->
      Lwt.return
        (html
           (head (title (pcdata "")) [])
           (body [h1 [pcdata "Image Form"];
                  get_form coord2
                    (fun n ->
                      [p [int_image_input
                            ~src:(make_uri ~service:(static_dir ()) ["ocsigen5.png"])
                            ~name:n
                            ~value:3
                            ()]])
                ])))

>>
  
[[site:tuto/imageform2| Try it]].


===Type <<span class="code"|list>>

Another way (than  <<a_api| val Eliom_parameter.set >>) to do variable length forms
is to use indexed lists (using  <<a_api| val Eliom_parameter.list >>).
The use of that feature is a bit more complex than <<span class="code"|set>>.
Here is an example of service taking an indexed list as parameter:

<<code language="ocaml"|
(* lists *)
let coucou_list = Eliom_registration.Html5.register_service
    ~path:["coucou"]
    ~get_params:(list "a" (string "str"))
  (fun l () ->
    let module Html5 = Html5.D in
    let ll =
      List.map (fun s -> << <strong>$str:s$</strong> ~>>) l in
      Lwt.return
        << <html>
             <head><title></title></head>
             <body>
             <p>
               You sent:
               $list:ll$
             </p>
             </body>
           </html> ~>>)
>>
  
Here is an example of link towards this service:
[[site:tuto/coucou?a.str%5B1%5D=titi&a.str%5B0%5D=toto|coucou?a.str[0]=toto&a.str[1]=titi]].

//Warning://
As for sets or bools,
if a request has no parameter, it will be considered as the empty list.
Services with higher priority are tried first, otherwise
they are tried in order of registration.

As you see, the names of each list element is built from the name
of the list, the name of the list element, and an index.
To spare you creating yourself these names, Eliom provides you an iterator
to create them.

<<code language="ocaml"|(* Form with list: *)
let create_listform f =
  (* Here, f.it is an iterator like List.map,
     but it must be applied to a function taking 3 arguments
     (unlike 1 in map), the first one being the name of the parameter,
     and the second one the element of list.
     The last parameter of f.it is the code that must be appended at the
     end of the list created
   *)
  f.it (fun stringname v init ->
    <:xmllist< <p>Write the value for $str:v$:
      $string_input ~input_type:`Text ~name:stringname ()$ </p> ~>>@init)
    ["one";"two";"three";"four"]
    <:xmllist< <p>$string_input ~input_type:`Submit ~value:"Click" ()$</p> ~>>

let listform = Eliom_registration.Html5.register_service ["listform"] unit
  (fun () () ->
     let f = get_form coucou_list create_listform in
     let module Html5 = Eliom_content.Html5.D in
     Lwt.return
       << <html>
            <head><title></title></head>
            <body> $f$ </body>
          </html> ~>>)

>>
  
[[site:tuto/listform| Try it]].\\

//Important warning://
As we have seen in the section about boolean (or optional)
parameters, it is not possible to distinguish between a boolean
with value "false", and no parameter at all.
This causes problems if you create a list of boolean or optional
values, as it is not possible to know the length of the list.
In that case, Eliom always takes the shortest possible list.

===Forms and suffixes

Service with "suffix" URLs have an equivalent version with
usual parameters, allowing to create forms towards such services.
Example:

<<code language="ocaml"|(* Form for service with suffix: *)
let create_suffixform ((suff, endsuff),i) =
    <:xmllist< <p>Write the suffix:
      $int_input ~input_type:`Text ~name:suff ()$ <br/>
      Write a string: $user_type_input
      (Ocsigen_lib.string_of_url_path ~encode:false)
         ~input_type:`Text ~name:endsuff ()
         $ <br/>
      Write an int: $int_input ~input_type:`Text ~name:i ()$ <br/>
      $string_input ~input_type:`Submit ~value:"Click" ()$</p> ~>>

let suffixform = Eliom_registration.Html5.register_service ["suffixform"] unit
  (fun () () ->
     let f = get_form isuffix create_suffixform in
     let module Html5 = Eliom_content.Html5.D in
     Lwt.return
      << <html>
           <head><title></title></head>
           <body> $f$ </body>
         </html> ~>>)

>>
          
[[site:tuto/suffixform| Try it]].

===Uploading files

The  <<a_api| val Eliom_parameter.file >> parameter type allows to send files in your
request. The service gets something of type
 <<a_api project="ocsigenserver"| type Ocsigen_extensions.file_info >>. You can extract information
using this using these functions (from  <<a_api| module Eliom_request_info >>):

<<code language="ocaml"|val get_tmp_filename : Ocsigen_extensions.file_info -> string
val get_filesize : Ocsigen_extensions.file_info -> int64
val get_original_filename : Ocsigen_extensions.file_info -> string

>>

          
 <<a_api| val Eliom_request_info.get_tmp_filename >> allows to know the actual name
of the uploaded file on the hard drive.
 <<a_api| val Eliom_request_info.get_original_filename >> gives the original filename.

To make possible the upload of files, you must configure a
directory for uploaded files in Ocsigen's configuration file.
For example:
<<div class="pre"|
  <uploaddir>/tmp</uploaddir> >>

Files are kept in this directory only while processing the request.
Then they are automatically cancelled.
Thus your services must copy them
somewhere else themselves if they want to keep them.
In the following example, we create a new hard link to the file
to keep it (the destination must be on the same partition of the disk).
      
   
<<code language="ocaml"|let upload = service
    ~path:["upload"]
    ~get_params:unit
    ()

let upload2 = register_post_service
   ~fallback:upload
   ~post_params:(file "file")
    (fun () file ->
      let to_display =
        let newname = "/tmp/thefile" in
        (try
          Unix.unlink newname;
        with _ -> ());
        Ocsigen_messages.console2 (Eliom_request_info.get_tmp_filename file);
        Unix.link (Eliom_request_info.get_tmp_filename file) newname;
        let fd_in = open_in newname in
        try
          let line = input_line fd_in in close_in fd_in; line (*end*)
        with End_of_file -> close_in fd_in; "vide"
      in
      Lwt.return
        (html
           (head (title (pcdata "Upload")) [])
           (body [h1 [pcdata to_display]])))


let uploadform = register upload
    (fun () () ->
      let f =
        (post_form upload2
           (fun file ->
             [p [file_input ~name:file ();
                 br ();
                 string_input ~input_type:`Submit ~value:"Send" ()
               ]]) ()) in
      Lwt.return
        (html
           (head (title (pcdata "form")) [])
           (body [f])))


>>
          
[[site:tuto/upload| Try it]]
      (warning: uploading on ocsigen.org is forbidden).


===Raw POST data (advanced use)

By specifying {{{~~post_params:Eliom_parameter.raw_post_params}}},
it is possible to create a service that takes as parameter any POST
data, as a stream. The only restriction is that it does not work if
the content-type corresponds to URL encoded form data or multipart data
(because in these cases, there are POST parameters, which are decoded by Eliom
to find the service).

See the API reference for more information.

