= Client server reactive application with Ocsigen

This is a short tutorial showing how to write a very simple reactive client-server
application using Js_of_ocaml, Eliom and Eliom plus. It requires Eliom > 5.0
(or branch sharedreact of development version while Eliom 5 is not released).

Our application will display a list of items to connected users
(for example a list of messages in a forum),
and make possible to add new items.

In this tutorial, you will learn:
 * How to use Eliom base app to quickly build an application with user management
 * How to create a client-server reactive interface: the HTML is generated indifferently
on server side or on client side and contains reactive parts, that are updated automatically
when data changes
 * How to implement a notification system for your application. Users are notified when a new
item arrives








== First step: a basic application with user management

Eliom base app contains a set of higher level libraries for Eliom
(user management, tips, notifications).
It also contains a template for Eliom-distillery that will create for an application
with user management, that you can use as a starting point for your project.

{{{
eliom-distillery -name tutoreact -template eba.pgocaml
}}}

This template is using Postgresql to save the data.
You need a recent version of Postgresql installed on your system.

Eliom base app is still young and the creation of the database must be improved
(help appreciated). For now you need to create manually a symbolic link to the
program {{{pg_ctl}}} in you directory. For example:

{{{
ln -s /usr/lib/postgresql/9.3/bin/pg_ctl
}}}

Now create the local database and start the database server:

{{{
make db-init
make db-create
make db-update
}}}

Compile and run the program:
{{{
make test.byte
}}}

Now use your browser to go to {{{http://localhost:8080}}}.
Register some user and connect. As the send mail function is not configured,
the activation links will be printed on the console.









== Display messages from db

To make this example more realistic, we suppose we do not want to display all the
messages in the database but only a few of them (for example the list of messages
in a thread in a forum, the blog posts of one user~ .~ .~ .).

In this tutorial we won't implement the database part.
We suppose you have a module {{{Db}}} with these functions:

<<code language="ocaml"|
val get_messages : unit -> int list Lwt.t
val get_message : int -> string Lwt.t
val add_message : string -> int Lwt.t
>>

Implement them for example using pgocaml, or, for a first version, using Ocsipersist:

<<code language="ocaml"|
module Db = struct
  let db = Ocsipersist.open_table "messages"
  let last_key =
    Eliom_reference.eref ~persistent:"index" ~scope:Eliom_common.global_scope (-1)
  let get_message id = Ocsipersist.find db (string_of_int id)
  let get_messages () =
    lwt index = Eliom_reference.get last_key in
    let rec aux n l = if n > index then l else aux (n+1) (n::l) in
    Lwt.return (aux 0 [])
  let add_message v =
    lwt index = Eliom_reference.get last_key in
    let index = index + 1 in
    lwt () = Eliom_reference.set last_key index in
    lwt () = Ocsipersist.add db (string_of_int index) v in
    Lwt.return index
end
>>

The content of the main page is defined in file {{{tutoreact.eliom}}}.
Replace the code of {{{main_service_handler}}} by:

<<code language="ocaml"|
let main_service_handler userid_o () () =
  lwt content = Tutoreact_messages.display userid_o in
  Tutoreact_container.page userid_o content
>>

Create file tutoreact.eliom with the code below.
We will also put module Db here for now.

<<code language="ocaml"|
{shared{
  open Eliom_content.Html5
  open Eliom_content.Html5.D
  open Eliom_csreact
}}

let display userid_o =
  lwt messages = Db.get_messages () in
  lwt l = Lwt_list.map_s (fun id -> lwt msg = Db.get_message id in
                                    Lwt.return (li [pcdata msg]))
      messages
  in
  Lwt.return [ul l]
>>

Compile and run your program:

{{{
make distclean
make test.byte
}}}

To see something, you can add some data manually by calling {{{Db.add_message}}}.





















== Adding new messages

=== Add an input in the page, for connected users

To add an input in the page, replace function {{{display}}} by:

<<code language="ocaml"|
let display_messages () =
  lwt messages = Db.get_messages () in
  lwt l = Lwt_list.map_s (fun id -> lwt msg = Db.get_message id in
                                    Lwt.return (li [pcdata msg]))
      messages
  in
  Lwt.return (ul l)

let display userid_o =
  lwt messages = display_messages () in
  let l = match userid_o with
    | None -> []
    | _ ->
      let inp = Raw.input ~a:[a_input_type `Text] () in
      [inp]
  in
  Lwt.return (messages::l)
>>

=== Make function {{{Db.add_message}}} accessible from the client

To be able to call a function from the client side program,
use {{{server_function}}}:
<<code language="ocaml"|
let add_message_rpc =
  server_function
    Json.t<string>
    (Eba_session.connected_rpc (fun userid value -> Db.add_message value))
>>

Parameter {{{Json.t<string>}}} describes the type of function parameter.
It is used for safe unmarshaling on server side of data sent by the client.

We are using the wrapper {{{Eba_session.connected_rpc}}} to make the function
accessible only by connected users. It fails otherwise with an exception.
See also wrapper {{{Eba_session.Opt.connected_rpc}}} if you want to make your
function accessible both from connected and non-connected users.

=== Bind the input to call the function

To call the function from the client program, we will define a //client value//,
that is, a client side expression that is accessible from server side.
The client value will be executed on client side after the page is loaded.
Syntax for client values of type {{{t}}} is {{{ {t{ ... }} }}}.

Replace second branch of the {{{match}}} in function {{{display}}} by:
<<code language="ocaml"|
let inp = Raw.input ~a:[a_input_type `Text] () in
let _ = {unit{
  let open Lwt_js_events in
  let inp = To_dom.of_input %inp in
  async (fun () -> changes inp (fun _ _ ->
    let value = Js.to_string (inp##value) in
    inp##value <- Js.string "";
    %add_message_rpc value
  ))
}}
in
[inp]
>>

 * We use module {{{Lwt_js_events}}} to manage events.
 * Syntax {{{%v}}} makes possible to use a server side value from client side
 * Function {{{To_dom.of_input}}} returns the JS elements corresponding to the OCaml value {{{%inp}}}
 * {{{Lwt_js_events.async}}} is similair to {{{Lwt.async}}}
 * {{{changes}}} takes a JS element and a function that will be executed
every time a "change" event is received on this element.

This function gets the value of the input, cleans the content of the input,
and calls our server side function. Do not forget the conversions between OCaml strings
and JS strings.

Compile again. Now the messages should be added in the database. But you need to refresh
the page to see them.
















== Structure of a client-server application

We have seen how to send data to the server without stopping the client-side program.
Now we want to update the page.
More generally, the main difference between a Web application and a Web site is that
in the first one, a client side program is running and persists accross HTTP calls (remote procedure calls or page changes). The client process must be able to receive notifications
from the server and update the page accordingly, without regenerating it entirely.
A common practice consists in generating the full interface from client side. But this
is not adapted for all cases. It's usually better to keep the old style Web interaction
and generate pages from server side (for example to make possible indexation by search
engines). In this tutorial, we will see how to generate pages indifferently (and
with the same code) from server or client sides.

In this section, we will introduce two patterns that make possible to write this kind of applications very concisely:
* The client-server cache of data
* Reactive pages

In the following section, we will implement the notification system.

=== Client-server cache

Module {{{Eliom_cscache}}} implements a cache of data, that is, an association table
where you will put the data of your application on client side. For the sake of uniformity,
(pages can be generated either from server or client sides) the cache is also implemented
on server side, with scope request. This avoids to retrieve twice the same data from the
database for the same request.

Create a cache by calling function {{{Eliom_cscache.create}}} from server side.
Implement a function {{{get_data}}} to fetch the data from the database. This function must have an implementation both on server side and client side:

<<code language="ocaml"|
{server{
  let get_data = Db.get_message

  let get_data_rpc =
    server_function Json.t<int>
      (Eba_session.Opt.connected_rpc (fun userid_o id -> get_data id))
}}

{client{
   let get_data id = %get_data_rpc id
}}

{server{
let cache : (int, string) Eliom_cscache.t = Eliom_cscache.create ()
}}
>>
Then call {{{Eliom_cscache.find cache get_data key}}} from either client
or server side to get the value associated to {{{key}}}.
If the value is not present in cache, it will be fetched using function
{{{get_data}}} and added in the cache.

=== Reactive interface

Updating the interface when some data changes is usually not
straightforward. This is usually done by putting identifiers
on elements to find them, and modifying page elements manually
using low level JS functions.

A very elegant solution to simplify this consists in using Functional Reactive Programming (FRP). In reactive programming, you just need to define once
the relation between data and each update produces the recomputation
of all the dependent data. In Ocsigen we are using module
[[http://erratique.ch/logiciel/react|React]] and  [[https://github.com/hhugo/reactiveData/|an extension
for incremental changes in lists]]. Have a look at the documentation
if you are not familiar with FRP.

Module {{{Eliom_content.Html5.R}}} makes possible to define reactive
page elements from client side.

Module {{{Eliom_csreact}}} makes possible to define client side reactive
values from server side, also reactive page elements. To do that, it is
using //shared values//, that is, values that contain both a server
side and a client side value. Basically, use modules {{{SharedReact}}}
and {{{SharedReactiveData}}} instead of {{{React}}}
and {{{ReactiveData}}} to use client-server reactive values.

//Warning: While writing this tutorial,
module Eliom_csreact is still experimental and
all functions are not implemented.//

=== Implementation of the reactive interface

Function {{{display_message}}} must now takes its data from the cache,
and be implemented in a shared section:
<<code language="ocaml"|
{shared{
let display_message id =
  lwt msg = Eliom_cscache.find %cache get_data id in
  Lwt.return (li [pcdata msg])
}}
>>

Function {{{display_messages}}} now creates the reactive list of messages identifiers,
and maps page content from this reactive value using module {{{SharedReactiveData}}}.
<<code language="ocaml"|
let display_messages () =
  lwt messages = Db.get_messages () in
  let rmessages = SharedReactiveData.RList.make messages in
  lwt content = SharedReactiveData.RList.Lwt.map_p
      {shared{ display_message }}
      (fst rmessages)
  in
  Lwt.return (R.ul content)
>>

//In current version (2014-12-08), syntax {{{ {shared{ ...}} }}} is not implemented
for expression. Replace the expression {{{ {shared{ display_message }} }}} by://
<<code language="ocaml"|
      (Eliom_lib.create_shared_value display_message {{display_message}})
>>




















== Notifications

Now we want to receive notification when a message has been added.
To do that easily, we will use module Eba_notif from Eliom-base-app.

First I define a notification module for the type of data I want clients to be able
to listen on (here lists of message identifiers):
<<code language="ocaml"|
module Msg_notif = Eba_notif.Make(struct
  type key = unit
  type notification = int
end)
>>

Type {{{key}}} is the type of the identifier of the data we want listen on.
Here there is only one message list for now (thus {{{unit}}}).

Type {{{notification}}} is the type of the notifications to send.
Here: the identifier of the new message to be added in the list.

We define a function to handle notification.
It adds the new identifier in the reactive list of messages:
<<code language="ocaml"|
{client{

   let handle_notif_message_list rmessages (_, msgid) =
     SharedReactiveData.RList.cons msgid (snd rmessages)

 }}
>>

We notify the server that we are listen on this piece of data by calling (on server side)
function {{{Msg_notig.listen}}}. Notifications are received on client side through
a react event {{{Msg_notif.client_ev ()}}}. We map this event to function
{{{handle_notif_message_list}}}:
<<code language="ocaml"|
let display_messages () =
  Msg_notif.listen ();
  lwt messages = Db.get_messages () in
  let rmessages = SharedReactiveData.RList.make messages in
  ignore {unit{
    ignore (React.E.map (handle_notif_message_list %rmessages)
            %(Msg_notif.client_ev ()));
  }};
  lwt content = SharedReactiveData.RList.Lwt.map_p
      (Eliom_lib.create_shared_value display_message {{display_message}})
      (fst rmessages)
  in
  Lwt.return (R.ul content)
>>

When we add a message, we notify all the client listening on this piece of data:
<<code language="ocaml"|
let add_message_rpc =
  server_function
    Json.t<string>
    (Eba_session.connected_rpc
       (fun userid value ->
          lwt id = Db.add_message value in
          Msg_notif.notify () (fun userid -> Lwt.return (Some id));
          Lwt.return ())
       )
>>

The program is now fully functional. You should see the messages being added in the page automatically, even if messages are added by another user. Try with several browser windows.
