=Module <<a_api_type subproject="server" | module Eliom_parameters >> =
<<pre class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|module>> <<span class="ocsforge_color_uid"|<<span class="ocsforge_color_uid"|Eliom_parameters>>>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="ocsforge_color_keyword"|sig>><<a_api subproject="server" text=".." | module Eliom_parameters >><<span class="ocsforge_color_keyword"|end>>>>~Values used to declare the type of service parameters~.\\

----
\\
~Here are some examples of how to specify the types and names of
   service parameters~:* <<span class="odocwiki_inlinecode"|unit>> for a service without parameter~.
* <<span class="odocwiki_inlinecode"|~(int "myvalue"~)>> for a service that takes one parameter~,
   of type <<span class="odocwiki_inlinecode"|int>>~, called <<span class="odocwiki_inlinecode"|"myvalue">>~.
   ~(~The service handler function takes a parameter of type <<span class="odocwiki_inlinecode"|int>>~)~.
* <<span class="odocwiki_inlinecode"|~(int "myvalue" ~*~* string "mystring"~)>> for a service that takes
   two parameters~, one of type <<span class="odocwiki_inlinecode"|int>> called <<span class="odocwiki_inlinecode"|"myvalue">>~,
   and one of type <<span class="odocwiki_inlinecode"|string>> called <<span class="odocwiki_inlinecode"|"mystring">>~.
   ~(~The service handler function takes a parameter of type <<span class="odocwiki_inlinecode"|~(int ~* string~)>>~)~.
* <<span class="odocwiki_inlinecode"|~(opt ~(int "myvalue"~)~)>> for a service that takes an optional parameter
   of type <<span class="odocwiki_inlinecode"|int>> called <<span class="odocwiki_inlinecode"|"myvalue">>~.
   ~(~The handler function takes a parameter of type <<span class="odocwiki_inlinecode"|int option>>~)~.
* <<span class="odocwiki_inlinecode"|~(set int "myvalue"~)>> for a service that takes any number of integer
   parameters~, all called <<span class="odocwiki_inlinecode"|"myvalue">>~.
   ~(~The handler function takes a parameter of type <<span class="odocwiki_inlinecode"|int list>>~)~.
* <<span class="odocwiki_inlinecode"|list "l" ~(int "myvalue" ~*~* string "mystring"~)>> for a service
   taking a list of pairs~.
   ~(~The handler takes a parameter of type <<span class="odocwiki_inlinecode"|~(int ~* string~) list>>~)~.


~Note~: ~We could make even more static checking in parameter~'s types ~(for example
to forbid <<span class="odocwiki_inlinecode"|any>> in suffixes~)~, but it would make the types of parameters and
services more complicated~. ~We believe that these errors should be easy
to find during implementation~.\\
<<pre class="ocsforge_color odocwiki_code" id="TYPEparams_type"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a, +'b, +'c<<span class="ocsforge_color_delimiter"| ) >>>> <<span class="odocwiki_name"|params~_type>>>><<div class="odocwiki_info"|
==@@id="2_Typesusedbythemodule"@@~Types used by the module==
\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEno_param_name"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_name"|no~_param~_name>>>><<div class="odocwiki_info"|~Type for parameters of a web page~.* <<span class="odocwiki_inlinecode"| ~'typ>> is the type of the parameter ~(taken by the service handler~)
* <<span class="odocwiki_inlinecode"| ~'suff>> is a polymorphic variant type telling the type of parameter
   ~(suffix or not ~.~.~.~)
* <<span class="odocwiki_inlinecode"| ~'name>> is the type of the parameter name ~(usually using <<a_api subproject="server" | type Eliom_parameters.param_name >>~)

\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEparam_name"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|param~_name>>>><<div class="odocwiki_info"|empty type used when it is not possible to use the parameter in a form\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEsetoneradio"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|setoneradio>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_type"|[ `One of 'a | `Radio of 'a | `Set of 'a ]>> >><<div class="odocwiki_info"|~Type for names of page parameters ~(given to the functions
   to construct forms~, for example in <<a_api subproject="server" | val Eliom_output.Html5_forms.get_form >>~)~.
   ~The names of parameters are not just strings to enforce using
   forms widgets with the right parameter type~.
   ~The parameter of that type is often a subtype of the polymorphic variant
   type <<span class="odocwiki_inlinecode"|~[ `~Set of ~'a ~| `~One of ~'a ~| `~Radio of ~'a ~]>>~, where* <<span class="odocwiki_inlinecode"|`~Set of ~'a>> means~: any number of <<span class="odocwiki_inlinecode"|~'a>>
* <<span class="odocwiki_inlinecode"|`~One of ~'a>> means~: exactly one <<span class="odocwiki_inlinecode"|~'a>>
* <<span class="odocwiki_inlinecode"|`~Radio of ~'a>> means~: zero or one <<span class="odocwiki_inlinecode"|~'a>>

\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEoneradio"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|oneradio>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_type"|[ `One of 'a | `Radio of 'a ]>> >><<div class="odocwiki_info"|~This type is used by some form widgets like
   <<a_api subproject="server" | val Eliom_output.Html5_forms.int_input >> that may be used against services
   expecting one parameter of that name~,
   or services expecting an optional parameter of that name~,
   or services expecting any number of parameters of that name~.\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEsetone"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|setone>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_type"|[ `One of 'a | `Set of 'a ]>> >><<div class="odocwiki_info"|~This type is used by some form widgets like
   <<a_api subproject="server" | val Eliom_output.Html5_forms.int_image_input >> that may be used against services
   expecting one parameter of that name
   or services expecting an optional parameter of that name~.\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEbinsum"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a, 'b<<span class="ocsforge_color_delimiter"| ) >>>> <<span class="odocwiki_name"|binsum>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="odocwiki_variants"|<<span class="odocwiki_variant"|<<span class="odocwiki_variant_constr"|<<span class="ocsforge_color_keyword"| ~|>> <<span class="ocsforge_color_uid"|Inj1>> <<span class="ocsforge_color_keyword"|of>> <<span class="odocwiki_type"|'a>>>>>><<span class="odocwiki_variant"|<<span class="odocwiki_variant_constr"|<<span class="ocsforge_color_keyword"| ~|>> <<span class="ocsforge_color_uid"|Inj2>> <<span class="ocsforge_color_keyword"|of>> <<span class="odocwiki_type"|'b>>>>>>>>>><<div class="odocwiki_info"|~This type is used by some form widgets like
   <<a_api subproject="server" | val Eliom_output.Html5_forms.int_button >> that may be used against services
   expecting one parameter of that name~,
   or services expecting any number of parameters of that name~.\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPElistnames"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|listnames>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="ocsforge_color_delimiter"|~{>>
<<span class="odocwiki_record"|<<span class="odocwiki_field"|<<span class="odocwiki_field_descr"|  <<span class="ocsforge_color_label"|it:>> <<span class="odocwiki_type"|'b 'c. <<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> 'b <<span class="ocsforge_color_delimiter"| -> >> 'c <<span class="ocsforge_color_delimiter"| -> >> 'c<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >> 'b list <<span class="ocsforge_color_delimiter"| -> >> 'c <<span class="ocsforge_color_delimiter"| -> >> 'c>><<span class="ocsforge_color_delimiter"|~;>> >>>>>><<span class="ocsforge_color_delimiter"|~}>>>><<div class="odocwiki_info"|~Type used for parameters of type bynary sum\\
>>
\\
~Type of the iterator used to construct forms from lists\\
<<pre id="VALint" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|int>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>int, [ `WithoutSuffix ], [ `One of int ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|
==@@id="2_Basictypesofpagesparameters"@@~Basic types of pages parameters==
\\
>>
<<pre id="VALint32" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|int~3~2>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>int32, [ `WithoutSuffix ],\\   [ `One of int32 ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|int s>> tells that the service takes an integer as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.\\
>>
<<pre id="VALint64" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|int~6~4>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>int64, [ `WithoutSuffix ],\\   [ `One of int64 ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|int~3~2 s>> tells that the service takes a ~3~2 bits integer as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.\\
>>
<<pre id="VALfloat" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|float>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>float, [ `WithoutSuffix ],\\   [ `One of float ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|int~6~4 s>> tells that the service takes a ~6~4 bits integer as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.\\
>>
<<pre id="VALstring" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|string>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string, [ `WithoutSuffix ],\\   [ `One of string ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|float s>> tells that the service takes a floating point number as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.\\
>>
<<pre id="VALbool" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|bool>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>bool, [ `WithoutSuffix ],\\   [ `One of bool ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|string s>> tells that the service takes a string as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.\\
>>
<<pre id="VALfile" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|file>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >><<a_api subproject="server" text="Eliom_pervasives.file_info" | type Eliom_pervasives.file_info >>, [ `WithoutSuffix ],\\   [ `One of <<a_api subproject="server" text="Eliom_pervasives.file_info" | type Eliom_pervasives.file_info >> ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|bool s>> tells that the service takes a boolean as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.
   ~(to use for example with boolean checkboxes~)\\
>>
<<pre id="VALunit" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|unit>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>unit, [ `WithoutSuffix ], unit<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|file s>> tells that the service takes a file as parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~.\\
>>
<<pre id="VALuser_type" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|user~_type>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| of_string: >><<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> 'a<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| to_string: >><<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> string<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], [ `One of 'a ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|used for services that don~'t have any parameters\\
>>
\\
~Allows to use whatever type you want for a parameter of the service~.
   <<span class="odocwiki_inlinecode"|user~_type t~_of~_string string~_of~_t s>> tells that the service take a parameter~, labeled <<span class="odocwiki_inlinecode"|s>>~, and that the server will have to use <<span class="odocwiki_inlinecode"|t~_of~_string>> and <<span class="odocwiki_inlinecode"|string~_of~_t>> to make the conversion from and to string~.\\
<<pre class="ocsforge_color odocwiki_code" id="TYPEcoordinates"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_name"|coordinates>> <<span class="ocsforge_color_delimiter"|~=>> <<span class="ocsforge_color_delimiter"|~{>>
<<span class="odocwiki_record"|<<span class="odocwiki_field"|<<span class="odocwiki_field_descr"|  <<span class="ocsforge_color_label"|abscissa:>> <<span class="odocwiki_type"|int>><<span class="ocsforge_color_delimiter"|~;>> >>>><<span class="odocwiki_field"|<<span class="odocwiki_field_descr"|  <<span class="ocsforge_color_label"|ordinate:>> <<span class="odocwiki_type"|int>><<span class="ocsforge_color_delimiter"|~;>> >>>>>><<span class="ocsforge_color_delimiter"|~}>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|coordinates>> is for the data sent by an <<span class="odocwiki_inlinecode"|~<input type~="image" ~.~.~.~>>>~.\\
>>
<<pre id="VALcoordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >><<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<pre id="VALstring_coordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|string~_coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of string * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ]\\   <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|string s>> tells that the service takes as parameters the coordinates
   of the point where the user were clicked on an image~.\\
>>
<<pre id="VALint_coordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|int~_coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>int * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of int * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ]\\   <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~It is possible to send a value together with the coordinates
   ~(<<span class="odocwiki_inlinecode"|~<input type~="image" value~="~.~.~." ~.~.~.~>>>~) ~(~Here a string~)\\
>>
<<pre id="VALint32_coordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|int~3~2~_coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>int32 * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of int32 * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ]\\   <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Same for an integer value\\
>>
<<pre id="VALint64_coordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|int~6~4~_coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>int64 * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of int64 * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ]\\   <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Same for a ~3~2 bits integer value\\
>>
<<pre id="VALfloat_coordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|float~_coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>float * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of float * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ]\\   <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Same for a ~6~4 integer value\\
>>
<<pre id="VALuser_type_coordinates" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|user~_type~_coordinates>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| of_string: >><<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> 'a<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| to_string: >><<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> string<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\   [ `One of 'a * <<a_api subproject="server" text="coordinates" | type Eliom_parameters.coordinates >> ]\\   <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Same for a float value\\
>>
\\
~Same for a value of your own type\\
<<pre id="VAL( ** )" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|~( ~*~* ~)>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'c, [< `Endsuffix | `WithoutSuffix ] as 'd, 'e<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a * 'c, 'd, 'b * 'e<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|
==@@id="2_Composingtypesofpagesparameters"@@~Composing types of pages parameters==
\\
>>
<<pre id="VALprod" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|prod>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'c, [< `Endsuffix | `WithoutSuffix ] as 'd, 'e<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a * 'c, 'd, 'b * 'e<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~This is a combinator to allow the service to take several parameters
   ~(see examples above~)
   //~Warning~: it is a binary operator~.
   ~Pages cannot take tuples but only pairs~.//\\
>>
<<pre id="VALsum" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|sum>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'c, [ `WithoutSuffix ], 'd<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_delimiter"| ( >>'a, 'c<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="binsum" | type Eliom_parameters.binsum >>, [ `WithoutSuffix ], 'b * 'd<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Same as <<span class="odocwiki_inlinecode"|~*~*>> above\\
>>
<<pre id="VALopt" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|opt>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a option, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~This is a combinator to allow the service to take either a parameter
   or another one
   //~Warning~: it is a binary operator~.//\\
>>
<<pre id="VALradio" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|radio>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >>\\   <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], [ `One of 'b ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\   <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a option, [ `WithoutSuffix ],\\   [ `Radio of 'b ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Use this if you want one or some parameters to be optional\\
>>
<<pre id="VALany" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|any>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_delimiter"| ( >>string * string<<span class="ocsforge_color_delimiter"| ) >> list, [ `WithoutSuffix ], unit<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Use this if you want to use this parameter with a radio button~.
    ~It is equivalent to <<span class="odocwiki_inlinecode"|opt>> but works only for one single parameter~.\\
>>
<<pre id="VALset" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|set>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >>\\   <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], [ `One of 'b ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\   <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a list, [ `WithoutSuffix ],\\   [ `Set of 'b ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Use this if you want to take any parameters~.
   ~The service will answer to all the request~,
   and get all parameters as an association list of strings~.\\
>>
<<pre id="VALlist" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|list>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a list, [ `WithoutSuffix ], 'b <<a_api subproject="server" text="listnames" | type Eliom_parameters.listnames >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Use this if you want your service to take several parameters
   with the same name~. ~The service handler will receive a list of values~.
   ~To create the form~, just use the same name several times~.
   ~For example <<span class="odocwiki_inlinecode"|set int "i">> will match the parameter string
   <<span class="odocwiki_inlinecode"|i~=~4~&i~=~2~2~&i~=~1~1~1>> and send to the service handler a list containing
   the three integers ~4~, ~2~2 and ~1~1~1~. ~The order is unspecified~.\\
>>
<<pre id="VALregexp" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|regexp>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_uid"|Netstring_pcre>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|regexp>> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| to_string: >><<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> string<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string, [ `WithoutSuffix ],\\   [ `One of string ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~The service takes a list of parameters~.
   ~The first parameter of this function is the name of the list~.
   ~The service handler will receive a list of values~.
   ~To create the form~, an iterator of type <<a_api subproject="server" | type Eliom_parameters.listnames >> is given to
   generate the name for each value~.\\
>>
<<pre id="VALsuffix" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|suffix>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| ?redirect_if_not_suffix: >>bool <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [< `Endsuffix | `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|regexp r d s>> tells that the service takes a string
   that matches the regular expression <<span class="odocwiki_inlinecode"|r>> as parameter~,
   labeled <<span class="odocwiki_inlinecode"|s>>~, and that will be rewritten in d~.
   ~The syntax of regexp is ~P~C~R~E~'s one ~(uses <<span class="odocwiki_inlinecode"|~Netstring~_pcre>>~, from ~O~Camlnet~)~.
   ~For example~: <<span class="odocwiki_inlinecode"|regexp ~(~Netstring~_pcre~.regexp "~\~[~(~.~* ~)~\~]"~) "~(~$~1~)" "myparam">>
   will match the parameter <<span class="odocwiki_inlinecode"|myparam~=~[hello~]>> and send the string <<span class="odocwiki_inlinecode"|"~(hello~)">> to
   the service handler~.\\
>>
<<pre id="VALall_suffix" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|all~_suffix>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string list, [ `Endsuffix ],\\   [ `One of string list ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Tells that the parameter of the service handler is
    the suffix of the ~U~R~L of the current service~.
    e~.g~. <<span class="odocwiki_inlinecode"|suffix ~(int "i" ~*~* string "s"~)>> will match an ~U~R~L ending by <<span class="odocwiki_inlinecode"|~3~8~0~/yo>>~.
    and send <<span class="odocwiki_inlinecode"|~(~3~8~0~, "yo"~)>> to the service handler~.\\


    ~For each service with suffix~, there is also a service with regular
    parameters ~(without suffix~) that will be used if you create a form
    towards a service with suffix~.
    ~If <<span class="odocwiki_inlinecode"|redirect~_if~_not~_suffix>> is <<span class="odocwiki_inlinecode"|true>> ~(default~)~,
    this service without suffix will be redirected to the suffix version~.\\
>>
<<pre id="VALall_suffix_string" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|all~_suffix~_string>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string, [ `Endsuffix ],\\   [ `One of string ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Takes all the suffix~, as long as possible~, as a ~(slash separated~)
   string list\\
>>
<<pre id="VALall_suffix_user" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|all~_suffix~_user>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| of_string: >><<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> 'a<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| to_string: >><<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> string<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `Endsuffix ], [ `One of 'a ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Takes all the suffix~, as long as possible~, as a string\\
>>
<<pre id="VALall_suffix_regexp" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|all~_suffix~_regexp>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_uid"|Netstring_pcre>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|regexp>> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| to_string: >><<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> string<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string, [ `Endsuffix ],\\   [ `One of string ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Takes all the suffix~, as long as possible~,
        with a type specified by the user~.\\
>>
<<pre id="VALsuffix_prod" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|suffix~_prod>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| ?redirect_if_not_suffix: >>bool <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [< `Endsuffix | `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'c, [ `WithoutSuffix ], 'd<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a * 'c, [ `WithSuffix ], 'b * 'd<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|all~_suffix~_regexp r d s>> takes all the suffix~, as long as possible~,
   matching the regular expression <<span class="odocwiki_inlinecode"|r>>~, name <<span class="odocwiki_inlinecode"|s>>~, and rewrite it in <<span class="odocwiki_inlinecode"|d>>~.\\
>>
<<pre id="VALsuffix_const" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|suffix~_const>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>unit, [ `WithoutSuffix ],\\   [ `One of unit ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~Tells that the function that will generate the service takes
   a pair whose first element is the suffix of the ~U~R~L of the current service~,
   and the second element corresponds to other ~(regular~) parameters~.
   e~.g~.~: <<span class="odocwiki_inlinecode"|suffix~_prod ~(int "suff" ~*~* all~_suffix "endsuff"~) ~(int "i"~)>>
   will match an ~U~R~L ending by <<span class="odocwiki_inlinecode"|~7~7~7~/go~/go~/go~?i~=~3~2~0>> and send the value
   <<span class="odocwiki_inlinecode"|~(~(~7~7~7~, ~["go"~;"go"~;"go"~]~)~, ~3~2~0~)>> to the service handler~.\\
>>
<<pre class="ocsforge_color odocwiki_code" id="TYPEcaml"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|'a>> <<span class="odocwiki_name"|caml>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|suffix~_const v>> is used only inside suffixes ~(do nothing for
    regular parameters~)~.
    ~It tells that the service takes a constant parameter
    inside the suffix~, whose value must be <<span class="odocwiki_inlinecode"|v>>~.
    ~It is used for putting constant directory names inside
    suffix parameters ~(and thus make suffix parameters not be only suffixes
    but anywhere you want in the path~, e~.g~. <<span class="odocwiki_inlinecode"|~/param~1~/const~/param~2>>~)~.\\
>>
<<pre id="VALcaml" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|caml>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  'a <<span class="ocsforge_color_uid"|Deriving_Json>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ],\\   [ `One of 'a <<a_api subproject="server" text="caml" | type Eliom_parameters.caml >> ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|marshaled ~O~Caml values of type ~'a\\
>>
<<pre id="VALraw_post_data" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|raw~_post~_data>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_delimiter"| ( >><<span class="ocsforge_color_delimiter"| ( >>string * string<<span class="ocsforge_color_delimiter"| ) >> * <<span class="ocsforge_color_delimiter"| ( >>string * string<<span class="ocsforge_color_delimiter"| ) >> list<<span class="ocsforge_color_delimiter"| ) >> option *\\   string <<span class="ocsforge_color_uid"|Ocsigen_stream>><<span class="ocsforge_color_delimiter"| . >><<span class="ocsforge_color_lid"|t>> option, [ `WithoutSuffix ],\\   <<a_api subproject="server" text="no_param_name" | type Eliom_parameters.no_param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|caml s>> tells that the service is expecting some caml ~(client side~)
    program to send some value of type ~'a~, marshaled~.
    ~As usual <<span class="odocwiki_inlinecode"|s>> is the name of the parameter~.\\
>>
<<pre id="VALguard" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|guard>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >>\\   <<span class="ocsforge_color_delimiter"| ( >>'a, 'b, [ `One of string ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\   <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >><<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> bool<<span class="ocsforge_color_delimiter"| ) >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, 'b, [ `One of string ] <<a_api subproject="server" text="param_name" | type Eliom_parameters.param_name >><<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="odocwiki_info"|~When the content type is neither ~U~R~Lencoded form data or multipart data~,
    it is possible to get it as a stream of strings~.
    ~The first element of the pair is the content~-type~.
    ~This kind of parameter cannot be combined with other ones~,
    and it is not possible to create a form towards a service taking
    this kind of parameter~.\\
>>
\\
<<span class="odocwiki_inlinecode"|guard construct name pred>> returns the same parameter
    as <<span class="odocwiki_inlinecode"|construct name>> but with ensuring that each value must satisfy <<span class="odocwiki_inlinecode"|pred>>~.
    ~For instance~: <<span class="odocwiki_inlinecode"|int "age" ~(~(~>~=~) ~0~)>>\\
<<pre class="ocsforge_color odocwiki_code" id="TYPEnon_localized_params"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_type"|<<span class="ocsforge_color_delimiter"| ( >>'a, +'b, +'c<<span class="ocsforge_color_delimiter"| ) >>>> <<span class="odocwiki_name"|non~_localized~_params>>>><<div class="odocwiki_info"|
==@@id="2_Nonlocalizedparameters"@@~Non localized parameters==
\\
>>
<<pre id="VALmake_non_localized_parameters" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|make~_non~_localized~_parameters>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_label"| prefix: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| name: >>string <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_label"| ?persistent: >>bool <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="non_localized_params" | type Eliom_parameters.non_localized_params >>>>>><<pre id="VALget_non_localized_get_parameters" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|get~_non~_localized~_get~_parameters>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="non_localized_params" | type Eliom_parameters.non_localized_params >> <<span class="ocsforge_color_delimiter"| -> >>\\  'a option>>>><<div class="odocwiki_info"|create a new specification for non localized parameters~.
    ~You must give a name to this set of parameters~.
    ~Warning~: the names must be unique for the whole application~.
    ~That~'s why the name is composed by a prefix ~(the name of your project~) and
    another string ~(the name of your non localized parameters~)~.\\


    ~Will fail with exception <<span class="odocwiki_inlinecode"|~Failure ~_>> if the name contains a dot~.
    ~If <<span class="odocwiki_inlinecode"|~?persistent>> is <<span class="odocwiki_inlinecode"|true>>~, the non localized parameter
    may remain if you call another service~, if this service
    allows this ~(default <<span class="odocwiki_inlinecode"|false>>~)~.\\
>>
<<pre id="VALget_non_localized_post_parameters" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|get~_non~_localized~_post~_parameters>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [ `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="non_localized_params" | type Eliom_parameters.non_localized_params >> <<span class="ocsforge_color_delimiter"| -> >>\\  'a option>>>><<div class="odocwiki_info"|<<span class="odocwiki_inlinecode"|get~_non~_localized~_get~_parameters ~~sp p>> decodes and
    returns non localized ~G~E~T parameters specified by <<span class="odocwiki_inlinecode"|p>> if present~.\\
>>
\\
<<span class="odocwiki_inlinecode"|get~_non~_localized~_post~_parameters ~~sp p>> decodes and
    returns non localized ~P~O~S~T parameters specified by <<span class="odocwiki_inlinecode"|p>> if present~.\\
<<pre class="ocsforge_color odocwiki_code" id="TYPEnl_params_set"|<<span class="ocsforge_color_keyword"|type>> <<span class="odocwiki_name"|nl~_params~_set>>>><<div class="odocwiki_info"|~Use this type to give non localized parameters to a link or a form\\
>>
<<pre id="VALempty_nl_params_set" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|empty~_nl~_params~_set>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|<<a_api subproject="server" text="nl_params_set" | type Eliom_parameters.nl_params_set >>>>>><<pre id="VALadd_nl_parameter" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|add~_nl~_parameter>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<a_api subproject="server" text="nl_params_set" | type Eliom_parameters.nl_params_set >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [< `WithSuffix | `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="non_localized_params" | type Eliom_parameters.non_localized_params >> <<span class="ocsforge_color_delimiter"| -> >>\\  'a <<span class="ocsforge_color_delimiter"| -> >> <<a_api subproject="server" text="nl_params_set" | type Eliom_parameters.nl_params_set >>>>>><<pre id="VALget_nl_params_names" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|get~_nl~_params~_names>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, [< `WithSuffix | `WithoutSuffix ], 'b<<span class="ocsforge_color_delimiter"| ) >>\\  <<a_api subproject="server" text="non_localized_params" | type Eliom_parameters.non_localized_params >> <<span class="ocsforge_color_delimiter"| -> >> 'b>>>><<pre id="VALget_to_and_from" class="ocsforge_color odocwiki_code"|<<span class="ocsforge_color_keyword"|val>> <<span class="odocwiki_name"|get~_to~_and~_from>> <<span class="ocsforge_color_delimiter"|~:>> <<span class="odocwiki_type"|\\  <<span class="ocsforge_color_delimiter"| ( >>'a, 'b, 'c<<span class="ocsforge_color_delimiter"| ) >> <<a_api subproject="server" text="params_type" | type Eliom_parameters.params_type >> <<span class="ocsforge_color_delimiter"| -> >>\\  <<span class="ocsforge_color_delimiter"| ( >>string <<span class="ocsforge_color_delimiter"| -> >> 'a<<span class="ocsforge_color_delimiter"| ) >> * <<span class="ocsforge_color_delimiter"| ( >>'a <<span class="ocsforge_color_delimiter"| -> >> string<<span class="ocsforge_color_delimiter"| ) >>>>>><<div class="odocwiki_info"|~Given a parameter type~, get the two functions
    that converts from and to strings~. ~You should
    only use this function on* options ~;
* basic types ~: int~, int~3~2~, int~6~4~, float~, string
* marshal
* unit
* string
* bool

\\
>>
