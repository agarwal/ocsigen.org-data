=Module <<a_api_type subproject="server" | module Eliom_services >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_services: <<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_services >><<span class='code'|end>>>>~Types~, creation and manipulation of ~Eliom services~.\\

----
<<div  id="EXCEPTIONWrong_session_table_for_CSRF_safe_coservice" class="code"|<<span class="keyword"|exception>> Wrong_session_table_for_CSRF_safe_coservice>>
<<div class="code" id="TYPEsuff"|<<span class="keyword"|type>> suff = <<span class="code type"|[ `WithSuffix | `WithoutSuffix ]>> >>
<<div class="info"|
==@@id="2_Typesofservices"@@~Types of services==
\\
>>

<<div class="code" id="TYPEservcoserv"|<<span class="keyword"|type>> servcoserv = <<span class="code type"|[ `Coservice | `Service ]>> >>

<<div class="code" id="TYPEgetpost"|<<span class="keyword"|type>> getpost = <<span class="code type"|[ `Get | `Post ]>> >>

<<div class="code" id="TYPEattached_service_kind"|<<span class="keyword"|type>> attached~_service~_kind = <<span class="code type"|[ `External | `Internal of <<a_api subproject="server" text="servcoserv" | type Eliom_services.servcoserv >> ]>> >>

<<div class="code" id="TYPEinternal"|<<span class="keyword"|type>> internal = <<span class="code type"|[ `Internal of <<a_api subproject="server" text="servcoserv" | type Eliom_services.servcoserv >> ]>> >>

<<div class="code" id="TYPEregistrable"|<<span class="keyword"|type>> registrable = <<span class="code type"|[ `Registrable | `Unregistrable ]>> >>

<<div class="code" id="TYPEa_s"|<<span class="keyword"|type>> <<span class="code type"|(+'a, +'b)>> a~_s>>
<<div class="info"|~You can call register function only on registrable services\\
>>

<<div class="code" id="TYPEna_s"|<<span class="keyword"|type>> <<span class="code type"|+'a>> na~_s>>

<<div class="code" id="TYPEservice_kind"|<<span class="keyword"|type>> service~_kind = <<span class="code type"|\\{{{   }}}[ `Attached of\\{{{   }}}      (<<a_api subproject="server" text="attached_service_kind" | type Eliom_services.attached_service_kind >>, <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >>)\\{{{   }}}      <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >>\\{{{   }}}  | `Nonattached of <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >> <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ]>> >>

<<div class="code" id="TYPEinternal_service_kind"|<<span class="keyword"|type>> internal~_service~_kind = <<span class="code type"|\\{{{   }}}[ `Attached of\\{{{   }}}      (<<a_api subproject="server" text="internal" | type Eliom_services.internal >>, <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >>) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >>\\{{{   }}}  | `Nonattached of <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >> <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ]>> >>

<<div class="code" id="TYPEget_service_kind"|<<span class="keyword"|type>> get~_service~_kind = <<span class="code type"|\\{{{   }}}[ `Attached of\\{{{   }}}      (<<a_api subproject="server" text="attached_service_kind" | type Eliom_services.attached_service_kind >>, [ `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >>\\{{{   }}}  | `Nonattached of [ `Get ] <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ]>> >>

<<div class="code" id="TYPEpost_service_kind"|<<span class="keyword"|type>> post~_service~_kind = <<span class="code type"|\\{{{   }}}[ `Attached of\\{{{   }}}      (<<a_api subproject="server" text="attached_service_kind" | type Eliom_services.attached_service_kind >>, [ `Post ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >>\\{{{   }}}  | `Nonattached of [ `Post ] <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ]>> >>

<<div class="code" id="TYPEattached"|<<span class="keyword"|type>> attached = <<span class="code type"|\\{{{   }}}[ `Attached of\\{{{   }}}      (<<a_api subproject="server" text="attached_service_kind" | type Eliom_services.attached_service_kind >>, <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >>)\\{{{   }}}      <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ]>> >>

<<div class="code" id="TYPEnonattached"|<<span class="keyword"|type>> nonattached = <<span class="code type"|[ `Nonattached of <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >> <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ]>> >>

<<div class="code" id="TYPEservice"|<<span class="keyword"|type>> <<span class="code type"|('a, 'b, +'c, +'d, +'e, +'f, +'g, +'h)>> service>>

<<div id="VALget_get_or_post" class="code"|<<span class="keyword"|val>> get~_get~_or~_post : <<span class="code type"|\\{{{   }}}('a, 'b,\\{{{   }}}   [< `Attached of\\{{{   }}}        (<<a_api subproject="server" text="attached_service_kind" | type Eliom_services.attached_service_kind >>, [< <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >> ])\\{{{   }}}        <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >>\\{{{   }}}    | `Nonattached of [< <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >> ] <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   'c, 'd, 'e, 'f, 'g)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >> -> <<a_api subproject="server" text="getpost" | type Eliom_services.getpost >>>>>><<div class="info"|~Type of services~.* <<span class='code'| ~'get>> is the type of ~G~E~T parameters
* <<span class='code'| ~'post>> is the type of ~P~O~S~T parameters
* <<span class='code'| ~'kind>> is a subtype of <<a_api subproject="server" | type Eliom_services.service_kind >>
    ~(attached or non~-attached
    service~, internal or external~, ~G~E~T only or with ~P~O~S~T parameters~)
* <<span class='code'| ~'tipo>> is a phantom type stating the kind of parameters it uses
    ~(suffix or not~)
* <<span class='code'| ~'getnames>> is the type of ~G~E~T parameters names
* <<span class='code'| ~'postnames>> is the type of ~P~O~S~T parameters names
* <<span class='code'| ~'registrable>> is a phantom type~,
    subtype of <<a_api subproject="server" | type Eliom_services.registrable >>~,
    telling if it is possible to register a handler on this service~.
* <<span class='code'| ~'return >> is an information on what the service returns

\\
>>
<<div id="VALregister_eliom_module" class="code"|<<span class="keyword"|val>> register~_eliom~_module : <<span class="code type"|string -> (unit -> unit) -> unit>>>><<div class="info"|
==@@id="2_Registrationofnamedmodules"@@~Registration of named modules==
\\


    ~This functionality allows to register module initialization functions
    for ~Eliom modules which will be executed when the corresponding module
    is initialized in <<span class='code'|ocsigen~.conf>>~.\\
>>
\\
~This function is used to specify the initialization function
   for ~Eliom modules linked dynamic or statically into the server~.
   <<span class='code'|register~_eliom~_module name f>> registers the initialization function <<span class='code'|f>> for
   module <<span class='code'|name>>~. ~The <<span class='code'|f>> function will be invoked when the module is
   initialized in the configuration file using
   <<span class='code'|~<eliom name~="name"~> ~.~.~. ~<~/eliom~>>>~, which
   is equivalent to <<span class='code'|~<eliom module~="name~.cmo"~> ~.~.~. ~<~/eliom~>>> with the exception
   that it does not load the module using <<span class='code'|~Dynlink>>~.\\
\\

==@@id="2_Definitionsofservices"@@~Definitions of services==
\\


    //~Warning~: ~These functions must be called when the site
    information is available~, that is~, either
    during a request or during the initialisation phase of the site~.
    ~Otherwise~, it will raise the exception
    <<a_api subproject="server" | exception Eliom_common.Eliom_site_information_not_available >>~.
    ~If you are using static linking~, you must delay the call to this function
    until the configuration file is read~, using
    <<a_api subproject="server" | val Eliom_services.register_eliom_module >>~. ~Otherwise you will also get
    this exception~.//\\
<<div id="VALservice" class="code"|<<span class="keyword"|val>> service : <<span class="code type"|\\{{{   }}}?https:bool ->\\{{{   }}}  path:<<a_api subproject="server" text="Eliom_pervasives.Url.path" | type Eliom_pervasives.Url.path >> ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?priority:int ->\\{{{   }}}  get_params:('a, [< <<a_api subproject="server" text="suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, unit, [> `Registrable ], 'd)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|
===@@id="3_Mainservices"@@~Main services===
\\
>>
<<div id="VALexternal_service" class="code"|<<span class="keyword"|val>> external~_service : <<span class="code type"|\\{{{   }}}prefix:string ->\\{{{   }}}  path:<<a_api subproject="server" text="Eliom_pervasives.Url.path" | type Eliom_pervasives.Url.path >> ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  get_params:('a, [< <<a_api subproject="server" text="suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('a, unit, [> `Attached of ([> `External ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, unit, [> `Unregistrable ], 'd)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|<<span class='code'|service ~~path ~~get~_params ~(~)>> creates a
    <<a_api subproject="server" | val Eliom_services.service >> associated
    to the path <<span class='code'|path>>~, taking the ~G~E~T parameters <<span class='code'|get~_params>>~.\\


    ~If <<span class='code'|~~https>> is true~, all links towards that service will use https~.\\


    ~The default priority is ~0~. ~If you want the service to be tried before
    ~(resp after~)
    the other ones at the same path~, put a higher ~(resp~. lower~) priority~.\\
>>
<<div id="VALexternal_post_service" class="code"|<<span class="keyword"|val>> external~_post~_service : <<span class="code type"|\\{{{   }}}prefix:string ->\\{{{   }}}  path:<<a_api subproject="server" text="Eliom_pervasives.Url.path" | type Eliom_pervasives.Url.path >> ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  get_params:('a, [< <<a_api subproject="server" text="suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('a, 'd, [> `Attached of ([> `External ], [> `Post ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Unregistrable ], 'f)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Creates a service for an external web site~, that will use ~G~E~T method~.
    ~This allows to creates links or forms towards other ~Web sites using
    ~Eliom~'s syntax~.\\


    ~The parameter labelled <<span class='code'|~~path>> is the ~U~R~L path~, and each element of
    the list will be ~U~R~L~-encoded~.\\


    ~The parameter labelled <<span class='code'|~~prefix>> contains all what you want to put before
    the path~. ~It usually starts with "http~:~/~/" plus
    the name of the server~. ~The whole ~U~R~L is constructed from the prefix~,
    the path and parameters~. ~The prefix is not encoded~.
    ~An empty prefix can be used to make a link to another site of the same
    server~.\\
>>
<<div id="VALpost_service" class="code"|<<span class="keyword"|val>> post~_service : <<span class="code type"|\\{{{   }}}?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api subproject="server" text="suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ], 'd)\\{{{   }}}           <<a_api subproject="server" text="service" | type Eliom_services.service >> ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?priority:int ->\\{{{   }}}  post_params:('e, [ `WithoutSuffix ], 'f) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('a, 'e,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [ `Coservice | `Service ] ], [> `Post ])\\{{{   }}}        <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'f, [> `Registrable ], 'g)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Same~, with ~P~O~S~T method~.\\
>>
\\
~Creates a service that takes ~P~O~S~T parameters~.
    <<span class='code'|fallback>> is a service without ~P~O~S~T parameters~.
    ~You can~'t create an service with ~P~O~S~T parameters
    if the same service does not exist without ~P~O~S~T parameters~.
    ~Thus~, the user cannot put a bookmark on a page that does not exist~.\\
<<div id="VALcoservice" class="code"|<<span class="keyword"|val>> coservice : <<span class="code type"|\\{{{   }}}?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> > `Session ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:(unit, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [ `Service ] ], [ `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [ `WithoutSuffix ], unit, unit, [< <<a_api subproject="server" text="registrable" | type Eliom_services.registrable >> ],\\{{{   }}}            'a)\\{{{   }}}           <<a_api subproject="server" text="service" | type Eliom_services.service >> ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  get_params:('b, [ `WithoutSuffix ], 'c) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('b, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'c, unit, [> `Registrable ], 'd)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|
===@@id="3_Attachedcoservices"@@~Attached coservices===
\\
>>
<<div id="VALpost_coservice" class="code"|<<span class="keyword"|val>> post~_coservice : <<span class="code type"|\\{{{   }}}?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> > `Session ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                ([ `Internal of [< `Coservice | `Service ] ], [ `Get ])\\{{{   }}}                <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api subproject="server" text="suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ], 'd)\\{{{   }}}           <<a_api subproject="server" text="service" | type Eliom_services.service >> ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  post_params:('e, [ `WithoutSuffix ], 'f) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('a, 'e,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Coservice ] ], [> `Post ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'f, [> `Registrable ], 'g)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Creates an attached coservice~. ~A coservice is another version of an
    already existing main service~, where you can register another handler~.
    ~The two versions are automatically distinguished using an extra parameter
    added automatically by ~Eliom~.
    ~It allows to have several links towards the same page~,
    that will behave differently~, or to create services dedicated to one user~.
    ~Coservices can be named if the <<span class='code'|~?name>> optional parameter
    is present or anonymous ~(in that case~, a coservice number will be
    generated~)~.\\


    ~See the programmer~'s manual for more informations~.\\


    ~The <<span class='code'|~~timeout>> parameter specifies a timeout ~(in seconds~)
    after which the coservice will disappear~. ~This amount of time is
    computed from the creation or from the last call to the service~.
    ~Default~: no timeout~.\\


    ~The <<span class='code'|~~max~_use>> parameter specifies that the service can be used only
    a fixed number of times~. ~Default~: no limitation~.\\


    ~If <<span class='code'|~~csrf~_safe>> is <<span class='code'|true>>~,
    it will create a "~C~S~R~F~-safe" service ~(the default is <<span class='code'|false>>~)~.
    ~(~In that case <<span class='code'|~~name>> is ignored~)~.
    ~It means that the registration of the service will not actually
    take place when <<span class='code'|register>> is called~, but delayed and performed
    each time a form is created~. ~This allows to protect against ~C~S~R~F attacks~,
    and should be use with a short timeout ~(and max~_use~)~.
    ~(~And you should probably use ~P~O~S~T coservices in that case~)~.
    ~In that case~, you can register the ~C~S~R~F safe service either in the global
    service table or in the session service table~. ~But the actual registration~,
    that will occure when creating a link or a form~, will always take
    place in a session service table~. ~This table is specified by the
    <<span class='code'|~~csrf~_scope>> and <<span class='code'|~~csrf~_secure>> parameters
    ~(that correspond to <<span class='code'|~~scope>> and <<span class='code'|~~secure>> for the delayed
    registration~)~; it is the default session table if they are absent~.
    ~Parameters <<span class='code'|~?scope>> and <<span class='code'|~?secure>> of <<span class='code'|register>>
    must have the same values as the one declared while creating the
    ~C~S~R~F safe coservice~, otherwise the registration will fail
    with ~.\\
>>
\\
~Creates a coservice with ~P~O~S~T parameters\\
<<div id="VALcoservice'" class="code"|<<span class="keyword"|val>> coservice~' : <<span class="code type"|\\{{{   }}}?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> > `Session ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ], 'c)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|
===@@id="3_Nonattachedcoservices"@@~Non attached coservices===
\\
>>
<<div id="VALpost_coservice'" class="code"|<<span class="keyword"|val>> post~_coservice~' : <<span class="code type"|\\{{{   }}}?name:string ->\\{{{   }}}  ?csrf_safe:bool ->\\{{{   }}}  ?csrf_scope:[< <<a_api subproject="server" text="Eliom_common.user_scope" | type Eliom_common.user_scope >> > `Session ] ->\\{{{   }}}  ?csrf_secure:bool ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  ?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ], 'c)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Creates a non~-attached coservice~, that is~, services that do not
    correspond to a path in the ~U~R~L~. ~They are identified only by a
    parameter~, whatever be the path~.
    ~Links towards such services will not change the ~U~R~L~,
    just add extra parameters~.
    ~Non~-attached coservices can be named if the <<span class='code'|~?name>> optional parameter
    is present or anonymous ~(in that case~, a coservice number will be
    generated~)~.
    ~See the programmer~'s manual for more informations~.\\
>>
\\
~Creates a non attached coservice with ~P~O~S~T parameters~.
    ~If the optional parameter <<span class='code'|~~keep~_get~_na~_params>> is <<span class='code'|false>>~,
    ~G~E~T non~-attached parameters won~'t be kept in the ~U~R~L ~(if any~) when you
    create a ~P~O~S~T form to this coservice~.
    ~Default is <<span class='code'|true>>~.\\
\\

==@@id="2_Predefinedservices"@@~Predefined services==
\\
<<div id="VALstatic_dir" class="code"|<<span class="keyword"|val>> static~_dir : <<span class="code type"|\\{{{   }}}unit ->\\{{{   }}}  (string list, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithSuffix ], [ `One of string list ] <<a_api subproject="server" text="Eliom_parameters.param_name" | type Eliom_parameters.param_name >>, \\{{{   }}}   unit, [> `Unregistrable ], 'a)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|
===@@id="3_Staticfiles"@@~Static files===
\\
>>
<<div id="VALhttps_static_dir" class="code"|<<span class="keyword"|val>> https~_static~_dir : <<span class="code type"|\\{{{   }}}unit ->\\{{{   }}}  (string list, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithSuffix ], [ `One of string list ] <<a_api subproject="server" text="Eliom_parameters.param_name" | type Eliom_parameters.param_name >>, \\{{{   }}}   unit, [> `Unregistrable ], 'a)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~A predefined service
    that correponds to the directory where static pages are
    ~(if the staticmod extension is used~)~.
    ~This directory is chosen in the configuration file~.
    ~This service takes the name of the static file as a parameter
    ~(a string list~, slash separated~)~.\\
>>
<<div id="VALstatic_dir_with_params" class="code"|<<span class="keyword"|val>> static~_dir~_with~_params : <<span class="code type"|\\{{{   }}}?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  (string list * 'a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithSuffix ], [ `One of string list ] <<a_api subproject="server" text="Eliom_parameters.param_name" | type Eliom_parameters.param_name >> * 'b,\\{{{   }}}   unit, [> `Unregistrable ], 'c)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~The same~, but forcing https\\
>>
<<div id="VALhttps_static_dir_with_params" class="code"|<<span class="keyword"|val>> https~_static~_dir~_with~_params : <<span class="code type"|\\{{{   }}}?keep_nl_params:[ `All | `None | `Persistent ] ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  unit ->\\{{{   }}}  (string list * 'a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        ([> `Internal of [> `Service ] ], [> `Get ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithSuffix ], [ `One of string list ] <<a_api subproject="server" text="Eliom_parameters.param_name" | type Eliom_parameters.param_name >> * 'b,\\{{{   }}}   unit, [> `Unregistrable ], 'c)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Like <<span class='code'|static~_dir>>~, but allows to put ~G~E~T parameters\\
>>
\\
~The same~, but forcing https\\
<<div id="VALvoid_coservice'" class="code"|<<span class="keyword"|val>> void~_coservice~' : <<span class="code type"|\\{{{   }}}(unit, unit, [> `Nonattached of 'a <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ], [ `WithoutSuffix ],\\{{{   }}}   unit, unit, [> `Unregistrable ], 'b)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|
===@@id="3_Voidnonattachedcoservices"@@~Void non~-attached coservices===
\\
>>
<<div id="VALhttps_void_coservice'" class="code"|<<span class="keyword"|val>> https~_void~_coservice~' : <<span class="code type"|\\{{{   }}}(unit, unit, [> `Nonattached of 'a <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ], [ `WithoutSuffix ],\\{{{   }}}   unit, unit, [> `Unregistrable ], 'b)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~A predefined non~-attached action with special behaviour~:
    it has no parameter at all~, even non~-attached parameters~.
    ~Use it if you want to make a link to the current page without non~-attached
    parameters~.
    ~It is almost equivalent to a ~P~O~S~T non~-attached service without ~P~O~S~T
    parameters~, on which you register an action that does nothing~,
    but you can use it with ~<a~> links~, not only forms~.
    ~It does not keep non attached ~G~E~T parameters~.\\
>>
<<div id="VALvoid_hidden_coservice'" class="code"|<<span class="keyword"|val>> void~_hidden~_coservice~' : <<span class="code type"|\\{{{   }}}(unit, unit, [> `Nonattached of 'a <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ], [ `WithoutSuffix ],\\{{{   }}}   unit, unit, [> `Unregistrable ], 'b)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~The same~, but forcing https~.\\
>>
<<div id="VALhttps_void_hidden_coservice'" class="code"|<<span class="keyword"|val>> https~_void~_hidden~_coservice~' : <<span class="code type"|\\{{{   }}}(unit, unit, [> `Nonattached of 'a <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ], [ `WithoutSuffix ],\\{{{   }}}   unit, unit, [> `Unregistrable ], 'b)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|void~_coservice~'>> but keeps non attached ~G~E~T parameters~.\\
>>
\\
~The same~, but forcing https~.\\
<<div id="VALpreapply" class="code"|<<span class="keyword"|val>> preapply : <<span class="code type"|\\{{{   }}}service:('a, 'b, [> `Attached of ('d, 'e) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >> ] as 'c,\\{{{   }}}           [< <<a_api subproject="server" text="suff" | type Eliom_services.suff >> ], 'f, 'g, 'h, 'i)\\{{{   }}}          <<a_api subproject="server" text="service" | type Eliom_services.service >> ->\\{{{   }}}  'a ->\\{{{   }}}  (unit, 'b, 'c, [ `WithoutSuffix ], unit, 'g, [> `Unregistrable ], 'i)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|
==@@id="2_Miscellaneous"@@~Miscellaneous==
\\
>>
<<div id="VALadd_non_localized_get_parameters" class="code"|<<span class="keyword"|val>> add~_non~_localized~_get~_parameters : <<span class="code type"|\\{{{   }}}params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.non_localized_params" | type Eliom_parameters.non_localized_params >> ->\\{{{   }}}  service:('c, 'd, 'e, 'f, 'g, 'h, 'i, 'j) <<a_api subproject="server" text="service" | type Eliom_services.service >> ->\\{{{   }}}  ('c * 'a, 'd, 'e, 'f, 'g * 'b, 'h, 'i, 'j) <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|creates a new service by preapplying a service to ~G~E~T parameters~.
    ~It is not possible to register a handler on an preapplied service~.
    ~Preapplied services may be used in links or as fallbacks for coservices\\
>>
<<div id="VALadd_non_localized_post_parameters" class="code"|<<span class="keyword"|val>> add~_non~_localized~_post~_parameters : <<span class="code type"|\\{{{   }}}params:('a, [ `WithoutSuffix ], 'b) <<a_api subproject="server" text="Eliom_parameters.non_localized_params" | type Eliom_parameters.non_localized_params >> ->\\{{{   }}}  service:('c, 'd, 'e, 'f, 'g, 'h, 'i, 'j) <<a_api subproject="server" text="service" | type Eliom_services.service >> ->\\{{{   }}}  ('c, 'd * 'a, 'e, 'f, 'g, 'h * 'b, 'i, 'j) <<a_api subproject="server" text="service" | type Eliom_services.service >>>>>><<div class="info"|~Adds non localized ~G~E~T parameters to a service\\
>>
<<div id="VALunregister" class="code"|<<span class="keyword"|val>> unregister : <<span class="code type"|\\{{{   }}}?scope:[< <<a_api subproject="server" text="Eliom_common.scope" | type Eliom_common.scope >> ] ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  ('a, 'b,\\{{{   }}}   [< `Attached of ([> `Internal of 'c ], [< `Get | `Post ]) <<a_api subproject="server" text="a_s" | type Eliom_services.a_s >>\\{{{   }}}    | `Nonattached of 'd <<a_api subproject="server" text="na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   'e, 'f, 'g, 'h, 'i)\\{{{   }}}  <<a_api subproject="server" text="service" | type Eliom_services.service >> -> unit>>>><<div class="info"|~Adds non localized ~P~O~S~T parameters to a service\\
>>
\\
~Unregister a service ~(by default from the public table~)\\
\\

==@@id="2_Eliomapplicationservices"@@~Eliom application services==
\\
<<div id="VALonload" class="code"|<<span class="keyword"|val>> onload : <<span class="code type"|<<a_api subproject="server" text="Eliom_pervasives.XML.event" | type Eliom_pervasives.XML.event >> -> unit>>>><<div class="info"|~This function will register a function that will be executed on
    client side once the <<span class='code'|~Eliom~_appl>> page is loaded~.
    ~Use it with ~Eliom~'s syntax extension for client side code~.
    ~For example~: <<span class='code'|set~_onload ~~sp ~{~{ ~.~.~. ~}~}>>\\
>>
<<div id="VALonunload" class="code"|<<span class="keyword"|val>> onunload : <<span class="code type"|<<a_api subproject="server" text="Eliom_pervasives.XML.event" | type Eliom_pervasives.XML.event >> -> unit>>>><<div class="info"|~This function will register a function that will be executed on
    client side when leaving current <<span class='code'|~Eliom~_appl>> page~.\\
>>
