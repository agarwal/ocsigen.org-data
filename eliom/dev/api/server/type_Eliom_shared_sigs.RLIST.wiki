<<code language="ocaml" | sig
  type 'a t
  type 'a handle
  type 'a signal
  type 'a ct
  type 'a chandle
  val make :
    ?default:('a Eliom_shared_sigs.RLIST.ct *
              'a Eliom_shared_sigs.RLIST.chandle)
             option Eliom_lib.client_value ->
    ?reset_default:bool ->
    'a list ->
    'a Eliom_shared_sigs.RLIST.t * 'a Eliom_shared_sigs.RLIST.handle
  val concat :
    'a Eliom_shared_sigs.RLIST.t ->
    'a Eliom_shared_sigs.RLIST.t -> 'a Eliom_shared_sigs.RLIST.t
  val value : 'a Eliom_shared_sigs.RLIST.t -> 'a list Eliom_lib.shared_value
  val value_s :
    'a Eliom_shared_sigs.RLIST.t -> 'a list Eliom_shared_sigs.RLIST.signal
  val singleton_s :
    'a Eliom_shared_sigs.RLIST.signal -> 'a Eliom_shared_sigs.RLIST.t
  val map :
    ?eq:('b -> 'b -> bool) Eliom_lib.shared_value ->
    ('a -> 'b) Eliom_lib.shared_value ->
    'a Eliom_shared_sigs.RLIST.t -> 'b Eliom_shared_sigs.RLIST.t
  val make_from_s :
    ?eq:('a -> 'a -> bool) Eliom_lib.shared_value ->
    'a list Eliom_shared_sigs.RLIST.signal -> 'a Eliom_shared_sigs.RLIST.t
  val acc_e :
    ?init:'a Eliom_shared_sigs.RLIST.t * 'a Eliom_shared_sigs.RLIST.handle ->
    'a React.E.t Eliom_lib.client_value -> 'a Eliom_shared_sigs.RLIST.t
  module Lwt :
    sig
      val map_p :
        ('a -> 'b Lwt.t) Eliom_lib.shared_value ->
        'a Eliom_shared_sigs.RLIST.t -> 'b Eliom_shared_sigs.RLIST.t Lwt.t
    end
end >>