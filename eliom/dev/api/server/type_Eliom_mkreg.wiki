<<code language="ocaml" | sig
  module MakeRegister :
    functor (Pages : Eliom_reg_sigs.PARAM) ->
      sig
        type page = Pages.page
        type options = Pages.options
        type return = Pages.return
        type result = Pages.result
        val register :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
                   Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd,
                   'e, return)
                  Eliom_service.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('get -> 'post -> page Lwt.t) -> unit
        val create :
          ?scope:[< Eliom_common.scope ] ->
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          ?https:bool ->
          ?name:string ->
          ?csrf_safe:bool ->
          ?csrf_scope:[< Eliom_common.user_scope ] ->
          ?csrf_secure:bool ->
          ?max_use:int ->
          ?timeout:float ->
          meth:('m, 'gp, 'gn, 'pp, 'pn,
                [< `WithSuffix | `WithoutSuffix ] as 'a, 'mf, 'gp_)
               Eliom_service.Meth.t ->
          id:('att, 'co, 'mf, return, 'gp_) Eliom_service.Id.t ->
          ?error_handler:((string * exn) list -> page Lwt.t) ->
          ('gp -> 'pp -> page Lwt.t) ->
          ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
           'a, 'gn, 'pn, return)
          Eliom_service.t
        val send :
          ?options:options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t -> page -> result Lwt.t
      end
  module MakeRegister_AlphaReturn :
    functor (Pages : Eliom_reg_sigs.PARAM_ALPHA_RETURN) ->
      sig
        type ('a, 'b) page = ('a, 'b) Pages.page
        type options = Pages.options
        type 'b return = 'b
        type 'a result = 'a Pages.result
        val register :
          ?scope:[< Eliom_common.scope ] ->
          ?options:Pages.options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          service:('get, 'post, 'c, 'd, 'e, Eliom_service.non_ext,
                   Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'f,
                   'g, 'b)
                  Eliom_service.t ->
          ?error_handler:((string * exn) list -> ('a, 'b) Pages.page Lwt.t) ->
          ('get -> 'post -> ('a, 'b) Pages.page Lwt.t) -> unit
        val create :
          ?scope:[< Eliom_common.scope ] ->
          ?options:Pages.options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ?secure_session:bool ->
          ?https:bool ->
          ?name:string ->
          ?csrf_safe:bool ->
          ?csrf_scope:[< Eliom_common.user_scope ] ->
          ?csrf_secure:bool ->
          ?max_use:int ->
          ?timeout:float ->
          meth:('m, 'gp, 'gn, 'pp, 'pn,
                [< `WithSuffix | `WithoutSuffix ] as 'c, 'mf, 'gp_)
               Eliom_service.Meth.t ->
          id:('att, 'co, 'mf, 'b, 'gp_) Eliom_service.Id.t ->
          ?error_handler:((string * exn) list -> ('a, 'b) Pages.page Lwt.t) ->
          ('gp -> 'pp -> ('a, 'b) Pages.page Lwt.t) ->
          ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg,
           'c, 'gn, 'pn, 'b)
          Eliom_service.t
        val send :
          ?options:Pages.options ->
          ?charset:string ->
          ?code:int ->
          ?content_type:string ->
          ?headers:Http_headers.t ->
          ('a, 'b) Pages.page -> 'a Pages.result Lwt.t
      end
  val suffix_redir_uri_key : string Polytables.key
end >>