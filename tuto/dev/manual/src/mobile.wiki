= Mobile applications with Ocsigen

Since Eliom 6.0, the Ocsigen framework provides infrastructure for
building mobile applications. This enables rapid development of
Android, iOS, and Windows Mobile apps with the same APIs and
programming style as for a regular client-server Web application. In
fact, one single codebase can be used to produce all these
applications simultaneously.

The easiest way to get started with Ocsigen-based mobile development
is to use [[site:/ocsigen-start|Ocsigen-start]].
Ocsigen-start is a library and skeleton for building "minimum viable
product" Web applications with standard functionality like users,
notifications, etc. This skeleton is immediately usable as a mobile
application.

For building mobile applications, we recommend installing and
configuring Ocsigen-start (as outlined below), and by following a
mobile-friendly programming style
as described in the Eliom manual
([[site:/eliom/manual/clientserver-services|chapter on client services]]).

This tutorial focuses on Android, which is the easiest platform to
target if your laptop or workstation runs a modern variant of
GNU/Linux.

== Installlation

=== Ocsigen-start

Ocsigen-start is available through OPAM, and can thus be installed
with the command

{{{
opam install ocsigen-start
}}}

We provide a template that can be easily instantiated with the command

{{{
eliom-distillery -name ocsimobile -template os.pgocaml
}}}

Replace {{{ocsimobile}}} by the name of your application.

You can verify that the template works correctly by running

{{{
make db-init
make db-create
make db-update
make test.opt
}}}

from its toplevel directory, and then pointing your browser to
{{{127.0.0.1:8080}}}.

=== Mobile app infrastructure

The above template is immediately usable as a mobile application. All
you need to do is install and configure the needed supporting
software.

For all mobile platforms:

* Install {{{npm}}} (on Debian and Ubuntu, {{{sudo apt-get install npm}}}).
* Install Cordova ({{{sudo npm install -g cordova}}})
* Install the needed Cordova plugins:\\
  {{{sudo npm install -g cordova-hot-code-push-cli read-package-json xml2js}}}

For Android:

* Install JDK 7 or newer ({{{openjdk-7-jdk}}} package in Debian/Ubuntu)
* Install {{{qemu-kvm}}}
* Download and untar the [[http://developer.android.com/sdk|Android SDK]]
  (the smaller version without Android Studio suffices).
* Run {{{tools/android}}}
* Using the Android package management interface,
  install latest versions of {{{SDK Tools}}}, {{{SDK Platform-tools}}}, and
  {{{SDK Build-tools}}}
* Install Android API 23: {{{SDK Platform}}} and a x86-64 system image
  (e.g., {{{Intel x86 Atom_64}}}).
* From Extras, enable the {{{Android Support Repository}}} and the
  {{{Google Repository}}}.
* For convenience, add the SDK directories {{{platform-tools}}} and
  {{{tools}}} in your {{{$PATH}}}
* Configure an emulator: from the Android interface, go to
  {{{Tools -> Manage AVDs -> Device definition}}}
  (for example choose Nexus 6 no skin)

=== Launching the mobile app

If the above dependencies have been installed correctly, you are ready
to build a mobile app.

If you haven't done so already, launch an Ocsigen server serving your
app: {{{make test.opt}}} from the toplevel directory of your project.
The mobile apps need to communicate with the server in order to
retrieve data, and thus we are assuming that the server is running at
all times.

Run:

{{{
make APP_SERVER=http://${YOUR_IP_ADDRESS}:8080 APP_REMOTE=yes emulate-android
}}}

The above command will attempt to launch your app in the Android
emulator that you have configured previously. Depending on your setup,
you may need to start the emulator before running the command.

Notice that the {{{APP_SERVER}}} argument needs to point to your LAN
or public address (e.g., {{{192.168.1.x}}}), not to {{{127.0.0.1}}}
(neither to {{{localhost}}}). The reason is that the address will be
used by the Android emulator, inside which {{{127.0.0.1}}} has
different meaning; it points to the Android host itself.

== Programming style

We recommend that you read the
[[site:/eliom/manual/clientserver-services|chapter on client services]]
from the Eliom manual. The idea is that you implement as much of your
application as possible in shared sections ({{{[%%shared ...]}}} or
{{{let%shared ... = ...}}}), and that you register handlers for your
Eliom services on both the client and the server.

The Ocsigen-start template already uses the above programming style,
so refer to the files generated by {{{eliom-distillery}}} for
inspiration.

== Going further

* [[site:/ocsigen-toolkit|Ocsigen-toolkit]] provides a set of user
  interface widgets that are particularly useful for mobile applications.

* Danny Willems provides a comprehensive set of
  [[https://github.com/dannywillems/ocaml-cordova-plugin-list|Ocaml
  bindings to Cordova plugins]]. These can readily be used for your
  Eliom mobile application.
