<<code language="ocaml" | sig
  exception Already_exists of int64
  exception No_such_user
  val password_set : int64 -> bool Lwt.t
  type t = {
    userid : int64;
    fn : string;
    ln : string;
    avatar : string option;
  }
  val userid_of_user : Eba_user.t -> int64
  val firstname_of_user : Eba_user.t -> string
  val lastname_of_user : Eba_user.t -> string
  val avatar_of_user : Eba_user.t -> string option
  val avatar_uri_of_avatar :
    ?absolute_path:bool -> string -> Eliom_content.Xml.uri
  val avatar_uri_of_user :
    ?absolute_path:bool -> Eba_user.t -> Eliom_content.Xml.uri option
  val fullname_of_user : Eba_user.t -> string
  val is_complete : Eba_user.t -> bool
  val add_activationkey : act_key:string -> int64 -> unit Lwt.t
  val verify_password : email:string -> password:string -> int64 Lwt.t
  val user_of_userid : int64 -> Eba_user.t Lwt.t
  val userid_of_activationkey : string -> int64 Lwt.t
  val userid_of_email : string -> int64 Lwt.t
  val emails_of_userid : int64 -> string list Lwt.t
  val email_of_user : Eba_user.t -> string Lwt.t
  val email_of_userid : int64 -> string Lwt.t
  val emails_of_user : Eba_user.t -> string list Lwt.t
  val get_users : ?pattern:string -> unit -> Eba_user.t list Lwt.t
  val create :
    ?password:string ->
    ?avatar:string ->
    firstname:string -> lastname:string -> string -> Eba_user.t Lwt.t
  val update :
    ?password:string ->
    ?avatar:string ->
    firstname:string -> lastname:string -> int64 -> unit Lwt.t
  val update' : ?password:string -> Eba_user.t -> unit Lwt.t
  val update_password : string -> int64 -> unit Lwt.t
  val update_avatar : string -> int64 -> unit Lwt.t
  val is_registered : string -> bool Lwt.t
  val is_preregistered : string -> bool Lwt.t
  val add_preregister : string -> unit Lwt.t
  val remove_preregister : string -> unit Lwt.t
  val all : ?limit:int64 -> unit -> string list Lwt.t
  val set_pwd_crypt_fun :
    (string -> string) * (int64 -> string -> string -> bool) -> unit
end >>