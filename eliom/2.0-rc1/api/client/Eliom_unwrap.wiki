=Module <<a_api_type subproject="client" | module Eliom_unwrap >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_unwrap: <<span class='code'|sig>><<a_api subproject="client" text=".." | module Eliom_unwrap >><<span class='code'|end>>>><<span class='code'|register~_unwrapper id f>> register an unwrapping function <<span class='code'|f>> to
    be called when a value is marked with the id <<span class='code'|id>>\\

----
<<div class="code" id="TYPEunwrap_id"|<<span class="keyword"|type>> unwrap~_id>>

<<div id="VALregister_unwrapper" class="code"|<<span class="keyword"|val>> register~_unwrapper : <<span class="code type"|<<a_api subproject="client" text="unwrap_id" | type Eliom_unwrap.unwrap_id >> -> ('a -> 'b) -> unit>>>><<div id="VALunwrap" class="code"|<<span class="keyword"|val>> unwrap : <<span class="code type"|'a * 'b -> 'b>>>><<div class="info"|<<span class='code'|register~_unwrapper id f>> register an unwrapping function <<span class='code'|f>> to
    be called when a value is marked with the id <<span class='code'|id>>\\
>>
<<div id="VALid_of_int" class="code"|<<span class="keyword"|val>> id~_of~_int : <<span class="code type"|int -> <<a_api subproject="client" text="unwrap_id" | type Eliom_unwrap.unwrap_id >>>>>><<div class="info"|<<span class='code'|unwrap ~(mark~,v~)>> transform the value <<span class='code'|v>> using registered
    wrappers~. <<span class='code'|mark>> is the value used to mark values as
    unwrappers~. ~This function is for internal use only\\
>>
