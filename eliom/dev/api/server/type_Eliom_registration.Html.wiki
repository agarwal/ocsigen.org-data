<<code language="ocaml" | sig
  type page = Html_types.html Eliom_content.Html.elt
  type options = unit
  type return = Eliom_service.non_ocaml
  type result = browser_content kind
  val register :
    ?scope:[< Eliom_common.scope ] ->
    ?options:options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    ?secure_session:bool ->
    service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
             Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd, 'e,
             return)
            Eliom_service.t ->
    ?error_handler:((string * exn) list -> page Lwt.t) ->
    ('get -> 'post -> page Lwt.t) -> unit
  val create :
    ?scope:[< Eliom_common.scope ] ->
    ?options:options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string ->
    ?headers:Http_headers.t ->
    ?secure_session:bool ->
    ?https:bool ->
    ?name:string ->
    ?csrf_safe:bool ->
    ?csrf_scope:[< Eliom_common.user_scope ] ->
    ?csrf_secure:bool ->
    ?max_use:int ->
    ?timeout:float ->
    meth:('m, 'gp, 'gn, 'pp, 'pn, [< `WithSuffix | `WithoutSuffix ] as 'a,
          'mf, 'gp_)
         Eliom_service.meth ->
    id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf, return,
        'gp_)
       Eliom_service.id ->
    ?error_handler:((string * exn) list -> page Lwt.t) ->
    ('gp -> 'pp -> page Lwt.t) ->
    ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'a,
     'gn, 'pn, return)
    Eliom_service.t
  val send :
    ?options:options ->
    ?charset:string ->
    ?code:int ->
    ?content_type:string -> ?headers:Http_headers.t -> page -> result Lwt.t
end >>