= Js_of_ocaml =

== Overview ==

Js_of_ocaml is a compiler from OCaml bytecode programs to Javascript.
It makes it possible to write OCaml programs that run on Web browsers.
It is easy to install as it works with an existing installation of
OCaml, with no need to recompile any library.  It comes with bindings
for a large part of the browser APIs.  According to our benchmarks,
the generated programs <<a_manual chapter="performances" |runs
typically faster>> than with the OCaml bytecode interpreter.  We
believe this compiler will prove much easier to maintain than a
retargeted OCaml compiler, as the bytecode provides a very stable API.

== Requirements ==

  * Findlib
  * Lwt (**version 2.3.0** at least)

== Installation ==
  * run {{{make}}} to compile everything
  * run {{{make install}}} as root to install the compiler
    and its libraries
  * run {{{make uninstall}}} as root to uninstall them

== Usage ==

  Your program must first be compiled using the OCaml bytecode
  compiler {{{ocamlc}}}.  Javascript bindings, as well as a
  corresponding syntax extension, are provided by the
  {{{js_of_ocaml}}} package.
{{{
      ocamlfind ocamlc -package js_of_ocaml -package js_of_ocaml.syntax \
          -syntax camlp4o -linkpkg -o cubes.byte cubes.ml
}}}
  Then, run the {{{js_of_ocaml}}} compiler to produce Javascript code:
{{{
      js_of_ocaml cubes.byte
}}}

== Features ==

The whole OCaml standard library should be supported, except for
input/ouput channels, weak references, and most functions of the
Sys module.  Extra libraries such as Bigarray, Unix, Thread or Str
are not supported.

Tail call is not optimized in general.  However, self recursive
functions (when the tail calls are to the function itself) are
compiled using a loop.

Recursive modules are not supported at the moment.

Data representation differs from the usual one, for performance
reasons.  Most notably, integers are 32 bits (rather than 31 bits or
63 bits) and floats are not boxed.  As a consequence, marshalling,
polymorphic comparison, and hashing functions can yield results
different from usual:
  * marshalling of floats is not supported (unmarshalling works);
  * the polymorphic hash function will not give the same results on
    datastructures containing floats;
  * these functions may be more prone to stack overflow, as the
    Javascript stack is small.

== Contents of the distribution ==

|    LICENSE     |   license and copyright notice                   |
|    README      |   this file                                      |
|    compiler/   |   compiler                                       |
|    examples/   |   small examples                                 |
|    lib/        |   library for interfacing with Javascript APIs   |
|    runtime/    |   runtime system                                 |


== Debugging programs ==

To help debugging your programs, use the "-pretty" and "-noinline"
options of Js_of_ocaml. If the bytecode is build with ocaml "-g"
option, Js_of_ocaml will attempt to preserve variable names as well.
