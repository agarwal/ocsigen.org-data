<<code language="ocaml" | sig
  type uri = string
  val uri_of_string : Eliom_pervasives.XML.uri -> string
  val string_of_uri : string -> Eliom_pervasives.XML.uri
  val uri_of_fun : (unit -> string) -> Eliom_pervasives.XML.uri
  type aname = string
  type attrib
  type -'a caml_event_handler =
      CE_registered_closure of string *
        ('a Js.t -> unit) Eliom_pervasives.client_expr
    | CE_client_closure of ('a Js.t -> unit)
    | CE_call_service of
        ([ `A | `Form_get | `Form_post ] * (bool * string list) option *
         string option)
        option Eliom_lazy.request
    constraint 'a = #Dom_html.event
  type event_handler =
      Raw of string
    | Caml of Dom_html.event Eliom_pervasives.XML.caml_event_handler
  type ename = string
  type elt
  type econtent = private
      Empty
    | Comment of string
    | EncodedPCDATA of string
    | PCDATA of string
    | Entity of string
    | Leaf of Eliom_pervasives.XML.ename * Eliom_pervasives.XML.attrib list
    | Node of Eliom_pervasives.XML.ename * Eliom_pervasives.XML.attrib list *
        Eliom_pervasives.XML.elt list
  val event_handler_of_service :
    ([ `A | `Form_get | `Form_post ] * (bool * string list) option *
     string option)
    option Eliom_lazy.request -> Eliom_pervasives.XML.event_handler
  val event_handler_of_function :
    (#Dom_html.event Js.t -> unit) -> Eliom_pervasives.XML.event_handler
  val event_of_service :
    ([ `A | `Form_get | `Form_post ] * (bool * string list) option *
     string option)
    option Eliom_lazy.request -> Eliom_pervasives.XML.event_handler
  val event_of_function :
    ((#Dom_html.event as 'a) Js.t -> unit) -> 'a Js.t -> unit
  type separator = Space | Comma
  type acontent = private
      AFloat of float
    | AInt of int
    | AStr of string
    | AStrL of Eliom_pervasives.XML.separator * string list
  val acontent : Eliom_pervasives.XML.attrib -> Eliom_pervasives.XML.acontent
  type racontent =
      RA of Eliom_pervasives.XML.acontent
    | RACamlEventHandler of
        Dom_html.event Eliom_pervasives.XML.caml_event_handler
    | RALazyStr of string Eliom_lazy.request
    | RALazyStrL of Eliom_pervasives.XML.separator *
        string Eliom_lazy.request list
  val racontent :
    Eliom_pervasives.XML.attrib -> Eliom_pervasives.XML.racontent
  val aname : Eliom_pervasives.XML.attrib -> Eliom_pervasives.XML.aname
  val float_attrib :
    Eliom_pervasives.XML.aname -> float -> Eliom_pervasives.XML.attrib
  val int_attrib :
    Eliom_pervasives.XML.aname -> int -> Eliom_pervasives.XML.attrib
  val string_attrib :
    Eliom_pervasives.XML.aname -> string -> Eliom_pervasives.XML.attrib
  val space_sep_attrib :
    Eliom_pervasives.XML.aname -> string list -> Eliom_pervasives.XML.attrib
  val comma_sep_attrib :
    Eliom_pervasives.XML.aname -> string list -> Eliom_pervasives.XML.attrib
  val event_handler_attrib :
    Eliom_pervasives.XML.aname ->
    Eliom_pervasives.XML.event_handler -> Eliom_pervasives.XML.attrib
  val uri_attrib :
    Eliom_pervasives.XML.aname ->
    Eliom_pervasives.XML.uri -> Eliom_pervasives.XML.attrib
  val uris_attrib :
    Eliom_pervasives.XML.aname ->
    Eliom_pervasives.XML.uri list -> Eliom_pervasives.XML.attrib
  val event_attrib :
    Eliom_pervasives.XML.aname ->
    Eliom_pervasives.XML.event_handler -> Eliom_pervasives.XML.attrib
  val content : Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.econtent
  val pcdata : string -> Eliom_pervasives.XML.elt
  val encodedpcdata : string -> Eliom_pervasives.XML.elt
  val entity : string -> Eliom_pervasives.XML.elt
  val empty : unit -> Eliom_pervasives.XML.elt
  val comment : string -> Eliom_pervasives.XML.elt
  val leaf :
    ?a:Eliom_pervasives.XML.attrib list ->
    Eliom_pervasives.XML.ename -> Eliom_pervasives.XML.elt
  val node :
    ?a:Eliom_pervasives.XML.attrib list ->
    Eliom_pervasives.XML.ename ->
    Eliom_pervasives.XML.elt list -> Eliom_pervasives.XML.elt
  val lazy_node :
    ?a:Eliom_pervasives.XML.attrib list ->
    Eliom_pervasives.XML.ename ->
    Eliom_pervasives.XML.elt list Eliom_lazy.request ->
    Eliom_pervasives.XML.elt
  val cdata : string -> Eliom_pervasives.XML.elt
  val cdata_script : string -> Eliom_pervasives.XML.elt
  val cdata_style : string -> Eliom_pervasives.XML.elt
  type node_id = NoId | ProcessId of string | RequestId of string
  val make :
    ?id:Eliom_pervasives.XML.node_id ->
    Eliom_pervasives.XML.econtent -> Eliom_pervasives.XML.elt
  val make_dom :
    ?id:Eliom_pervasives.XML.node_id ->
    Dom.node Js.t -> Eliom_pervasives.XML.elt
  val make_process_node :
    ?id:string -> Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.elt
  val make_request_node :
    Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.elt
  val get_node_id : Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.node_id
  type node =
      DomNode of Dom.node Js.t
    | TyXMLNode of Eliom_pervasives.XML.econtent
  val get_node : Eliom_pervasives.XML.elt -> Eliom_pervasives.XML.node
  val set_dom_node : Eliom_pervasives.XML.elt -> Dom.node Js.t -> unit
  module ClosureMap :
    sig
      type key = string
      type +'a t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    end
  type event_handler_table =
      (Eliom_pervasives.poly -> unit) Eliom_pervasives.client_expr
      Eliom_pervasives.XML.ClosureMap.t
end >>