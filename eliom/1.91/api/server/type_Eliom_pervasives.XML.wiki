<<code language="ocaml" | sig
  module M :
    sig
      type aname = string
      type separator = Space | Comma
      type event = string
      type attrib
      type acontent = private
          AFloat of Eliom_pervasives.XML.M.aname * float
        | AInt of Eliom_pervasives.XML.M.aname * int
        | AStr of Eliom_pervasives.XML.M.aname * string
        | AStrL of Eliom_pervasives.XML.M.separator *
            Eliom_pervasives.XML.M.aname * string list
      val acontent :
        Eliom_pervasives.XML.M.attrib -> Eliom_pervasives.XML.M.acontent
      val aname :
        Eliom_pervasives.XML.M.attrib -> Eliom_pervasives.XML.M.aname
      val float_attrib :
        Eliom_pervasives.XML.M.aname ->
        float -> Eliom_pervasives.XML.M.attrib
      val int_attrib :
        Eliom_pervasives.XML.M.aname -> int -> Eliom_pervasives.XML.M.attrib
      val string_attrib :
        Eliom_pervasives.XML.M.aname ->
        string -> Eliom_pervasives.XML.M.attrib
      val space_sep_attrib :
        Eliom_pervasives.XML.M.aname ->
        string list -> Eliom_pervasives.XML.M.attrib
      val comma_sep_attrib :
        Eliom_pervasives.XML.M.aname ->
        string list -> Eliom_pervasives.XML.M.attrib
      val event_attrib :
        Eliom_pervasives.XML.M.aname ->
        Eliom_pervasives.XML.M.event -> Eliom_pervasives.XML.M.attrib
      val attrib_name :
        Eliom_pervasives.XML.M.attrib -> Eliom_pervasives.XML.M.aname
      val attrib_value_to_string :
        (string -> string) -> Eliom_pervasives.XML.M.attrib -> string
      val attrib_to_string :
        (string -> string) -> Eliom_pervasives.XML.M.attrib -> string
      type ename = string
      type econtent =
          Empty
        | Comment of string
        | EncodedPCDATA of string
        | PCDATA of string
        | Entity of string
        | Leaf of Eliom_pervasives.XML.M.ename *
            Eliom_pervasives.XML.M.attrib list
        | Node of Eliom_pervasives.XML.M.ename *
            Eliom_pervasives.XML.M.attrib list *
            Eliom_pervasives.XML.M.elt list
      and elt = {
        mutable ref : int;
        elt : Eliom_pervasives.XML.M.econtent;
        elt_mark : Obj.t;
      }
      val content :
        Eliom_pervasives.XML.M.elt -> Eliom_pervasives.XML.M.econtent
      val make_mark : (unit -> Obj.t) Pervasives.ref
      val make_node :
        Eliom_pervasives.XML.M.econtent -> Eliom_pervasives.XML.M.elt
      val empty : unit -> Eliom_pervasives.XML.M.elt
      val comment : string -> Eliom_pervasives.XML.M.elt
      val pcdata : string -> Eliom_pervasives.XML.M.elt
      val encodedpcdata : string -> Eliom_pervasives.XML.M.elt
      val entity : string -> Eliom_pervasives.XML.M.elt
      val leaf :
        ?a:Eliom_pervasives.XML.M.attrib list ->
        Eliom_pervasives.XML.M.ename -> Eliom_pervasives.XML.M.elt
      val node :
        ?a:Eliom_pervasives.XML.M.attrib list ->
        Eliom_pervasives.XML.M.ename ->
        Eliom_pervasives.XML.M.elt list -> Eliom_pervasives.XML.M.elt
      val cdata : string -> Eliom_pervasives.XML.M.elt
      val cdata_script : string -> Eliom_pervasives.XML.M.elt
      val cdata_style : string -> Eliom_pervasives.XML.M.elt
      type ref_tree =
          Ref_tree of int option *
            (int * Eliom_pervasives.XML.M.ref_tree) list
      val ref_node : Eliom_pervasives.XML.M.elt -> int
      val next_ref : unit -> int
      val make_ref_tree :
        Eliom_pervasives.XML.M.elt -> Eliom_pervasives.XML.M.ref_tree
      val make_ref_tree_list :
        Eliom_pervasives.XML.M.elt list ->
        (int * Eliom_pervasives.XML.M.ref_tree) list
      val class_name : string
      val lwt_register_event :
        ?keep_default:bool ->
        Eliom_pervasives.XML.M.elt ->
        Eliom_pervasives.XML.M.ename -> ('a -> 'b Lwt.t) -> 'a -> unit
      val register_event :
        ?keep_default:bool ->
        Eliom_pervasives.XML.M.elt ->
        Eliom_pervasives.XML.M.ename -> ('a -> 'b) -> 'a -> unit
    end
end >>