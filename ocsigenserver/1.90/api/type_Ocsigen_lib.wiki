<<code language="ocaml" | sig
  exception Ocsigen_Internal_Error of string
  exception Input_is_too_large
  exception Ocsigen_Bad_Request
  exception Ocsigen_Request_too_long
  external id : 'a -> 'a = "%identity"
  type url_path = string list
  val string_of_url_path : encode:bool -> string list -> string
  val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
  val uncurry2 : ('a -> 'b -> 'c) -> 'a * 'b -> 'c
  val list_remove_first_if_any : 'a -> 'a list -> 'a list
  val list_remove_first_if_any_q : 'a -> 'a list -> 'a list
  val list_remove_first : 'a -> 'a list -> 'a list
  val list_remove_first_q : 'a -> 'a list -> 'a list
  val list_remove_all : 'a -> 'a list -> 'a list
  val list_remove_all_q : 'a -> 'a list -> 'a list
  val list_remove_all_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
  val list_remove_all_assoc_q : 'a -> ('a * 'b) list -> ('a * 'b) list
  val list_last : 'a list -> 'a
  val list_assoc_remove : 'a -> ('a * 'b) list -> 'b * ('a * 'b) list
  val list_is_prefix : 'a list -> 'a list -> bool
  val list_is_prefix_skip_end_slash : string list -> string list -> bool
  val remove_dotdot : string list -> string list
  val remove_slash_at_beginning : string list -> string list
  val recursively_remove_slash_at_beginning : string list -> string list
  val remove_slash_at_end : string list -> string list
  val remove_internal_slash : string list -> string list
  val add_end_slash_if_missing : string list -> string list
  val change_empty_list : string list -> string list
  val remove_end_slash : string -> string
  val string_first_diff : string -> string -> int -> int -> int
  val add_to_string : string -> string -> string -> string
  val concat_strings : string -> string -> string -> string
  val basic_sep : char -> string -> string * string
  val remove_spaces : string -> int -> int -> string
  val sep : char -> string -> string * string
  val split : ?multisep:bool -> char -> string -> string list
  val string_of_exn : exn -> string
  val register_exn_printer : ((exn -> string) -> exn -> string) -> unit
  val fst3 : 'a * 'b * 'c -> 'a
  val snd3 : 'a * 'b * 'c -> 'b
  val thd3 : 'a * 'b * 'c -> 'c
  val apply_option : ('a -> 'b) -> 'a option -> 'b option
  type ('a, 'b) leftright = Left of 'a | Right of 'b
  type yesnomaybe = Yes | No | Maybe
  val get_inet_addr : string -> Unix.inet_addr Lwt.t
  type ip_address = IPv4 of int32 | IPv6 of int64 * int64
  exception Invalid_ip_address of string
  val parse_ip :
    string -> Ocsigen_lib.ip_address * Ocsigen_lib.ip_address option
  val match_ip :
    Ocsigen_lib.ip_address * Ocsigen_lib.ip_address option ->
    Ocsigen_lib.ip_address -> bool
  val network_of_ip :
    Ocsigen_lib.ip_address ->
    int32 -> int64 * int64 -> Ocsigen_lib.ip_address
  val inet6_addr_loopback : Ocsigen_lib.ip_address
  val getnameinfo : Unix.inet_addr -> int -> string Lwt.t
  val basename : string -> string
  val extension : string -> string
  val extension_no_directory : string -> string
  val fixup_url_string : string -> string
  val parse_url :
    string ->
    bool option * string option * int option * string * string list *
    string option * (string * string) list Lazy.t
  val make_absolute_url :
    https:bool -> host:string -> port:int -> string -> string
  module StringSet :
    sig
      type elt = string
      type t
      val empty : t
      val is_empty : t -> bool
      val mem : elt -> t -> bool
      val add : elt -> t -> t
      val singleton : elt -> t
      val remove : elt -> t -> t
      val union : t -> t -> t
      val inter : t -> t -> t
      val diff : t -> t -> t
      val compare : t -> t -> int
      val equal : t -> t -> bool
      val subset : t -> t -> bool
      val iter : (elt -> unit) -> t -> unit
      val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
      val for_all : (elt -> bool) -> t -> bool
      val exists : (elt -> bool) -> t -> bool
      val filter : (elt -> bool) -> t -> t
      val partition : (elt -> bool) -> t -> t * t
      val cardinal : t -> int
      val elements : t -> elt list
      val min_elt : t -> elt
      val max_elt : t -> elt
      val choose : t -> elt
      val split : elt -> t -> t * bool * t
    end
  module Clist :
    sig
      type 'a t
      type 'a node
      val make : 'a -> 'a Ocsigen_lib.Clist.node
      val create : unit -> 'a Ocsigen_lib.Clist.t
      val insert :
        'a Ocsigen_lib.Clist.t -> 'a Ocsigen_lib.Clist.node -> unit
      val remove : 'a Ocsigen_lib.Clist.node -> unit
      val value : 'a Ocsigen_lib.Clist.node -> 'a
      val in_list : 'a Ocsigen_lib.Clist.node -> bool
      val is_empty : 'a Ocsigen_lib.Clist.t -> bool
      val iter : ('a -> unit) -> 'a Ocsigen_lib.Clist.t -> unit
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b Ocsigen_lib.Clist.t -> 'a
    end
  module String_Table :
    sig
      type key = string
      type +'a t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
      module Json_key :
        sig val make : (module Deriving_Json.Json with type a = key) end
      module Json_t :
        sig
          val make :
            (module Deriving_Json.Json with type a = 'a) ->
            (module Deriving_Json.Json with type a = 'a t)
        end
    end
  module Int_Table :
    sig
      type key = int
      type +'a t
      val empty : 'a t
      val is_empty : 'a t -> bool
      val mem : key -> 'a t -> bool
      val add : key -> 'a -> 'a t -> 'a t
      val singleton : key -> 'a -> 'a t
      val remove : key -> 'a t -> 'a t
      val merge :
        (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t
      val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
      val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
      val iter : (key -> 'a -> unit) -> 'a t -> unit
      val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
      val for_all : (key -> 'a -> bool) -> 'a t -> bool
      val exists : (key -> 'a -> bool) -> 'a t -> bool
      val filter : (key -> 'a -> bool) -> 'a t -> 'a t
      val partition : (key -> 'a -> bool) -> 'a t -> 'a t * 'a t
      val cardinal : 'a t -> int
      val bindings : 'a t -> (key * 'a) list
      val min_binding : 'a t -> key * 'a
      val max_binding : 'a t -> key * 'a
      val choose : 'a t -> key * 'a
      val split : key -> 'a t -> 'a t * 'a option * 'a t
      val find : key -> 'a t -> 'a
      val map : ('a -> 'b) -> 'a t -> 'b t
      val mapi : (key -> 'a -> 'b) -> 'a t -> 'b t
    end
  type file_info = {
    tmp_filename : string;
    filesize : int64;
    raw_original_filename : string;
    original_basename : string;
    file_content_type : (string * string option) option;
  }
  val mk_url_encoded_parameters : (string * string) list -> string
  val encode : ?plus:bool -> string -> string
  val decode : ?plus:bool -> string -> string
  val make_cryptographic_safe_string : unit -> string
  val debug : string -> unit
  val to_json : ?typ:'a Deriving_Json.t -> 'a -> string
  val of_json : ?typ:'a Deriving_Json.t -> string -> 'a
end >>