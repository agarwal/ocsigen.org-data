=How to write forms?=

=== To write an HTML form towards an Eliom service

Just as we do for links, we provide form-building functions that call
Eliom services in a safe manner. These functions are provided in the
module
<<a_api project="eliom" | module Eliom_content.Html5.D.Form >> (and
<<a_api project="eliom" | module Eliom_content.Html5.F.Form >>).
The functions
<<a_api project="eliom" | val Eliom_content.Html5.D.Form.get_form >> and
<<a_api project="eliom" | val Eliom_content.Html5.D.Form.post_form >>
accept a function (named {{{create_form}}} in our example below)
which is responsible for generating the content from
appropriately-typed parameter names.

<<code language="ocaml"|

let create_form =
  (fun (number_name, (number2_name, string_name)) ->
    [p [pcdata "Write an int: ";
        Html5.D.Form.input
          ~input_type:`Text ~name:number_name
          Html5.D.Form.int;
        pcdata "Write another int: ";
        Html5.D.Form.input
          ~input_type:`Text ~name:number2_name
          Html5.D.Form.int;
        pcdata "Write a string: ";
        Html5.D.Form.input ~input_type:`Text ~name:string_name Form.string;
        Html5.D.Form.input ~input_type:`Submit ~value:"Click" Form.string]])

let form = register_service ["form"] unit
  (fun () () ->
     let f = Html5.D.Form.get_form coucou_params create_form in
     return
       (html
         (head (title (pcdata "")) [])
         (body [f])))

>>

As shown in the example,
<<a_api project="eliom" | module Eliom_content.Html5.D.Form >>
provides functions for generating the various widgets, e.g.,
<<a_api project="eliom" | val Eliom_content.Html5.D.Form.input >>.
These functions need to be called with a "type" argument (e.g.,
<<a_api project="eliom" | val Eliom_content.Html5.D.Form.int >>)
that matches the type of the corresponding parameter name.

POST forms may also take get parameters, as last argument of function
{{{post_form}}}:

<<code language="ocaml"|
Eliom_content.Html5.D.Form.post_form
  my_service_with_get_and_post
  (fun chaine ->
    p [pcdata "Write a string: ";
       Form.input ~input_type:`Text ~name:chaine Form.string])
  222
>>

=== Raw forms

There is also a raw interface to write basic forms without Eliom,
using standard tyxml constructors.

Use module [[wiki(15):api/server/Eliom_content_core.Html5.D.Raw|Eliom_content_core.Html5.D.Raw]].

===Links
* [[wiki:manual/how-to-add-a-select-or-other-form-element|How to write a select (or other form element)?]]
