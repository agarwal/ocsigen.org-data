=Module type <<a_api_type subproject="server" | module type Eliom_mkreg.REG_PARAM >> =
<<div class="code"|<<span class="keyword"|module type>> REG_PARAM = <<span class='code'|sig>><<a_api subproject="server" text=".." | module type Eliom_mkreg.REG_PARAM >><<span class='code'|end>>>>
==@@id="2_Creatingmodulestoregisterservicesforonetypeofpages"@@~Creating modules to register services for one type of pages==
\\

----
<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page>>

<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options>>

<<div class="code" id="TYPEreturn"|<<span class="keyword"|type>> return>>

<<div class="code" id="TYPEresult"|<<span class="keyword"|type>> result>>

<<div id="VALsend" class="code"|<<span class="keyword"|val>> send : <<span class="code type"|\\{{{   }}}?options:<<a_api subproject="server" text="options" | type Eliom_mkreg.REG_PARAM.options >> ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  ?content_type:string ->\\{{{   }}}  ?headers:Http_headers.t ->\\{{{   }}}  <<a_api subproject="server" text="page" | type Eliom_mkreg.REG_PARAM.page >> -> Ocsigen_http_frame.result Lwt.t>>>><<div id="VALsend_appl_content" class="code"|<<span class="keyword"|val>> send~_appl~_content : <<span class="code type"|Eliom_services.send_appl_content>>>><<div id="VALresult_of_http_result" class="code"|<<span class="keyword"|val>> result~_of~_http~_result : <<span class="code type"|Ocsigen_http_frame.result -> <<a_api subproject="server" text="result" | type Eliom_mkreg.REG_PARAM.result >>>>>><<div class="info"|~Whether the service is capable to send application content when
      required~. ~This field is usually <<span class='code'|~Eliom~_services~.~X~Never>>~. ~This
      value is recorded inside each service just after
      registration~.\\
>>
