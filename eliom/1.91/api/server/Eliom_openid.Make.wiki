=Functor <<a_api_type subproject="server" | module Eliom_openid.Make >> =
<<div class="code"|<<span class="keyword"|module>> Make: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~S>><<span class='code'| ~: >><<span class="code type"|<<a_api subproject="server" text="HiddenServiceInfo" | module Eliom_openid.HiddenServiceInfo >>>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api subproject="server" text=".." | module Eliom_openid.Make >><<span class='code'|end>>>>>><<div class="module_param_list" | <<span class="param_title" |Parameters :>><<div|
|@@class="paramstable"@ @class="centertop fifteen code"@@{{{S}}}|@@class="centertop"@@:|<<span class="code type"|<<a_api subproject="server" text="HiddenServiceInfo" | module Eliom_openid.HiddenServiceInfo >>>>|
>>>>

----
<<div id="VALauthenticate" class="code"|<<span class="keyword"|val>> authenticate : <<span class="code type"|\\{{{   }}}mode:string ->\\{{{   }}}  ext:'a <<a_api subproject="server" text="Eliom_openid.extension" | type Eliom_openid.extension >> ->\\{{{   }}}  handler:('a <<a_api subproject="server" text="Eliom_openid.authentication_result" | type Eliom_openid.authentication_result >> -> Eliom_output.Any.page Lwt.t) ->\\{{{   }}}  discovery:string * string option -> XHTML.M.uri Lwt.t>>>><<div class="info"|~Authenticate an user~.* mode~: can be <<span class='code'|checkid~_setup>> or <<span class='code'|checkid~_immediate>>
                    whether you want immediate identification or not~.
* ext~: the extensions you want to use~.
* handler~: the handler called with the result of the authentication~.
* discovery~: ~The discovery information
           ~In return you get an ~U~R~I you have to redirect the user to~.

\\
>>
