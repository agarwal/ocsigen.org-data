<<code language="ocaml" | functor
  (Pages : sig
             type page
             type options
             type result
             val send :
               ?options:options ->
               ?charset:string ->
               ?code:int ->
               ?content_type:string ->
               ?headers:Http_headers.t ->
               page -> Ocsigen_http_frame.result Lwt.t
             val send_appl_content : Eliom_service.send_appl_content
             val result_of_http_result : Ocsigen_http_frame.result -> result
           end) ->
  sig
    type page = Pages.page
    type options = Pages.options
    type return = Eliom_service.non_ocaml
    type result = Pages.result
    val register :
      ?app:string ->
      ?scope:[< Eliom_common.scope ] ->
      ?options:options ->
      ?charset:string ->
      ?code:int ->
      ?content_type:string ->
      ?headers:Http_headers.t ->
      ?secure_session:bool ->
      service:('get, 'post, 'a, 'b, 'c, Eliom_service.non_ext,
               Eliom_service.reg, [< `WithSuffix | `WithoutSuffix ], 'd, 'e,
               return)
              Eliom_service.t ->
      ?error_handler:((string * exn) list -> page Lwt.t) ->
      ('get -> 'post -> page Lwt.t) -> unit
    val create :
      ?app:string ->
      ?scope:[< Eliom_common.scope ] ->
      ?options:options ->
      ?charset:string ->
      ?code:int ->
      ?content_type:string ->
      ?headers:Http_headers.t ->
      ?secure_session:bool ->
      ?https:bool ->
      ?name:string ->
      ?csrf_safe:bool ->
      ?csrf_scope:[< Eliom_common.user_scope ] ->
      ?csrf_secure:bool ->
      ?max_use:int ->
      ?timeout:float ->
      meth:('m, 'gp, 'gn, 'pp, 'pn, [< `WithSuffix | `WithoutSuffix ] as 'a,
            'mf, 'gp_)
           Eliom_service.meth ->
      id:('att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'mf, return,
          'gp_)
         Eliom_service.id ->
      ?error_handler:((string * exn) list -> page Lwt.t) ->
      ('gp -> 'pp -> page Lwt.t) ->
      ('gp, 'pp, 'm, 'att, 'co, Eliom_service.non_ext, Eliom_service.reg, 'a,
       'gn, 'pn, return)
      Eliom_service.t
    val send :
      ?options:options ->
      ?charset:string ->
      ?code:int ->
      ?content_type:string -> ?headers:Http_headers.t -> page -> result Lwt.t
  end >>