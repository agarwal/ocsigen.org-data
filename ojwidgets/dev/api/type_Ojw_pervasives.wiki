<<code language="ocaml" | sig
  external id : 'a -> 'a = "%identity"
  val of_opt : 'a Js.Opt.t -> 'a
  val subs_suffix : string -> int -> string
  val int_of_pxstring : Js.js_string Js.t -> int
  val pxstring_of_int : int -> Js.js_string Js.t
  module Size :
    sig
      val get_full_width :
        ?with_width:bool ->
        ?with_padding:bool ->
        ?with_border:bool -> Dom_html.cssStyleDeclaration Js.t -> int
      val get_full_height :
        ?with_height:bool ->
        ?with_padding:bool ->
        ?with_border:bool -> Dom_html.cssStyleDeclaration Js.t -> int
      val width_height : (int * int) React.signal
      val width : int React.signal
      val height : int React.signal
      val set_adaptative_width :
        Dom_html.element Js.t -> (int -> int) -> unit
      val set_adaptative_height :
        Dom_html.element Js.t -> (int -> int) -> unit
      val height_to_bottom : int -> Dom_html.element Js.t -> int
      val client_top : Dom_html.element Js.t -> int
      val client_bottom : Dom_html.element Js.t -> int
      val client_left : Dom_html.element Js.t -> int
      val client_right : Dom_html.element Js.t -> int
    end
  module Option :
    sig
      val map : ('a -> 'b) -> 'a option -> 'b option
      val map_lwt : ('a -> 'b Lwt.t) -> 'a option -> 'b option Lwt.t
      val iter : ('a -> unit) -> 'a option -> unit
      val iter_lwt : ('a -> unit Lwt.t) -> 'a option -> unit Lwt.t
      val lwt_map : 'a Lwt.t -> ('a -> 'b) -> (unit -> 'b) -> 'b
    end
  module List :
    sig
      val length : 'a list -> int
      val hd : 'a list -> 'a
      val tl : 'a list -> 'a list
      val nth : 'a list -> int -> 'a
      val rev : 'a list -> 'a list
      val append : 'a list -> 'a list -> 'a list
      val rev_append : 'a list -> 'a list -> 'a list
      val concat : 'a list list -> 'a list
      val flatten : 'a list list -> 'a list
      val iter : ('a -> unit) -> 'a list -> unit
      val iteri : (int -> 'a -> unit) -> 'a list -> unit
      val map : ('a -> 'b) -> 'a list -> 'b list
      val mapi : (int -> 'a -> 'b) -> 'a list -> 'b list
      val rev_map : ('a -> 'b) -> 'a list -> 'b list
      val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
      val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
      val iter2 : ('a -> 'b -> unit) -> 'a list -> 'b list -> unit
      val map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val rev_map2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
      val fold_left2 :
        ('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a
      val fold_right2 :
        ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
      val for_all : ('a -> bool) -> 'a list -> bool
      val exists : ('a -> bool) -> 'a list -> bool
      val for_all2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val exists2 : ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
      val mem : 'a -> 'a list -> bool
      val memq : 'a -> 'a list -> bool
      val find : ('a -> bool) -> 'a list -> 'a
      val filter : ('a -> bool) -> 'a list -> 'a list
      val find_all : ('a -> bool) -> 'a list -> 'a list
      val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
      val assoc : 'a -> ('a * 'b) list -> 'b
      val assq : 'a -> ('a * 'b) list -> 'b
      val mem_assoc : 'a -> ('a * 'b) list -> bool
      val mem_assq : 'a -> ('a * 'b) list -> bool
      val remove_assoc : 'a -> ('a * 'b) list -> ('a * 'b) list
      val remove_assq : 'a -> ('a * 'b) list -> ('a * 'b) list
      val split : ('a * 'b) list -> 'a list * 'b list
      val combine : 'a list -> 'b list -> ('a * 'b) list
      val sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val stable_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val fast_sort : ('a -> 'a -> int) -> 'a list -> 'a list
      val sort_uniq : ('a -> 'a -> int) -> 'a list -> 'a list
      val merge : ('a -> 'a -> int) -> 'a list -> 'a list -> 'a list
      val find_remove : ('a -> bool) -> 'a list -> 'a * 'a list
      val assoc_remove : 'a -> ('a * 'b) list -> 'b * ('a * 'b) list
      val uniq : 'a list -> 'a list
    end
end >>