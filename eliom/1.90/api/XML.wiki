=Module <<a_api_type | module XML >> =
<<div class="code"|<<span class="keyword"|module>> XML: <<span class='code'|sig>><<a_api text=".." | module XML >><<span class='code'|end>>>>~Neither <<span class='code'|comment>>~, <<span class='code'|pcdata>> nor <<span class='code'|entity>> check their argument for invalid
    characters~.  ~Unsafe characters will be escaped later by the output routines~.\\

----
<<div class="code" id="TYPEaname"|<<span class="keyword"|type>> aname = <<span class="code type"|string>> >>

<<div class="code" id="TYPEseparator"|<<span class="keyword"|type>> separator = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Space>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Comma>>|>>

<<div class="code" id="TYPEevent"|<<span class="keyword"|type>> event = <<span class="code type"|string>> >>

<<div class="code" id="TYPEattrib"|<<span class="keyword"|type>> attrib>>

<<div class="code" id="TYPEattribs"|<<span class="keyword"|type>> attribs>>

<<div id="VALfloat_attrib" class="code"|<<span class="keyword"|val>> float~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> float -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALint_attrib" class="code"|<<span class="keyword"|val>> int~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> int -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALstring_attrib" class="code"|<<span class="keyword"|val>> string~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALspace_sep_attrib" class="code"|<<span class="keyword"|val>> space~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string list -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALcomma_sep_attrib" class="code"|<<span class="keyword"|val>> comma~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string list -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALevent_attrib" class="code"|<<span class="keyword"|val>> event~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attrib" | type XML.attrib >>>>>><<div id="VALattrib_name" class="code"|<<span class="keyword"|val>> attrib~_name : <<span class="code type"|<<a_api text="attrib" | type XML.attrib >> -> <<a_api text="aname" | type XML.aname >>>>>><<div id="VALattrib_value_to_string" class="code"|<<span class="keyword"|val>> attrib~_value~_to~_string : <<span class="code type"|(string -> string) -> <<a_api text="attrib" | type XML.attrib >> -> string>>>><<div id="VALattrib_to_string" class="code"|<<span class="keyword"|val>> attrib~_to~_string : <<span class="code type"|(string -> string) -> <<a_api text="attrib" | type XML.attrib >> -> string>>>><<div class="code" id="TYPEename"|<<span class="keyword"|type>> ename = <<span class="code type"|string>> >>

<<div class="code" id="TYPEelt_content"|<<span class="keyword"|type>> elt~_content = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Empty>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Comment>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|EncodedPCDATA>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|PCDATA>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Entity>> <<span class="keyword"|of>> <<span class="code type"|string>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Leaf>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="ename" | type XML.ename >> * <<a_api text="attrib" | type XML.attrib >> list>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Node>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="ename" | type XML.ename >> * <<a_api text="attrib" | type XML.attrib >> list * <<a_api text="elt" | type XML.elt >> list>>|>>

<<div class="code" id="TYPEelt"|<<span class="keyword"|type>> elt = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@<<span class="keyword"|mutable >>ref : <<span class="code type"|int>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@elt : <<span class="code type"|<<a_api text="elt_content" | type XML.elt_content >>>>;|

}
>>

<<div id="VALempty" class="code"|<<span class="keyword"|val>> empty : <<span class="code type"|unit -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALcomment" class="code"|<<span class="keyword"|val>> comment : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALpcdata" class="code"|<<span class="keyword"|val>> pcdata : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALencodedpcdata" class="code"|<<span class="keyword"|val>> encodedpcdata : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALentity" class="code"|<<span class="keyword"|val>> entity : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~Neither <<span class='code'|comment>>~, <<span class='code'|pcdata>> nor <<span class='code'|entity>> check their argument for invalid
    characters~.  ~Unsafe characters will be escaped later by the output routines~.\\
>>
<<div id="VALleaf" class="code"|<<span class="keyword"|val>> leaf : <<span class="code type"|?a:<<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALnode" class="code"|<<span class="keyword"|val>> node : <<span class="code type"|?a:<<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="elt" | type XML.elt >> list -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~N~B~: <<span class='code'|~Leaf ~("foo"~, ~[~]~) ~-~> "~<foo ~/~>">>~, but <<span class='code'|~Node ~("foo"~, ~[~]~, ~[~]~) ~-~> "~<foo~>~<~/foo~>">>\\
>>
<<div id="VALcdata" class="code"|<<span class="keyword"|val>> cdata : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALcdata_script" class="code"|<<span class="keyword"|val>> cdata~_script : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALcdata_style" class="code"|<<span class="keyword"|val>> cdata~_style : <<span class="code type"|string -> <<a_api text="elt" | type XML.elt >>>>>><<div id="VALencode_unsafe" class="code"|<<span class="keyword"|val>> encode~_unsafe : <<span class="code type"|string -> string>>>><<div class="info"|~The encoder maps strings to ~H~T~M~L and //must// encode the unsafe characters
    <<span class='code'|~'~<~'>>~, <<span class='code'|~'~>~'>>~, <<span class='code'|~'"~'>>~, <<span class='code'|~'~&~'>> and the control characters ~0~-~8~, ~1~1~-~1~2~, ~1~4~-~3~1~, ~1~2~7
    to ~H~T~M~L entities~.  <<span class='code'|encode~_unsafe>> is the default for <<span class='code'|~?encode>> in <<span class='code'|output>>
    and <<span class='code'|pretty~_print>> below~.  ~Other implementations are provided by the module
    <<span class='code'|~Netencoding>> in the
    [[http://www.ocaml-programming.de/programming/ocamlnet.html|~Ocaml~Net]] library~, e~.g~.~:
    <<span class='code'|let encode ~= ~Netencoding~.~Html~.encode ~~in~_enc~:`~Enc~_iso~8~8~5~9~1 ~~out~_enc~:`~Enc~_usascii ~(~)>>~,
    ~Where national characters are replaced by ~H~T~M~L entities~.
    ~The user is of course free to write her own implementation~.\\
**See also** [[http://www.ocaml-programming.de/programming/ocamlnet.html|~Ocaml~Net]]\\
>>
<<div id="VALencode_unsafe_and_at" class="code"|<<span class="keyword"|val>> encode~_unsafe~_and~_at : <<span class="code type"|string -> string>>>><<div class="info"|~In addition~, encode <<span class='code'|"~@">> as <<span class='code'|"~&~#~6~4~;">> in the hope that this will fool
    simple minded email address harvesters~.\\
>>
<<div id="VALoutput" class="code"|<<span class="keyword"|val>> output : <<span class="code type"|\\{{{   }}}?preformatted:<<a_api text="ename" | type XML.ename >> list ->\\{{{   }}}  ?no_break:<<a_api text="ename" | type XML.ename >> list ->\\{{{   }}}  ?encode:(string -> string) -> (string -> unit) -> <<a_api text="elt" | type XML.elt >> -> unit>>>><<div id="VALoutput_compact" class="code"|<<span class="keyword"|val>> output~_compact : <<span class="code type"|?encode:(string -> string) -> (string -> unit) -> <<a_api text="elt" | type XML.elt >> -> unit>>>><<div id="VALpretty_print" class="code"|<<span class="keyword"|val>> pretty~_print : <<span class="code type"|\\{{{   }}}?width:int ->\\{{{   }}}  ?preformatted:<<a_api text="ename" | type XML.ename >> list ->\\{{{   }}}  ?no_break:<<a_api text="ename" | type XML.ename >> list ->\\{{{   }}}  ?encode:(string -> string) -> (string -> unit) -> <<a_api text="elt" | type XML.elt >> -> unit>>>><<div class="info"|~Children of elements that are mentioned in <<span class='code'|no~_break>> do not
    generate additional line breaks for pretty printing in order not to
    produce spurious white space~.  ~In addition~, elements that are mentioned
    in <<span class='code'|preformatted>> are not pretty printed at all~, with all
   white space intact~.\\
>>
<<div id="VALdecl" class="code"|<<span class="keyword"|val>> decl : <<span class="code type"|?version:string -> ?encoding:string -> (string -> unit) -> unit -> unit>>>><<div class="info"|<<span class='code'|encoding>> is the name of the character encoding~, e~.g~. <<span class='code'|"~U~S~-~A~S~C~I~I">>\\
>>
<<div id="VALamap" class="code"|<<span class="keyword"|val>> amap : <<span class="code type"|(<<a_api text="ename" | type XML.ename >> -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>) -> <<a_api text="elt" | type XML.elt >> -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~Recursively edit attributes for the element and all its children~.\\
>>
<<div id="VALamap1" class="code"|<<span class="keyword"|val>> amap~1 : <<span class="code type"|(<<a_api text="ename" | type XML.ename >> -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>) -> <<a_api text="elt" | type XML.elt >> -> <<a_api text="elt" | type XML.elt >>>>>><<div class="info"|~Edit attributes only for one element~.\\
>>
\\
~The following can safely be exported by higher level libraries~,
    because removing an attribute from a element is always legal~.\\
<<div id="VALrm_attrib" class="code"|<<span class="keyword"|val>> rm~_attrib : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALrm_attrib_from_list" class="code"|<<span class="keyword"|val>> rm~_attrib~_from~_list : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> (string -> bool) -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALmap_int_attrib" class="code"|<<span class="keyword"|val>> map~_int~_attrib : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> (int -> int) -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALmap_string_attrib" class="code"|<<span class="keyword"|val>> map~_string~_attrib : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> (string -> string) -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALmap_string_attrib_in_list" class="code"|<<span class="keyword"|val>> map~_string~_attrib~_in~_list : <<span class="code type"|(<<a_api text="aname" | type XML.aname >> -> bool) -> (string -> string) -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>>\\
~Exporting the following by higher level libraries would drive
    a hole through a type system~, because they allow to add //any//
    attribute to //any// element~.\\
<<div id="VALadd_int_attrib" class="code"|<<span class="keyword"|val>> add~_int~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> int -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALadd_string_attrib" class="code"|<<span class="keyword"|val>> add~_string~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALadd_comma_sep_attrib" class="code"|<<span class="keyword"|val>> add~_comma~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALadd_space_sep_attrib" class="code"|<<span class="keyword"|val>> add~_space~_sep~_attrib : <<span class="code type"|<<a_api text="aname" | type XML.aname >> -> string -> <<a_api text="attribs" | type XML.attribs >> -> <<a_api text="attribs" | type XML.attribs >>>>>><<div id="VALfold" class="code"|<<span class="keyword"|val>> fold : <<span class="code type"|\\{{{   }}}(unit -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (string -> 'a) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> 'a) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> 'a list -> 'a) -> <<a_api text="elt" | type XML.elt >> -> 'a>>>><<div id="VALall_entities" class="code"|<<span class="keyword"|val>> all~_entities : <<span class="code type"|<<a_api text="elt" | type XML.elt >> -> string list>>>><<div id="VALtranslate" class="code"|<<span class="keyword"|val>> translate : <<span class="code type"|\\{{{   }}}(<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >>) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >> list -> <<a_api text="elt" | type XML.elt >>) ->\\{{{   }}}  ('a -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >> list) ->\\{{{   }}}  ('a -> <<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> <<a_api text="elt" | type XML.elt >> list -> <<a_api text="elt" | type XML.elt >> list) ->\\{{{   }}}  (<<a_api text="ename" | type XML.ename >> -> <<a_api text="attrib" | type XML.attrib >> list -> 'a -> 'a) -> 'a -> <<a_api text="elt" | type XML.elt >> -> <<a_api text="elt" | type XML.elt >>>>>><<div class="code" id="TYPEref_tree"|<<span class="keyword"|type>> ref~_tree = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ref_tree>> <<span class="keyword"|of>> <<span class="code type"|int option * (int * <<a_api text="ref_tree" | type XML.ref_tree >>) list>>|>>

<<div id="VALref_node" class="code"|<<span class="keyword"|val>> ref~_node : <<span class="code type"|<<a_api text="elt" | type XML.elt >> -> int>>>><<div id="VALnext_ref" class="code"|<<span class="keyword"|val>> next~_ref : <<span class="code type"|unit -> int>>>><<div class="info"|use with care!\\
>>
<<div id="VALmake_ref_tree" class="code"|<<span class="keyword"|val>> make~_ref~_tree : <<span class="code type"|<<a_api text="elt" | type XML.elt >> -> <<a_api text="ref_tree" | type XML.ref_tree >>>>>><<div id="VALmake_ref_tree_list" class="code"|<<span class="keyword"|val>> make~_ref~_tree~_list : <<span class="code type"|<<a_api text="elt" | type XML.elt >> list -> (int * <<a_api text="ref_tree" | type XML.ref_tree >>) list>>>><<div id="VALregister_event" class="code"|<<span class="keyword"|val>> register~_event : <<span class="code type"|<<a_api text="elt" | type XML.elt >> -> string -> ('a -> 'b) -> 'a -> unit>>>><<div id="VALclass_name" class="code"|<<span class="keyword"|val>> class~_name : <<span class="code type"|string>>>>