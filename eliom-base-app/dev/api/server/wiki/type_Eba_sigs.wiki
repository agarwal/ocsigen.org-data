<<code language="ocaml" | sig
  val doc_start : unit
  module type App =
    sig
      val application_script :
        ?async:bool -> unit -> [> `Script ] Eliom_content.Html5.elt
      val application_name : string
      val is_initial_request : unit -> bool
      type appl
      type page = Html5_types.html Eliom_content.Html5.elt
      type options = Eliom_registration.appl_service_options
      type return = Eliom_registration.appl_service
      type result =
          appl Eliom_registration.application_content Eliom_registration.kind
      val register :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        service:('get, 'post, [< Eliom_service.service_method ],
                 [< Eliom_service.attached ],
                 [< Eliom_service.internal_service_kind ],
                 [< Eliom_service.suff ], 'gn, 'pn, [ `Registrable ],
                 [< Eliom_service.non_ocaml_service ])
                Eliom_service.service ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get -> 'post -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        unit
      val register_service :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?priority:int ->
        path:Eliom_lib.Url.path ->
        get_params:('get, [< Eliom_service.suff ] as 'a, 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get -> unit -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, unit, [< Eliom_service.service_method > `Get ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `Service ], 'a, 'gn, unit,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_coservice :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        fallback:(unit, unit, [ `Get ], Eliom_service.attached_kind,
                  [ `Service ], [ `WithoutSuffix ], unit, unit,
                  [< Eliom_service.registrable ],
                  [< Eliom_service.non_ocaml_service ])
                 Eliom_service.service ->
        get_params:('get, [ `WithoutSuffix ], 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get -> unit -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, unit, [< Eliom_service.service_method > `Get ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `AttachedCoservice ],
         [ `WithoutSuffix ], 'gn, unit,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_coservice' :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        get_params:('get, [ `WithoutSuffix ], 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get -> unit -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, unit, [< Eliom_service.service_method > `Get ],
         [< Eliom_service.attached > `Nonattached ],
         [< Eliom_service.service_kind > `NonattachedCoservice ],
         [ `WithoutSuffix ], 'gn, unit,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_post_service :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?priority:int ->
        fallback:('get, unit, [ `Get ], Eliom_service.attached_kind,
                  [ `AttachedCoservice | `Service ],
                  [< Eliom_service.suff ] as 'a, 'gn, unit,
                  [< `Registrable ], [< Eliom_service.non_ocaml_service ])
                 Eliom_service.service ->
        post_params:('post, [ `WithoutSuffix ], 'pn)
                    Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get -> 'post -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, 'post, [< Eliom_service.service_method > `Post ],
         [< Eliom_service.attached > `Attached ],
         [ `AttachedCoservice | `Service ], 'a, 'gn, 'pn,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_post_coservice :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        fallback:('get, unit, [< `Get ], [< Eliom_service.attached_kind ],
                  [< `AttachedCoservice | `Service ],
                  [< Eliom_service.suff ] as 'a, 'gn, unit,
                  [< `Registrable ], [< Eliom_service.non_ocaml_service ])
                 Eliom_service.service ->
        post_params:('post, [ `WithoutSuffix ], 'pn)
                    Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get -> 'post -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, 'post, [< Eliom_service.service_method > `Post ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `AttachedCoservice ], 'a, 'gn, 'pn,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_post_coservice' :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?keep_get_na_params:bool ->
        ?https:bool ->
        post_params:('post, [ `WithoutSuffix ], 'pn)
                    Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        (unit -> 'post -> Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        (unit, 'post, [< Eliom_service.service_method > `Post ],
         [< Eliom_service.attached > `Nonattached ],
         [< Eliom_service.service_kind > `NonattachedCoservice ],
         [ `WithoutSuffix ], unit, 'pn,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_put_service :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?priority:int ->
        path:Eliom_lib.Url.path ->
        get_params:('get, [< Eliom_service.suff ] as 'a, 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get ->
         Eliom_parameter.raw_post_data ->
         Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, Eliom_parameter.raw_post_data,
         [< Eliom_service.service_method > `Put ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `Service ], 'a, 'gn,
         Eliom_parameter.no_param_name,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_put_coservice :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        fallback:(unit, Eliom_parameter.raw_post_data, [ `Put ],
                  Eliom_service.attached_kind, [ `Service ],
                  [ `WithoutSuffix ], unit, Eliom_parameter.no_param_name,
                  [< Eliom_service.registrable ],
                  [< Eliom_service.non_ocaml_service ])
                 Eliom_service.service ->
        get_params:('get, [ `WithoutSuffix ], 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get ->
         Eliom_parameter.raw_post_data ->
         Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, Eliom_parameter.raw_post_data,
         [< Eliom_service.service_method > `Put ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `AttachedCoservice ],
         [ `WithoutSuffix ], 'gn, Eliom_parameter.no_param_name,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_put_coservice' :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        get_params:('get, [ `WithoutSuffix ], 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get ->
         Eliom_parameter.raw_post_data ->
         Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, Eliom_parameter.raw_post_data,
         [< Eliom_service.service_method > `Put ],
         [< Eliom_service.attached > `Nonattached ],
         [< Eliom_service.service_kind > `NonattachedCoservice ],
         [ `WithoutSuffix ], 'gn, Eliom_parameter.no_param_name,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_delete_service :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?https:bool ->
        ?priority:int ->
        path:Eliom_lib.Url.path ->
        get_params:('get, [< Eliom_service.suff ] as 'a, 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get ->
         Eliom_parameter.raw_post_data ->
         Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, Eliom_parameter.raw_post_data,
         [< Eliom_service.service_method > `Delete ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `Service ], 'a, 'gn,
         Eliom_parameter.no_param_name,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_delete_coservice :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        fallback:(unit, Eliom_parameter.raw_post_data, [ `Delete ],
                  Eliom_service.attached_kind, [ `Service ],
                  [ `WithoutSuffix ], unit, Eliom_parameter.no_param_name,
                  [< Eliom_service.registrable ],
                  [< Eliom_service.non_ocaml_service ])
                 Eliom_service.service ->
        get_params:('get, [ `WithoutSuffix ], 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get ->
         Eliom_parameter.raw_post_data ->
         Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, Eliom_parameter.raw_post_data,
         [< Eliom_service.service_method > `Delete ],
         [< Eliom_service.attached > `Attached ],
         [< Eliom_service.service_kind > `AttachedCoservice ],
         [ `WithoutSuffix ], 'gn, Eliom_parameter.no_param_name,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val register_delete_coservice' :
        ?scope:[< Eliom_common.scope ] ->
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        ?secure_session:bool ->
        ?name:string ->
        ?csrf_safe:bool ->
        ?csrf_scope:[< Eliom_common.user_scope ] ->
        ?csrf_secure:bool ->
        ?max_use:int ->
        ?timeout:float ->
        ?https:bool ->
        get_params:('get, [ `WithoutSuffix ], 'gn)
                   Eliom_parameter.params_type ->
        ?error_handler:((string * exn) list ->
                        Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get ->
         Eliom_parameter.raw_post_data ->
         Html5_types.html Eliom_content.Html5.elt Lwt.t) ->
        ('get, Eliom_parameter.raw_post_data,
         [< Eliom_service.service_method > `Delete ],
         [< Eliom_service.attached > `Nonattached ],
         [< Eliom_service.service_kind > `NonattachedCoservice ],
         [ `WithoutSuffix ], 'gn, Eliom_parameter.no_param_name,
         [< Eliom_service.registrable > `Registrable ],
         [> Eliom_service.appl_service ])
        Eliom_service.service
      val send :
        ?options:Eliom_registration.appl_service_options ->
        ?charset:string ->
        ?code:int ->
        ?content_type:string ->
        ?headers:Http_headers.t ->
        Html5_types.html Eliom_content.Html5.elt ->
        appl Eliom_registration.application_content Eliom_registration.kind
        Lwt.t
      val typed_name : appl Eliom_registration.application_name
      val app_name : string
    end
  module type Groups =
    sig
      type t
      val in_group : group:Eba_sigs.Groups.t -> userid:int64 -> bool Lwt.t
    end
  module type Session =
    sig
      type group
      exception Permission_denied
      exception Not_connected
      val connect : int64 -> unit Lwt.t
      val disconnect : unit -> unit Lwt.t
      val connected_fun :
        ?allow:Eba_sigs.Session.group list ->
        ?deny:Eba_sigs.Session.group list ->
        (int64 -> 'a -> 'b -> 'c Lwt.t) -> 'a -> 'b -> 'c Lwt.t
      val connected_rpc :
        ?allow:Eba_sigs.Session.group list ->
        ?deny:Eba_sigs.Session.group list ->
        (int64 -> 'a -> 'b Lwt.t) -> 'a -> 'b Lwt.t
      val get_current_userid : unit -> int64
      module Opt :
        sig
          val connected_fun :
            ?allow:Eba_sigs.Session.group list ->
            ?deny:Eba_sigs.Session.group list ->
            (int64 option -> 'a -> 'b -> 'c Lwt.t) -> 'a -> 'b -> 'c Lwt.t
          val connected_rpc :
            ?allow:Eba_sigs.Session.group list ->
            ?deny:Eba_sigs.Session.group list ->
            (int64 option -> 'a -> 'b Lwt.t) -> 'a -> 'b Lwt.t
          val get_current_userid : unit -> int64 option
        end
    end
  module type Page =
    sig
      module Session : Session
      exception Predicate_failed of exn option
      exception Permission_denied
      exception Not_connected
      type page = Html5_types.html Eliom_content.Html5.elt
      type page_content =
          Html5_types.body_content Eliom_content.Html5.elt list
      val page :
        ?predicate:('a -> 'b -> bool Lwt.t) ->
        ?fallback:('a -> 'b -> exn -> Eba_sigs.Page.page_content Lwt.t) ->
        ('a -> 'b -> Eba_sigs.Page.page_content Lwt.t) ->
        'a -> 'b -> Eba_sigs.Page.page Lwt.t
      val connected_page :
        ?allow:Eba_sigs.Session.group list ->
        ?deny:Eba_sigs.Session.group list ->
        ?predicate:(int64 -> 'a -> 'b -> bool Lwt.t) ->
        ?fallback:(int64 option ->
                   'a -> 'b -> exn -> Eba_sigs.Page.page_content Lwt.t) ->
        (int64 -> 'a -> 'b -> Eba_sigs.Page.page_content Lwt.t) ->
        'a -> 'b -> Eba_sigs.Page.page Lwt.t
    end
  module type Email =
    sig
      exception Invalid_mailer of string
      val email_pattern : string
      val is_valid : string -> bool
      val send :
        ?from_addr:string * string ->
        to_addrs:(string * string) list ->
        subject:string -> string list -> unit
    end
  module type Reqm =
    sig
      type html = Html5_types.div Eliom_content.Html5.elt
      class type virtual reqm_base =
        object method virtual to_html : Eba_sigs.Reqm.html end
      class type ['a] reqm =
        object
          method clear : unit
          method get : 'a
          method get_opt : 'a option
          method has : bool
          method set : 'a -> unit
          method to_html : Eba_sigs.Reqm.html
        end
      type set
      type 'a cons
      val cons : 'a Eba_sigs.Reqm.cons
      val create_set : string -> Eba_sigs.Reqm.set
      val create :
        ?cons:'a Eba_sigs.Reqm.cons ->
        ?set:Eba_sigs.Reqm.set ->
        ?default:(unit -> 'a) ->
        to_html:('a -> Eba_sigs.Reqm.html) -> unit -> 'a Eba_sigs.Reqm.reqm
      val to_html : #Eba_sigs.Reqm.reqm_base -> Eba_sigs.Reqm.html
      val set : 'a Eba_sigs.Reqm.reqm -> 'a -> unit
      val push : 'a list Eba_sigs.Reqm.reqm -> 'a -> unit
      val get : 'a Eba_sigs.Reqm.reqm -> 'a
      val get_opt : 'a Eba_sigs.Reqm.reqm -> 'a option
      val has : 'a Eba_sigs.Reqm.reqm -> bool
      val clear : 'a Eba_sigs.Reqm.reqm -> unit
      val name_of_set : Eba_sigs.Reqm.set -> string
      val to_list : Eba_sigs.Reqm.set -> Eba_sigs.Reqm.reqm_base list
    end
  module type State =
    sig
      type state
      type t = Eba_sigs.State.state * string * string option
      val name_of_state : Eba_sigs.State.state -> string
      val desc_of_state : Eba_sigs.State.state -> string
      val fun_of_state :
        Eba_sigs.State.state -> (unit, unit) Eliom_pervasives.server_function
      val descopt_of_state : Eba_sigs.State.state -> string option
      val set_website_state : Eba_sigs.State.state -> unit Lwt.t
      val get_website_state : unit -> Eba_sigs.State.state Lwt.t
      val all : unit -> Eba_sigs.State.state list
    end
  module Tools :
    sig
      module type Cache_sig =
        sig
          type key_t
          type value_t
          val has : Eba_sigs.Tools.Cache_sig.key_t -> bool
          val set :
            Eba_sigs.Tools.Cache_sig.key_t ->
            Eba_sigs.Tools.Cache_sig.value_t -> unit
          val reset : Eba_sigs.Tools.Cache_sig.key_t -> unit
          val get :
            Eba_sigs.Tools.Cache_sig.key_t ->
            Eba_sigs.Tools.Cache_sig.value_t Lwt.t
          val wrap_function :
            Eba_sigs.Tools.Cache_sig.key_t -> (unit -> 'a Lwt.t) -> 'a Lwt.t
        end
      module type Cache_f =
        sig
          module Make :
            functor
              (M : sig
                     type key_t
                     type value_t
                     val compare :
                       Eba_sigs.Tools.Cache_f.Make.key_t ->
                       Eba_sigs.Tools.Cache_f.Make.key_t -> int
                     val get :
                       Eba_sigs.Tools.Cache_f.Make.key_t ->
                       Eba_sigs.Tools.Cache_f.Make.value_t Lwt.t
                   end) ->
              sig
                type key_t = M.key_t
                type value_t = M.value_t
                val has : key_t -> bool
                val set : key_t -> value_t -> unit
                val reset : key_t -> unit
                val get : key_t -> value_t Lwt.t
                val wrap_function : key_t -> (unit -> 'a Lwt.t) -> 'a Lwt.t
              end
        end
    end
  module type Tools = sig module Cache_f : Tools.Cache_f end
end >>