<<code language="ocaml" | sig
  type (-'a, 'b) ft
  val string_of_alignment_baseline :
    ([< Svg_types.alignment_baseline ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_bool : (bool, string) Svg_sigs.Wrapped_functions.ft
  val string_of_big_variant :
    ([< Svg_types.big_variant ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_coords :
    (Svg_types.coords, string) Svg_sigs.Wrapped_functions.ft
  val string_of_dominant_baseline :
    ([< Svg_types.dominant_baseline ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_fourfloats :
    (float * float * float * float, string) Svg_sigs.Wrapped_functions.ft
  val string_of_in_value :
    ([< Svg_types.in_value ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_int : (int, string) Svg_sigs.Wrapped_functions.ft
  val string_of_length :
    (Svg_types.Unit.length, string) Svg_sigs.Wrapped_functions.ft
  val string_of_lengths :
    (Svg_types.lengths, string) Svg_sigs.Wrapped_functions.ft
  val string_of_number : (float, string) Svg_sigs.Wrapped_functions.ft
  val string_of_number_optional_number :
    (float * float option, string) Svg_sigs.Wrapped_functions.ft
  val string_of_numbers : (float list, string) Svg_sigs.Wrapped_functions.ft
  val string_of_numbers_semicolon :
    (float list, string) Svg_sigs.Wrapped_functions.ft
  val string_of_offset :
    ([< Svg_types.offset ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_orient :
    ([< Svg_types.orient ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_paint :
    ([< Svg_types.paint ], string) Svg_sigs.Wrapped_functions.ft
  val string_of_strokedasharray :
    (Svg_types.lengths, string) Svg_sigs.Wrapped_functions.ft
  val string_of_transform :
    (Svg_types.transform, string) Svg_sigs.Wrapped_functions.ft
  val string_of_transforms :
    (Svg_types.transforms, string) Svg_sigs.Wrapped_functions.ft
end >>